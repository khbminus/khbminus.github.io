export const kotlinDeclarationsSize = {
    "kotlin.AutoCloseable": {
        "size": 260,
        "type": "class"
    },
    "kotlin.AutoCloseable.close()": {
        "size": 22,
        "type": "function"
    },
    "kotlin.AutoCloseable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.AutoCloseable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.AutoCloseable.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.closeFinally(Throwable?)": {
        "size": 571,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection$removeAll$lambda": {
        "size": 707,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableCollection$removeAll$lambda.<init>(Collection<E>)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection$removeAll$lambda.invoke(E)": {
        "size": 296,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection$removeAll$lambda.invoke(P1)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection$removeAll$lambda.$elements": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.AbstractMutableCollection$retainAll$lambda": {
        "size": 707,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableCollection$retainAll$lambda.<init>(Collection<E>)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection$retainAll$lambda.invoke(E)": {
        "size": 296,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection$retainAll$lambda.invoke(P1)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection$retainAll$lambda.$elements": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.AbstractMutableCollection": {
        "size": 2997,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableCollection.<init>()": {
        "size": 95,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.addAll(Collection<E>)": {
        "size": 579,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.remove(E)": {
        "size": 396,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.removeAll(Collection<E>)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.retainAll(Collection<E>)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.clear()": {
        "size": 330,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.iterator()": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.add(E)": {
        "size": 59,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableCollection.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl": {
        "size": 2557,
        "type": "class"
    },
    "kotlin.collections.IteratorImpl.<init>(AbstractMutableList<E>)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.IteratorImpl.last": {
        "size": 22,
        "type": "field"
    },
    "kotlin.collections.IteratorImpl.hasNext()": {
        "size": 276,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.next()": {
        "size": 657,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.remove()": {
        "size": 989,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.$this": {
        "size": 62,
        "type": "field"
    },
    "kotlin.collections.ListIteratorImpl": {
        "size": 3652,
        "type": "class"
    },
    "kotlin.collections.ListIteratorImpl.<init>(AbstractMutableList<E>, Int)": {
        "size": 375,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.hasPrevious()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.nextIndex()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.previous()": {
        "size": 548,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.previousIndex()": {
        "size": 196,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.add(E)": {
        "size": 608,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.set(E)": {
        "size": 958,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.hasNext()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.next()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.remove()": {
        "size": 34,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.$this": {
        "size": 62,
        "type": "field"
    },
    "kotlin.collections.SubList": {
        "size": 4482,
        "type": "class"
    },
    "kotlin.collections.SubList.<init>(AbstractMutableList<E>, Int, Int)": {
        "size": 528,
        "type": "function"
    },
    "kotlin.collections.SubList.list": {
        "size": 59,
        "type": "field"
    },
    "kotlin.collections.SubList.fromIndex": {
        "size": 45,
        "type": "field"
    },
    "kotlin.collections.SubList._size": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.SubList.add(Int, E)": {
        "size": 693,
        "type": "function"
    },
    "kotlin.collections.SubList.get(Int)": {
        "size": 366,
        "type": "function"
    },
    "kotlin.collections.SubList.removeAt(Int)": {
        "size": 601,
        "type": "function"
    },
    "kotlin.collections.SubList.set(Int, E)": {
        "size": 397,
        "type": "function"
    },
    "kotlin.collections.SubList.<get-size>()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.collections.SubList.add(E)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.SubList.addAll(Int, Collection<E>)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.SubList.addAll(Collection<E>)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.collections.SubList.clear()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.SubList.removeAll(Collection<E>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.SubList.retainAll(Collection<E>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.SubList.iterator()": {
        "size": 65,
        "type": "function"
    },
    "kotlin.collections.SubList.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.SubList.indexOf(E)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.SubList.lastIndexOf(E)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.collections.SubList.listIterator()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.SubList.listIterator(Int)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.SubList.subList(Int, Int)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.collections.SubList.removeRange(Int, Int)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.SubList.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.SubList.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.SubList.remove(E)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.SubList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.SubList.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.SubList.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.SubList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.SubList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList$removeAll$lambda": {
        "size": 689,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableList$removeAll$lambda.<init>(Collection<E>)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList$removeAll$lambda.invoke(E)": {
        "size": 284,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList$removeAll$lambda.invoke(P1)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList$removeAll$lambda.$elements": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.AbstractMutableList$retainAll$lambda": {
        "size": 716,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableList$retainAll$lambda.<init>(Collection<E>)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList$retainAll$lambda.invoke(E)": {
        "size": 311,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList$retainAll$lambda.invoke(P1)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList$retainAll$lambda.$elements": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.AbstractMutableList": {
        "size": 8515,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableList.<init>()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.modCount": {
        "size": 26,
        "type": "field"
    },
    "kotlin.collections.AbstractMutableList.add(Int, E)": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.removeAt(Int)": {
        "size": 47,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.set(Int, E)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.add(E)": {
        "size": 227,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.addAll(Int, Collection<E>)": {
        "size": 814,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.clear()": {
        "size": 202,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.removeAll(Collection<E>)": {
        "size": 315,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.retainAll(Collection<E>)": {
        "size": 315,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.iterator()": {
        "size": 201,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.contains(E)": {
        "size": 230,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.indexOf(E)": {
        "size": 869,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.lastIndexOf(E)": {
        "size": 833,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.listIterator()": {
        "size": 201,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.listIterator(Int)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.subList(Int, Int)": {
        "size": 253,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.removeRange(Int, Int)": {
        "size": 1313,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.equals(Any?)": {
        "size": 516,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.hashCode()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.addAll(Collection<E>)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.remove(E)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableList.get(Int)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.<no name provided>": {
        "size": 7310,
        "type": "class"
    },
    "kotlin.collections.<no name provided>.<init>(MutableIterator<MutableEntry<K, V>>)": {
        "size": 168,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.hasNext()": {
        "size": 270,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.next()": {
        "size": 379,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.remove()": {
        "size": 250,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.equals(Any?)": {
        "size": 526,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.hashCode()": {
        "size": 199,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.$entryIterator": {
        "size": 82,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.<init>(AbstractMutableMap<K, V>)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.add(K)": {
        "size": 123,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.clear()": {
        "size": 229,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(K)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.iterator()": {
        "size": 535,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.remove(K)": {
        "size": 482,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<get-size>()": {
        "size": 244,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.addAll(Collection<K>)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.removeAll(Collection<K>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.retainAll(Collection<K>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.isEmpty()": {
        "size": 283,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<K>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.this$0": {
        "size": 63,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.add(V)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(V)": {
        "size": 283,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.addAll(Collection<V>)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.remove(V)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.removeAll(Collection<V>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.retainAll(Collection<V>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<V>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap": {
        "size": 4337,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableMap.<init>()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.put(K, V)": {
        "size": 49,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.putAll(Map<out K, V>)": {
        "size": 940,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.remove(K)": {
        "size": 626,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.clear()": {
        "size": 219,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap._keys": {
        "size": 34,
        "type": "field"
    },
    "kotlin.collections.AbstractMutableMap.<get-keys>()": {
        "size": 590,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap._values": {
        "size": 43,
        "type": "field"
    },
    "kotlin.collections.AbstractMutableMap.<get-values>()": {
        "size": 612,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.containsKey(K)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.containsValue(V)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.containsEntry(Entry<*, *>?)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.get(K)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.<get-size>()": {
        "size": 43,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableMap.<get-entries>()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet": {
        "size": 1854,
        "type": "class"
    },
    "kotlin.collections.AbstractMutableSet.<init>()": {
        "size": 102,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.add(E)": {
        "size": 48,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.equals(Any?)": {
        "size": 502,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.hashCode()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.addAll(Collection<E>)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.remove(E)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.removeAll(Collection<E>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.retainAll(Collection<E>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.clear()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.iterator()": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.AbstractMutableSet.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.Companion": {
        "size": 5917,
        "type": "class"
    },
    "kotlin.collections.Companion.<init>()": {
        "size": 593,
        "type": "function"
    },
    "kotlin.collections.Companion.Empty": {
        "size": 56,
        "type": "field"
    },
    "kotlin.collections.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.collections.Companion_getInstance()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.collections.Itr": {
        "size": 4909,
        "type": "class"
    },
    "kotlin.collections.Itr.list": {
        "size": 49,
        "type": "field"
    },
    "kotlin.collections.Itr.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.Itr.lastIndex": {
        "size": 27,
        "type": "field"
    },
    "kotlin.collections.Itr.<init>(ArrayList<E>, Int)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.collections.Itr.hasPrevious()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.collections.Itr.hasNext()": {
        "size": 191,
        "type": "function"
    },
    "kotlin.collections.Itr.previousIndex()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.collections.Itr.nextIndex()": {
        "size": 130,
        "type": "function"
    },
    "kotlin.collections.Itr.previous()": {
        "size": 522,
        "type": "function"
    },
    "kotlin.collections.Itr.next()": {
        "size": 671,
        "type": "function"
    },
    "kotlin.collections.Itr.set(E)": {
        "size": 875,
        "type": "function"
    },
    "kotlin.collections.Itr.add(E)": {
        "size": 467,
        "type": "function"
    },
    "kotlin.collections.Itr.remove()": {
        "size": 929,
        "type": "function"
    },
    "kotlin.collections.Itr.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Itr.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Itr.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Itr.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.collections.ArrayList": {
        "size": 24661,
        "type": "class"
    },
    "kotlin.collections.ArrayList.<init>(Array<E>, Int, Int, Boolean, ArrayList<E>?, ArrayList<E>?)": {
        "size": 406,
        "type": "function"
    },
    "kotlin.collections.ArrayList.backingArray": {
        "size": 35,
        "type": "field"
    },
    "kotlin.collections.ArrayList.offset": {
        "size": 24,
        "type": "field"
    },
    "kotlin.collections.ArrayList.length": {
        "size": 24,
        "type": "field"
    },
    "kotlin.collections.ArrayList.isReadOnly": {
        "size": 32,
        "type": "field"
    },
    "kotlin.collections.ArrayList.backingList": {
        "size": 57,
        "type": "field"
    },
    "kotlin.collections.ArrayList.root": {
        "size": 50,
        "type": "field"
    },
    "kotlin.collections.ArrayList.<init>()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.ArrayList.<init>(Int)": {
        "size": 975,
        "type": "function"
    },
    "kotlin.collections.ArrayList.<init>(Collection<E>)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.collections.ArrayList.build()": {
        "size": 340,
        "type": "function"
    },
    "kotlin.collections.ArrayList.<get-size>()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.collections.ArrayList.isEmpty()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.collections.ArrayList.get(Int)": {
        "size": 315,
        "type": "function"
    },
    "kotlin.collections.ArrayList.set(Int, E)": {
        "size": 494,
        "type": "function"
    },
    "kotlin.collections.ArrayList.indexOf(E)": {
        "size": 611,
        "type": "function"
    },
    "kotlin.collections.ArrayList.lastIndexOf(E)": {
        "size": 546,
        "type": "function"
    },
    "kotlin.collections.ArrayList.iterator()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.collections.ArrayList.listIterator()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.collections.ArrayList.listIterator(Int)": {
        "size": 281,
        "type": "function"
    },
    "kotlin.collections.ArrayList.add(E)": {
        "size": 292,
        "type": "function"
    },
    "kotlin.collections.ArrayList.add(Int, E)": {
        "size": 351,
        "type": "function"
    },
    "kotlin.collections.ArrayList.addAll(Collection<E>)": {
        "size": 378,
        "type": "function"
    },
    "kotlin.collections.ArrayList.addAll(Int, Collection<E>)": {
        "size": 460,
        "type": "function"
    },
    "kotlin.collections.ArrayList.clear()": {
        "size": 240,
        "type": "function"
    },
    "kotlin.collections.ArrayList.removeAt(Int)": {
        "size": 337,
        "type": "function"
    },
    "kotlin.collections.ArrayList.remove(E)": {
        "size": 351,
        "type": "function"
    },
    "kotlin.collections.ArrayList.removeAll(Collection<E>)": {
        "size": 352,
        "type": "function"
    },
    "kotlin.collections.ArrayList.retainAll(Collection<E>)": {
        "size": 351,
        "type": "function"
    },
    "kotlin.collections.ArrayList.subList(Int, Int)": {
        "size": 710,
        "type": "function"
    },
    "kotlin.collections.ArrayList.trimToSize()": {
        "size": 406,
        "type": "function"
    },
    "kotlin.collections.ArrayList.ensureCapacity(Int)": {
        "size": 332,
        "type": "function"
    },
    "kotlin.collections.ArrayList.equals(Any?)": {
        "size": 481,
        "type": "function"
    },
    "kotlin.collections.ArrayList.hashCode()": {
        "size": 235,
        "type": "function"
    },
    "kotlin.collections.ArrayList.toString()": {
        "size": 1439,
        "type": "function"
    },
    "kotlin.collections.ArrayList.toArray(Array<T>)": {
        "size": 1167,
        "type": "function"
    },
    "kotlin.collections.ArrayList.toArray()": {
        "size": 297,
        "type": "function"
    },
    "kotlin.collections.ArrayList.checkIsMutable()": {
        "size": 287,
        "type": "function"
    },
    "kotlin.collections.ArrayList.ensureExtraCapacity(Int)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.collections.ArrayList.ensureCapacityInternal(Int)": {
        "size": 558,
        "type": "function"
    },
    "kotlin.collections.ArrayList.contentEquals(List<*>)": {
        "size": 176,
        "type": "function"
    },
    "kotlin.collections.ArrayList.insertAtInternal(Int, Int)": {
        "size": 692,
        "type": "function"
    },
    "kotlin.collections.ArrayList.addAtInternal(Int, E)": {
        "size": 856,
        "type": "function"
    },
    "kotlin.collections.ArrayList.addAllInternal(Int, Collection<E>, Int)": {
        "size": 1189,
        "type": "function"
    },
    "kotlin.collections.ArrayList.removeAtInternal(Int)": {
        "size": 1443,
        "type": "function"
    },
    "kotlin.collections.ArrayList.removeRangeInternal(Int, Int)": {
        "size": 1216,
        "type": "function"
    },
    "kotlin.collections.ArrayList.retainOrRemoveAllInternal(Int, Int, Collection<E>, Boolean)": {
        "size": 3000,
        "type": "function"
    },
    "kotlin.collections.ArrayList.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.ArrayList.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.ArrayList.removeRange(Int, Int)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.subarrayContentHashCode(Int, Int)": {
        "size": 1152,
        "type": "function"
    },
    "kotlin.collections.subarrayContentEquals(Int, Int, List<*>)": {
        "size": 708,
        "type": "function"
    },
    "kotlin.collections.sortArray(IntArray, Int, Int)": {
        "size": 180,
        "type": "function"
    },
    "kotlin.collections.sortArray(LongArray, Int, Int)": {
        "size": 181,
        "type": "function"
    },
    "kotlin.collections.sortArray(CharArray, Int, Int)": {
        "size": 181,
        "type": "function"
    },
    "kotlin.collections.sortArray(Array<out T>, Int, Int)": {
        "size": 404,
        "type": "function"
    },
    "kotlin.collections.sortArray(ByteArray, Int, Int)": {
        "size": 181,
        "type": "function"
    },
    "kotlin.collections.sortArray(ShortArray, Int, Int)": {
        "size": 182,
        "type": "function"
    },
    "kotlin.collections.sortArray(FloatArray, Int, Int)": {
        "size": 182,
        "type": "function"
    },
    "kotlin.collections.sortArray(DoubleArray, Int, Int)": {
        "size": 183,
        "type": "function"
    },
    "kotlin.collections.sortArrayWith(Array<out T>, Int, Int, Comparator<T>)": {
        "size": 451,
        "type": "function"
    },
    "kotlin.collections.quickSort(IntArray, Int, Int)": {
        "size": 571,
        "type": "function"
    },
    "kotlin.collections.quickSort(LongArray, Int, Int)": {
        "size": 572,
        "type": "function"
    },
    "kotlin.collections.quickSort(CharArray, Int, Int)": {
        "size": 572,
        "type": "function"
    },
    "kotlin.collections.mergeSort(Array<T>, Int, Int)": {
        "size": 1127,
        "type": "function"
    },
    "kotlin.collections.quickSort(ByteArray, Int, Int)": {
        "size": 572,
        "type": "function"
    },
    "kotlin.collections.quickSort(ShortArray, Int, Int)": {
        "size": 573,
        "type": "function"
    },
    "kotlin.collections.quickSort(FloatArray, Int, Int)": {
        "size": 573,
        "type": "function"
    },
    "kotlin.collections.quickSort(DoubleArray, Int, Int)": {
        "size": 574,
        "type": "function"
    },
    "kotlin.collections.mergeSort(Array<T>, Int, Int, Comparator<T>)": {
        "size": 1143,
        "type": "function"
    },
    "kotlin.collections.partition(IntArray, Int, Int)": {
        "size": 1367,
        "type": "function"
    },
    "kotlin.collections.partition(LongArray, Int, Int)": {
        "size": 1370,
        "type": "function"
    },
    "kotlin.collections.partition(CharArray, Int, Int)": {
        "size": 1452,
        "type": "function"
    },
    "kotlin.collections.mergeSort(Array<T>, Array<T>, Int, Int)": {
        "size": 3561,
        "type": "function"
    },
    "kotlin.collections.partition(ByteArray, Int, Int)": {
        "size": 1474,
        "type": "function"
    },
    "kotlin.collections.partition(ShortArray, Int, Int)": {
        "size": 1481,
        "type": "function"
    },
    "kotlin.collections.partition(FloatArray, Int, Int)": {
        "size": 1457,
        "type": "function"
    },
    "kotlin.collections.partition(DoubleArray, Int, Int)": {
        "size": 1462,
        "type": "function"
    },
    "kotlin.collections.mergeSort(Array<T>, Array<T>, Int, Int, Comparator<T>)": {
        "size": 3531,
        "type": "function"
    },
    "kotlin.collections.copyToArrayImpl(Collection<*>)": {
        "size": 1445,
        "type": "function"
    },
    "kotlin.collections.arrayOfNulls(Array<T>, Int)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.collections.contentDeepHashCodeImpl()": {
        "size": 4397,
        "type": "function"
    },
    "kotlin.collections.copyOfNulls(Int)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.collections.checkCopyOfRangeArguments(Int, Int, Int)": {
        "size": 843,
        "type": "function"
    },
    "kotlin.collections.copyOfNulls(Int, Int)": {
        "size": 740,
        "type": "function"
    },
    "kotlin.collections.Collection": {
        "size": 484,
        "type": "class"
    },
    "kotlin.collections.Collection.<get-size>()": {
        "size": 32,
        "type": "function"
    },
    "kotlin.collections.Collection.isEmpty()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.Collection.contains(@UnsafeVariance E)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.Collection.iterator()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.collections.Collection.containsAll(Collection<@UnsafeVariance E>)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.collections.Collection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Collection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Collection.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableCollection": {
        "size": 850,
        "type": "class"
    },
    "kotlin.collections.MutableCollection.iterator()": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.add(E)": {
        "size": 39,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.remove(E)": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.addAll(Collection<E>)": {
        "size": 55,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.removeAll(Collection<E>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.retainAll(Collection<E>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.clear()": {
        "size": 22,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.isEmpty()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.contains(E)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.containsAll(Collection<E>)": {
        "size": 80,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableCollection.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Iterable": {
        "size": 241,
        "type": "class"
    },
    "kotlin.collections.Iterable.iterator()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.collections.Iterable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Iterable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Iterable.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableIterable": {
        "size": 278,
        "type": "class"
    },
    "kotlin.collections.MutableIterable.iterator()": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableIterable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableIterable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableIterable.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.listOf(T)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.collections.shuffled()": {
        "size": 566,
        "type": "function"
    },
    "kotlin.collections.eachCount()": {
        "size": 264,
        "type": "function"
    },
    "kotlin.collections.fill(T)": {
        "size": 711,
        "type": "function"
    },
    "kotlin.collections.shuffle()": {
        "size": 885,
        "type": "function"
    },
    "kotlin.collections.Companion.MAGIC": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.Companion.INITIAL_CAPACITY": {
        "size": 56,
        "type": "field"
    },
    "kotlin.collections.Companion.INITIAL_MAX_PROBE_DISTANCE": {
        "size": 66,
        "type": "field"
    },
    "kotlin.collections.Companion.TOMBSTONE": {
        "size": 50,
        "type": "field"
    },
    "kotlin.collections.Companion.computeHashSize(Int)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.collections.Companion.computeShift(Int)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.collections.EmptyHolder": {
        "size": 996,
        "type": "class"
    },
    "kotlin.collections.EmptyHolder.<init>()": {
        "size": 610,
        "type": "function"
    },
    "kotlin.collections.EmptyHolder.value_": {
        "size": 64,
        "type": "field"
    },
    "kotlin.collections.EmptyHolder.value()": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.EmptyHolder.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.EmptyHolder.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.EmptyHolder.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.EmptyHolder_instance": {
        "size": 58,
        "type": "field"
    },
    "kotlin.collections.EmptyHolder_getInstance()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.collections.Itr.<init>(HashMap<K, V>)": {
        "size": 254,
        "type": "function"
    },
    "kotlin.collections.Itr.map": {
        "size": 49,
        "type": "field"
    },
    "kotlin.collections.Itr.initNext()": {
        "size": 519,
        "type": "function"
    },
    "kotlin.collections.KeysItr": {
        "size": 1625,
        "type": "class"
    },
    "kotlin.collections.KeysItr.<init>(HashMap<K, V>)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.collections.KeysItr.next()": {
        "size": 678,
        "type": "function"
    },
    "kotlin.collections.KeysItr.initNext()": {
        "size": 45,
        "type": "function"
    },
    "kotlin.collections.KeysItr.hasNext()": {
        "size": 210,
        "type": "function"
    },
    "kotlin.collections.KeysItr.remove()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.collections.KeysItr.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.KeysItr.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.KeysItr.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ValuesItr": {
        "size": 1769,
        "type": "class"
    },
    "kotlin.collections.ValuesItr.<init>(HashMap<K, V>)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.collections.ValuesItr.next()": {
        "size": 808,
        "type": "function"
    },
    "kotlin.collections.ValuesItr.initNext()": {
        "size": 45,
        "type": "function"
    },
    "kotlin.collections.ValuesItr.hasNext()": {
        "size": 210,
        "type": "function"
    },
    "kotlin.collections.ValuesItr.remove()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.collections.ValuesItr.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ValuesItr.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ValuesItr.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.EntriesItr": {
        "size": 5145,
        "type": "class"
    },
    "kotlin.collections.EntriesItr.<init>(HashMap<K, V>)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.next()": {
        "size": 720,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.nextHashCode()": {
        "size": 2024,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.nextAppendString(StringBuilder)": {
        "size": 1162,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.initNext()": {
        "size": 45,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.hasNext()": {
        "size": 210,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.remove()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.EntriesItr.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.EntryRef": {
        "size": 3863,
        "type": "class"
    },
    "kotlin.collections.EntryRef.<init>(HashMap<K, V>, Int)": {
        "size": 145,
        "type": "function"
    },
    "kotlin.collections.EntryRef.map": {
        "size": 49,
        "type": "field"
    },
    "kotlin.collections.EntryRef.index": {
        "size": 41,
        "type": "field"
    },
    "kotlin.collections.EntryRef.<get-key>()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.collections.EntryRef.<get-value>()": {
        "size": 314,
        "type": "function"
    },
    "kotlin.collections.EntryRef.setValue(V)": {
        "size": 377,
        "type": "function"
    },
    "kotlin.collections.EntryRef.equals(Any?)": {
        "size": 714,
        "type": "function"
    },
    "kotlin.collections.EntryRef.hashCode()": {
        "size": 1418,
        "type": "function"
    },
    "kotlin.collections.EntryRef.toString()": {
        "size": 334,
        "type": "function"
    },
    "kotlin.collections.HashMap": {
        "size": 34222,
        "type": "class"
    },
    "kotlin.collections.HashMap.<init>(Array<K>, Array<V>?, IntArray, IntArray, Int, Int)": {
        "size": 659,
        "type": "function"
    },
    "kotlin.collections.HashMap.keysArray": {
        "size": 32,
        "type": "field"
    },
    "kotlin.collections.HashMap.valuesArray": {
        "size": 35,
        "type": "field"
    },
    "kotlin.collections.HashMap.presenceArray": {
        "size": 36,
        "type": "field"
    },
    "kotlin.collections.HashMap.hashArray": {
        "size": 32,
        "type": "field"
    },
    "kotlin.collections.HashMap.maxProbeDistance": {
        "size": 34,
        "type": "field"
    },
    "kotlin.collections.HashMap.length": {
        "size": 24,
        "type": "field"
    },
    "kotlin.collections.HashMap.hashShift": {
        "size": 27,
        "type": "field"
    },
    "kotlin.collections.HashMap._size": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.HashMap.<get-size>()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.collections.HashMap.keysView": {
        "size": 38,
        "type": "field"
    },
    "kotlin.collections.HashMap.valuesView": {
        "size": 42,
        "type": "field"
    },
    "kotlin.collections.HashMap.entriesView": {
        "size": 48,
        "type": "field"
    },
    "kotlin.collections.HashMap.isReadOnly": {
        "size": 32,
        "type": "field"
    },
    "kotlin.collections.HashMap.<init>()": {
        "size": 107,
        "type": "function"
    },
    "kotlin.collections.HashMap.<init>(Int)": {
        "size": 1137,
        "type": "function"
    },
    "kotlin.collections.HashMap.<init>(Map<out K, V>)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.collections.HashMap.<init>(Int, Float)": {
        "size": 807,
        "type": "function"
    },
    "kotlin.collections.HashMap.build()": {
        "size": 237,
        "type": "function"
    },
    "kotlin.collections.HashMap.isEmpty()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.collections.HashMap.containsKey(K)": {
        "size": 194,
        "type": "function"
    },
    "kotlin.collections.HashMap.containsValue(V)": {
        "size": 204,
        "type": "function"
    },
    "kotlin.collections.HashMap.get(K)": {
        "size": 413,
        "type": "function"
    },
    "kotlin.collections.HashMap.put(K, V)": {
        "size": 896,
        "type": "function"
    },
    "kotlin.collections.HashMap.putAll(Map<out K, V>)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.collections.HashMap.remove(K)": {
        "size": 520,
        "type": "function"
    },
    "kotlin.collections.HashMap.clear()": {
        "size": 1654,
        "type": "function"
    },
    "kotlin.collections.HashMap.<get-keys>()": {
        "size": 621,
        "type": "function"
    },
    "kotlin.collections.HashMap.<get-values>()": {
        "size": 640,
        "type": "function"
    },
    "kotlin.collections.HashMap.<get-entries>()": {
        "size": 668,
        "type": "function"
    },
    "kotlin.collections.HashMap.equals(Any?)": {
        "size": 487,
        "type": "function"
    },
    "kotlin.collections.HashMap.hashCode()": {
        "size": 321,
        "type": "function"
    },
    "kotlin.collections.HashMap.toString()": {
        "size": 853,
        "type": "function"
    },
    "kotlin.collections.HashMap.<get-capacity>()": {
        "size": 79,
        "type": "function"
    },
    "kotlin.collections.HashMap.<get-hashSize>()": {
        "size": 79,
        "type": "function"
    },
    "kotlin.collections.HashMap.checkIsMutable()": {
        "size": 112,
        "type": "function"
    },
    "kotlin.collections.HashMap.ensureExtraCapacity(Int)": {
        "size": 457,
        "type": "function"
    },
    "kotlin.collections.HashMap.shouldCompact(Int)": {
        "size": 563,
        "type": "function"
    },
    "kotlin.collections.HashMap.ensureCapacity(Int)": {
        "size": 1108,
        "type": "function"
    },
    "kotlin.collections.HashMap.allocateValuesArray()": {
        "size": 1295,
        "type": "function"
    },
    "kotlin.collections.HashMap.hash(K)": {
        "size": 266,
        "type": "function"
    },
    "kotlin.collections.HashMap.compact()": {
        "size": 1528,
        "type": "function"
    },
    "kotlin.collections.HashMap.rehash(Int)": {
        "size": 1296,
        "type": "function"
    },
    "kotlin.collections.HashMap.putRehash(Int)": {
        "size": 950,
        "type": "function"
    },
    "kotlin.collections.HashMap.findKey(K)": {
        "size": 1105,
        "type": "function"
    },
    "kotlin.collections.HashMap.findValue(V)": {
        "size": 606,
        "type": "function"
    },
    "kotlin.collections.HashMap.addKey(K)": {
        "size": 3299,
        "type": "function"
    },
    "kotlin.collections.HashMap.removeKey(K)": {
        "size": 274,
        "type": "function"
    },
    "kotlin.collections.HashMap.removeKeyAt(Int)": {
        "size": 470,
        "type": "function"
    },
    "kotlin.collections.HashMap.removeHashAt(Int)": {
        "size": 2743,
        "type": "function"
    },
    "kotlin.collections.HashMap.containsEntry(Entry<K, V>)": {
        "size": 404,
        "type": "function"
    },
    "kotlin.collections.HashMap.contentEquals(Map<*, *>)": {
        "size": 211,
        "type": "function"
    },
    "kotlin.collections.HashMap.containsAllEntries(Collection<*>)": {
        "size": 1087,
        "type": "function"
    },
    "kotlin.collections.HashMap.putEntry(Entry<K, V>)": {
        "size": 911,
        "type": "function"
    },
    "kotlin.collections.HashMap.putAllEntries(Collection<Entry<K, V>>)": {
        "size": 497,
        "type": "function"
    },
    "kotlin.collections.HashMap.removeEntry(Entry<K, V>)": {
        "size": 541,
        "type": "function"
    },
    "kotlin.collections.HashMap.removeValue(V)": {
        "size": 245,
        "type": "function"
    },
    "kotlin.collections.HashMap.keysIterator()": {
        "size": 85,
        "type": "function"
    },
    "kotlin.collections.HashMap.valuesIterator()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.collections.HashMap.entriesIterator()": {
        "size": 94,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys": {
        "size": 2615,
        "type": "class"
    },
    "kotlin.collections.HashMapKeys.<init>(HashMap<E, *>)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.backing": {
        "size": 53,
        "type": "field"
    },
    "kotlin.collections.HashMapKeys.<get-size>()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.isEmpty()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.contains(E)": {
        "size": 197,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.clear()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.add(E)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.addAll(Collection<E>)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.remove(E)": {
        "size": 210,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.iterator()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.removeAll(Collection<E>)": {
        "size": 251,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.retainAll(Collection<E>)": {
        "size": 251,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.HashMapKeys.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.HashMapValues": {
        "size": 2657,
        "type": "class"
    },
    "kotlin.collections.HashMapValues.<init>(HashMap<*, V>)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.backing": {
        "size": 53,
        "type": "field"
    },
    "kotlin.collections.HashMapValues.<get-size>()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.isEmpty()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.contains(V)": {
        "size": 205,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.add(V)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.addAll(Collection<V>)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.clear()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.iterator()": {
        "size": 192,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.remove(V)": {
        "size": 194,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.removeAll(Collection<V>)": {
        "size": 262,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.retainAll(Collection<V>)": {
        "size": 262,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.containsAll(Collection<V>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.HashMapValues.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet": {
        "size": 1609,
        "type": "class"
    },
    "kotlin.collections.HashMapEntrySet.<init>(HashMap<K, V>)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.iterator()": {
        "size": 220,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.<get-size>()": {
        "size": 43,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.contains(MutableEntry<K, V>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.clear()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.add(MutableEntry<K, V>)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.addAll(Collection<MutableEntry<K, V>>)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.remove(MutableEntry<K, V>)": {
        "size": 70,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.containsAll(Collection<MutableEntry<K, V>>)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.removeAll(Collection<MutableEntry<K, V>>)": {
        "size": 86,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.retainAll(Collection<MutableEntry<K, V>>)": {
        "size": 86,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySet.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase": {
        "size": 4326,
        "type": "class"
    },
    "kotlin.collections.HashMapEntrySetBase.<init>(HashMap<K, V>)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.backing": {
        "size": 53,
        "type": "field"
    },
    "kotlin.collections.HashMapEntrySetBase.<get-size>()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.isEmpty()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.contains(E)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.contains(@UnsafeVariance E)": {
        "size": 565,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.clear()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.add(E)": {
        "size": 319,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.addAll(Collection<E>)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.remove(E)": {
        "size": 536,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.containsAll(Collection<E>)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.removeAll(Collection<E>)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.retainAll(Collection<E>)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.iterator()": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.HashMapEntrySetBase.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.HashSet": {
        "size": 3596,
        "type": "class"
    },
    "kotlin.collections.HashSet.<init>(HashMap<E, *>)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.collections.HashSet.backing": {
        "size": 53,
        "type": "field"
    },
    "kotlin.collections.HashSet.<init>()": {
        "size": 73,
        "type": "function"
    },
    "kotlin.collections.HashSet.<init>(Int)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.collections.HashSet.<init>(Collection<E>)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.collections.HashSet.<init>(Int, Float)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.collections.HashSet.build()": {
        "size": 221,
        "type": "function"
    },
    "kotlin.collections.HashSet.<get-size>()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.collections.HashSet.isEmpty()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.collections.HashSet.contains(E)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.collections.HashSet.clear()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.collections.HashSet.add(E)": {
        "size": 196,
        "type": "function"
    },
    "kotlin.collections.HashSet.remove(E)": {
        "size": 202,
        "type": "function"
    },
    "kotlin.collections.HashSet.iterator()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.collections.HashSet.addAll(Collection<E>)": {
        "size": 237,
        "type": "function"
    },
    "kotlin.collections.HashSet.removeAll(Collection<E>)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.collections.HashSet.retainAll(Collection<E>)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.collections.HashSet.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.HashSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.HashSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.HashSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.HashSet.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.HashSet.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.Iterator": {
        "size": 271,
        "type": "class"
    },
    "kotlin.collections.Iterator.next()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.Iterator.hasNext()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.Iterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Iterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Iterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ListIterator": {
        "size": 446,
        "type": "class"
    },
    "kotlin.collections.ListIterator.next()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.ListIterator.hasNext()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.ListIterator.hasPrevious()": {
        "size": 37,
        "type": "function"
    },
    "kotlin.collections.ListIterator.previous()": {
        "size": 28,
        "type": "function"
    },
    "kotlin.collections.ListIterator.nextIndex()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.collections.ListIterator.previousIndex()": {
        "size": 35,
        "type": "function"
    },
    "kotlin.collections.ListIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ListIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ListIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator": {
        "size": 651,
        "type": "class"
    },
    "kotlin.collections.MutableListIterator.next()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.hasNext()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.remove()": {
        "size": 32,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.set(T)": {
        "size": 30,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.add(T)": {
        "size": 30,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.hasPrevious()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.previous()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.nextIndex()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.previousIndex()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableListIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableIterator": {
        "size": 357,
        "type": "class"
    },
    "kotlin.collections.MutableIterator.remove()": {
        "size": 23,
        "type": "function"
    },
    "kotlin.collections.MutableIterator.next()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.MutableIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.MutableIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.List": {
        "size": 847,
        "type": "class"
    },
    "kotlin.collections.List.<get-size>()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.List.isEmpty()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.List.contains(@UnsafeVariance E)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.List.iterator()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.collections.List.containsAll(Collection<@UnsafeVariance E>)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.collections.List.get(Int)": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.List.indexOf(@UnsafeVariance E)": {
        "size": 55,
        "type": "function"
    },
    "kotlin.collections.List.lastIndexOf(@UnsafeVariance E)": {
        "size": 59,
        "type": "function"
    },
    "kotlin.collections.List.listIterator()": {
        "size": 46,
        "type": "function"
    },
    "kotlin.collections.List.listIterator(Int)": {
        "size": 56,
        "type": "function"
    },
    "kotlin.collections.List.subList(Int, Int)": {
        "size": 61,
        "type": "function"
    },
    "kotlin.collections.List.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.List.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.List.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableList": {
        "size": 1521,
        "type": "class"
    },
    "kotlin.collections.MutableList.add(E)": {
        "size": 48,
        "type": "function"
    },
    "kotlin.collections.MutableList.remove(E)": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.MutableList.addAll(Collection<E>)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.MutableList.addAll(Int, Collection<E>)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.MutableList.removeAll(Collection<E>)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.MutableList.retainAll(Collection<E>)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.MutableList.clear()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.collections.MutableList.set(Int, E)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.collections.MutableList.add(Int, E)": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.MutableList.removeAt(Int)": {
        "size": 38,
        "type": "function"
    },
    "kotlin.collections.MutableList.listIterator()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.MutableList.listIterator(Int)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.collections.MutableList.subList(Int, Int)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.MutableList.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.MutableList.isEmpty()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.MutableList.contains(E)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.collections.MutableList.iterator()": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.MutableList.containsAll(Collection<E>)": {
        "size": 80,
        "type": "function"
    },
    "kotlin.collections.MutableList.get(Int)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.MutableList.indexOf(E)": {
        "size": 59,
        "type": "function"
    },
    "kotlin.collections.MutableList.lastIndexOf(E)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableList.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableList.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableList.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Entry": {
        "size": 267,
        "type": "class"
    },
    "kotlin.collections.Entry.<get-key>()": {
        "size": 29,
        "type": "function"
    },
    "kotlin.collections.Entry.<get-value>()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.collections.Entry.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Entry.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Entry.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Map": {
        "size": 550,
        "type": "class"
    },
    "kotlin.collections.Map.<get-size>()": {
        "size": 32,
        "type": "function"
    },
    "kotlin.collections.Map.isEmpty()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.Map.containsKey(K)": {
        "size": 43,
        "type": "function"
    },
    "kotlin.collections.Map.containsValue(@UnsafeVariance V)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Map.get(K)": {
        "size": 39,
        "type": "function"
    },
    "kotlin.collections.Map.<get-keys>()": {
        "size": 35,
        "type": "function"
    },
    "kotlin.collections.Map.<get-values>()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Map.<get-entries>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.collections.Map.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Map.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Map.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableEntry": {
        "size": 361,
        "type": "class"
    },
    "kotlin.collections.MutableEntry.setValue(V)": {
        "size": 39,
        "type": "function"
    },
    "kotlin.collections.MutableEntry.<get-key>()": {
        "size": 49,
        "type": "function"
    },
    "kotlin.collections.MutableEntry.<get-value>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.MutableEntry.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableEntry.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableEntry.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableMap": {
        "size": 849,
        "type": "class"
    },
    "kotlin.collections.MutableMap.put(K, V)": {
        "size": 40,
        "type": "function"
    },
    "kotlin.collections.MutableMap.remove(K)": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.MutableMap.putAll(Map<out K, V>)": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.MutableMap.clear()": {
        "size": 22,
        "type": "function"
    },
    "kotlin.collections.MutableMap.<get-keys>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.MutableMap.<get-values>()": {
        "size": 60,
        "type": "function"
    },
    "kotlin.collections.MutableMap.<get-entries>()": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.MutableMap.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.MutableMap.isEmpty()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.MutableMap.containsKey(K)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableMap.containsValue(V)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.MutableMap.get(K)": {
        "size": 59,
        "type": "function"
    },
    "kotlin.collections.MutableMap.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableMap.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableMap.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.mapOf(Pair<K, V>)": {
        "size": 136,
        "type": "function"
    },
    "kotlin.collections.mapCapacity(Int)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.collections.toSingletonMap()": {
        "size": 744,
        "type": "function"
    },
    "kotlin.collections.sort()": {
        "size": 348,
        "type": "function"
    },
    "kotlin.collections.sortWith(Comparator<in T>)": {
        "size": 1683,
        "type": "function"
    },
    "kotlin.collections.RandomAccess": {
        "size": 182,
        "type": "class"
    },
    "kotlin.collections.RandomAccess.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.RandomAccess.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.RandomAccess.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Set": {
        "size": 515,
        "type": "class"
    },
    "kotlin.collections.Set.<get-size>()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Set.isEmpty()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.Set.contains(@UnsafeVariance E)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.Set.iterator()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.collections.Set.containsAll(Collection<@UnsafeVariance E>)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.collections.Set.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Set.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Set.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MutableSet": {
        "size": 892,
        "type": "class"
    },
    "kotlin.collections.MutableSet.iterator()": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableSet.add(E)": {
        "size": 48,
        "type": "function"
    },
    "kotlin.collections.MutableSet.remove(E)": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.MutableSet.addAll(Collection<E>)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.MutableSet.removeAll(Collection<E>)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.MutableSet.retainAll(Collection<E>)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.MutableSet.clear()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.collections.MutableSet.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.MutableSet.isEmpty()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.MutableSet.contains(E)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.collections.MutableSet.containsAll(Collection<E>)": {
        "size": 80,
        "type": "function"
    },
    "kotlin.collections.MutableSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MutableSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MutableSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.setOf(T)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.text.Appendable": {
        "size": 239,
        "type": "class"
    },
    "kotlin.text.Appendable.append(Char)": {
        "size": 46,
        "type": "function"
    },
    "kotlin.text.Appendable.append(CharSequence?)": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.Appendable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.Appendable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.checkRadix(Int)": {
        "size": 793,
        "type": "function"
    },
    "kotlin.text.uppercaseChar()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.text.lowercaseChar()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.text.isLetterOrDigit()": {
        "size": 610,
        "type": "function"
    },
    "kotlin.text.<get-category>()": {
        "size": 120,
        "type": "function"
    },
    "kotlin.text.isDefined()": {
        "size": 300,
        "type": "function"
    },
    "kotlin.text.isLetter()": {
        "size": 438,
        "type": "function"
    },
    "kotlin.text.isUpperCase()": {
        "size": 333,
        "type": "function"
    },
    "kotlin.text.isLowerCase()": {
        "size": 333,
        "type": "function"
    },
    "kotlin.text.isTitleCase()": {
        "size": 312,
        "type": "function"
    },
    "kotlin.text.isDigit()": {
        "size": 325,
        "type": "function"
    },
    "kotlin.text.isWhitespace()": {
        "size": 73,
        "type": "function"
    },
    "kotlin.text.titlecaseChar()": {
        "size": 102,
        "type": "function"
    },
    "kotlin.text.lowercase()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.uppercase()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.toLowerCase(Int)": {
        "size": 503,
        "type": "function"
    },
    "kotlin.text.toUpperCase(Int)": {
        "size": 503,
        "type": "function"
    },
    "kotlin.text.CharCategory_UNASSIGNED_instance": {
        "size": 71,
        "type": "field"
    },
    "kotlin.text.CharCategory_UPPERCASE_LETTER_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.CharCategory_LOWERCASE_LETTER_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.CharCategory_TITLECASE_LETTER_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.CharCategory_MODIFIER_LETTER_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.CharCategory_OTHER_LETTER_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.CharCategory_NON_SPACING_MARK_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.CharCategory_ENCLOSING_MARK_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.CharCategory_COMBINING_SPACING_MARK_instance": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.CharCategory_DECIMAL_DIGIT_NUMBER_instance": {
        "size": 81,
        "type": "field"
    },
    "kotlin.text.CharCategory_LETTER_NUMBER_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.CharCategory_OTHER_NUMBER_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.CharCategory_SPACE_SEPARATOR_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.CharCategory_LINE_SEPARATOR_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.CharCategory_PARAGRAPH_SEPARATOR_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.CharCategory_CONTROL_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.CharCategory_FORMAT_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.CharCategory_PRIVATE_USE_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.text.CharCategory_SURROGATE_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.CharCategory_DASH_PUNCTUATION_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.CharCategory_START_PUNCTUATION_instance": {
        "size": 78,
        "type": "field"
    },
    "kotlin.text.CharCategory_END_PUNCTUATION_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.CharCategory_CONNECTOR_PUNCTUATION_instance": {
        "size": 82,
        "type": "field"
    },
    "kotlin.text.CharCategory_OTHER_PUNCTUATION_instance": {
        "size": 78,
        "type": "field"
    },
    "kotlin.text.CharCategory_MATH_SYMBOL_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.text.CharCategory_CURRENCY_SYMBOL_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.CharCategory_MODIFIER_SYMBOL_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.CharCategory_OTHER_SYMBOL_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.CharCategory_INITIAL_QUOTE_PUNCTUATION_instance": {
        "size": 86,
        "type": "field"
    },
    "kotlin.text.CharCategory_FINAL_QUOTE_PUNCTUATION_instance": {
        "size": 84,
        "type": "field"
    },
    "kotlin.text.Companion": {
        "size": 2090,
        "type": "class"
    },
    "kotlin.text.Companion.<init>()": {
        "size": 379,
        "type": "function"
    },
    "kotlin.text.Companion.valueOf(Int)": {
        "size": 742,
        "type": "function"
    },
    "kotlin.text.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.values()": {
        "size": 1369,
        "type": "function"
    },
    "kotlin.text.CharCategory_entriesInitialized": {
        "size": 72,
        "type": "field"
    },
    "kotlin.text.CharCategory_initEntries()": {
        "size": 3785,
        "type": "function"
    },
    "kotlin.text.CharCategory": {
        "size": 600,
        "type": "class"
    },
    "kotlin.text.CharCategory.<init>(String, Int, Int, String)": {
        "size": 222,
        "type": "function"
    },
    "kotlin.text.CharCategory.value": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.CharCategory.code": {
        "size": 43,
        "type": "field"
    },
    "kotlin.text.CharCategory.compareTo(CharCategory)": {
        "size": 70,
        "type": "function"
    },
    "kotlin.text.CharCategory.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.CharCategory.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.CharCategory.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.CharCategory_UNASSIGNED_getInstance()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.text.CharCategory_UPPERCASE_LETTER_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.CharCategory_LOWERCASE_LETTER_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.CharCategory_TITLECASE_LETTER_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.CharCategory_MODIFIER_LETTER_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.CharCategory_OTHER_LETTER_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.CharCategory_NON_SPACING_MARK_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.CharCategory_ENCLOSING_MARK_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.CharCategory_COMBINING_SPACING_MARK_getInstance()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.text.CharCategory_DECIMAL_DIGIT_NUMBER_getInstance()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.text.CharCategory_LETTER_NUMBER_getInstance()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.text.CharCategory_OTHER_NUMBER_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.CharCategory_SPACE_SEPARATOR_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.CharCategory_LINE_SEPARATOR_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.CharCategory_PARAGRAPH_SEPARATOR_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.text.CharCategory_CONTROL_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.CharCategory_FORMAT_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.CharCategory_PRIVATE_USE_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.text.CharCategory_SURROGATE_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.CharCategory_DASH_PUNCTUATION_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.CharCategory_START_PUNCTUATION_getInstance()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.text.CharCategory_END_PUNCTUATION_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.CharCategory_CONNECTOR_PUNCTUATION_getInstance()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.text.CharCategory_OTHER_PUNCTUATION_getInstance()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.text.CharCategory_MATH_SYMBOL_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.text.CharCategory_CURRENCY_SYMBOL_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.CharCategory_MODIFIER_SYMBOL_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.CharCategory_OTHER_SYMBOL_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.CharCategory_INITIAL_QUOTE_PUNCTUATION_getInstance()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.text.CharCategory_FINAL_QUOTE_PUNCTUATION_getInstance()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.Companion.formatMessage(String, String, Int)": {
        "size": 800,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException": {
        "size": 1815,
        "type": "class"
    },
    "kotlin.text.PatternSyntaxException.<init>(String, String, Int)": {
        "size": 334,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException.<init>(String?, String?, Int?, Int, DefaultConstructorMarker?)": {
        "size": 893,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException.description": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.PatternSyntaxException.pattern": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.PatternSyntaxException.index": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.PatternSyntaxException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.PatternSyntaxException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.Mode_FIND_instance": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.Mode_MATCH_instance": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.Mode_entriesInitialized": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.Mode_initEntries()": {
        "size": 245,
        "type": "function"
    },
    "kotlin.text.Mode": {
        "size": 409,
        "type": "class"
    },
    "kotlin.text.Mode.<init>(String, Int)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.Mode.compareTo(Mode)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.Mode.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.Mode.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.Mode.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.Companion.fromLiteral(String)": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.Companion.escape(String)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.text.Companion.escapeReplacement(String)": {
        "size": 1505,
        "type": "function"
    },
    "kotlin.text.Mode_FIND_getInstance()": {
        "size": 89,
        "type": "function"
    },
    "kotlin.text.Mode_MATCH_getInstance()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.text.Regex$findAll$lambda": {
        "size": 769,
        "type": "class"
    },
    "kotlin.text.Regex$findAll$lambda.<init>(Regex, CharSequence, Int)": {
        "size": 216,
        "type": "function"
    },
    "kotlin.text.Regex$findAll$lambda.invoke()": {
        "size": 247,
        "type": "function"
    },
    "kotlin.text.Regex$findAll$lambda.this$0": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.Regex$findAll$lambda.$input": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.Regex$findAll$lambda.$startIndex": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.MatchResult$next$ref": {
        "size": 660,
        "type": "class"
    },
    "kotlin.text.MatchResult$next$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.MatchResult$next$ref.invoke(MatchResult)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.MatchResult$next$ref.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.text.MatchResult$next$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.Regex$replace$lambda": {
        "size": 842,
        "type": "class"
    },
    "kotlin.text.Regex$replace$lambda.<init>(String)": {
        "size": 133,
        "type": "function"
    },
    "kotlin.text.Regex$replace$lambda.invoke(MatchResult)": {
        "size": 248,
        "type": "function"
    },
    "kotlin.text.Regex$replace$lambda.invoke(P1)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.text.Regex$replace$lambda.$replacement": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda": {
        "size": 9053,
        "type": "class"
    },
    "kotlin.text.Regex$splitToSequence$slambda.<init>(Regex, CharSequence, Int, Continuation<Any?>?)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.invoke(SequenceScope<String>, Continuation<Unit>)": {
        "size": 424,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.invoke(P1, Continuation<R>)": {
        "size": 374,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.this$0": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.$input": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.$limit": {
        "size": 42,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.$this$sequence": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.doResume()": {
        "size": 6194,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.match0": {
        "size": 33,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.nextStart1": {
        "size": 28,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.splitCount2": {
        "size": 29,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.foundMatch3": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.Regex$splitToSequence$slambda.create(SequenceScope<String>, Continuation<*>)": {
        "size": 489,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.Regex$splitToSequence$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.Regex": {
        "size": 14099,
        "type": "class"
    },
    "kotlin.text.Regex.<init>(Pattern)": {
        "size": 265,
        "type": "function"
    },
    "kotlin.text.Regex.nativePattern": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.Regex.<init>(String)": {
        "size": 160,
        "type": "function"
    },
    "kotlin.text.Regex.<init>(String, RegexOption)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.Regex.<init>(String, Set<RegexOption>)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.text.Regex.<get-pattern>()": {
        "size": 73,
        "type": "function"
    },
    "kotlin.text.Regex.startNode": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.Regex.options": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.Regex.doMatch(CharSequence, Mode)": {
        "size": 514,
        "type": "function"
    },
    "kotlin.text.Regex.matches(CharSequence)": {
        "size": 174,
        "type": "function"
    },
    "kotlin.text.Regex.containsMatchIn(CharSequence)": {
        "size": 220,
        "type": "function"
    },
    "kotlin.text.Regex.matchesAt(CharSequence, Int)": {
        "size": 257,
        "type": "function"
    },
    "kotlin.text.Regex.find(CharSequence, Int)": {
        "size": 1170,
        "type": "function"
    },
    "kotlin.text.Regex.find$default(CharSequence, Int?, Int, Any?)": {
        "size": 495,
        "type": "function"
    },
    "kotlin.text.Regex.findAll(CharSequence, Int)": {
        "size": 917,
        "type": "function"
    },
    "kotlin.text.Regex.findAll$default(CharSequence, Int?, Int, Any?)": {
        "size": 510,
        "type": "function"
    },
    "kotlin.text.Regex.matchEntire(CharSequence)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.Regex.matchAt(CharSequence, Int)": {
        "size": 1159,
        "type": "function"
    },
    "kotlin.text.Regex.replace(CharSequence, String)": {
        "size": 216,
        "type": "function"
    },
    "kotlin.text.Regex.replace(CharSequence, Function1<MatchResult, CharSequence>)": {
        "size": 1475,
        "type": "function"
    },
    "kotlin.text.Regex.replaceFirst(CharSequence, String)": {
        "size": 1051,
        "type": "function"
    },
    "kotlin.text.Regex.split(CharSequence, Int)": {
        "size": 2367,
        "type": "function"
    },
    "kotlin.text.Regex.split$default(CharSequence, Int?, Int, Any?)": {
        "size": 477,
        "type": "function"
    },
    "kotlin.text.Regex.splitToSequence(CharSequence, Int)": {
        "size": 461,
        "type": "function"
    },
    "kotlin.text.Regex.splitToSequence$default(CharSequence, Int?, Int, Any?)": {
        "size": 594,
        "type": "function"
    },
    "kotlin.text.Regex.toString()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.Regex.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.Regex.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.MatchGroup": {
        "size": 2017,
        "type": "class"
    },
    "kotlin.text.MatchGroup.<init>(String, IntRange)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.MatchGroup.value": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.MatchGroup.range": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.MatchGroup.toString()": {
        "size": 447,
        "type": "function"
    },
    "kotlin.text.MatchGroup.hashCode()": {
        "size": 293,
        "type": "function"
    },
    "kotlin.text.MatchGroup.equals(Any?)": {
        "size": 893,
        "type": "function"
    },
    "kotlin.text.RegexOption_IGNORE_CASE_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.RegexOption_MULTILINE_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.RegexOption_LITERAL_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.RegexOption_UNIX_LINES_instance": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.RegexOption_COMMENTS_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.RegexOption_DOT_MATCHES_ALL_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.RegexOption_CANON_EQ_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.RegexOption_entriesInitialized": {
        "size": 71,
        "type": "field"
    },
    "kotlin.text.RegexOption_initEntries()": {
        "size": 1491,
        "type": "function"
    },
    "kotlin.text.RegexOption": {
        "size": 1074,
        "type": "class"
    },
    "kotlin.text.RegexOption.<init>(String, Int, Int, Int)": {
        "size": 218,
        "type": "function"
    },
    "kotlin.text.RegexOption.<init>(String, Int, Int, Int?, Int, DefaultConstructorMarker?)": {
        "size": 466,
        "type": "function"
    },
    "kotlin.text.RegexOption.value": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.RegexOption.mask": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.RegexOption.compareTo(RegexOption)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.RegexOption.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.RegexOption.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.RegexOption.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.get(String)": {
        "size": 640,
        "type": "function"
    },
    "kotlin.text.toInt()": {
        "size": 768,
        "type": "function"
    },
    "kotlin.text.fromInt(Int)": {
        "size": 1314,
        "type": "function"
    },
    "kotlin.text.substituteGroupRefs(MatchResult, String)": {
        "size": 5610,
        "type": "function"
    },
    "kotlin.text.readGroupName(Int)": {
        "size": 885,
        "type": "function"
    },
    "kotlin.text.readGroupIndex(Int, Int)": {
        "size": 1545,
        "type": "function"
    },
    "kotlin.text.RegexOption_IGNORE_CASE_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.RegexOption_MULTILINE_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.RegexOption_LITERAL_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.RegexOption_UNIX_LINES_getInstance()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.RegexOption_COMMENTS_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.RegexOption_DOT_MATCHES_ALL_getInstance()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.text.RegexOption_CANON_EQ_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.StringBuilder": {
        "size": 31067,
        "type": "class"
    },
    "kotlin.text.StringBuilder.<init>(CharArray)": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.StringBuilder.array": {
        "size": 29,
        "type": "field"
    },
    "kotlin.text.StringBuilder.<init>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.StringBuilder.<init>(Int)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.text.StringBuilder.<init>(String)": {
        "size": 136,
        "type": "function"
    },
    "kotlin.text.StringBuilder.<init>(CharSequence)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.text.StringBuilder._length": {
        "size": 25,
        "type": "field"
    },
    "kotlin.text.StringBuilder.<get-length>()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.StringBuilder.get(Int)": {
        "size": 261,
        "type": "function"
    },
    "kotlin.text.StringBuilder.subSequence(Int, Int)": {
        "size": 234,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Char)": {
        "size": 540,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(CharSequence?)": {
        "size": 432,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(CharSequence?, Int, Int)": {
        "size": 423,
        "type": "function"
    },
    "kotlin.text.StringBuilder.reverse()": {
        "size": 4645,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Any?)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Boolean)": {
        "size": 117,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Byte)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Short)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Int)": {
        "size": 305,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Long)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Float)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(Double)": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(CharArray)": {
        "size": 531,
        "type": "function"
    },
    "kotlin.text.StringBuilder.append(String?)": {
        "size": 508,
        "type": "function"
    },
    "kotlin.text.StringBuilder.capacity()": {
        "size": 61,
        "type": "function"
    },
    "kotlin.text.StringBuilder.ensureCapacity(Int)": {
        "size": 218,
        "type": "function"
    },
    "kotlin.text.StringBuilder.indexOf(String)": {
        "size": 208,
        "type": "function"
    },
    "kotlin.text.StringBuilder.indexOf(String, Int)": {
        "size": 509,
        "type": "function"
    },
    "kotlin.text.StringBuilder.lastIndexOf(String)": {
        "size": 413,
        "type": "function"
    },
    "kotlin.text.StringBuilder.lastIndexOf(String, Int)": {
        "size": 517,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insert(Int, Boolean)": {
        "size": 144,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insert(Int, Char)": {
        "size": 1383,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insert(Int, CharArray)": {
        "size": 1047,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insert(Int, CharSequence?)": {
        "size": 369,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insert(Int, Any?)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insert(Int, String?)": {
        "size": 1022,
        "type": "function"
    },
    "kotlin.text.StringBuilder.setLength(Int)": {
        "size": 767,
        "type": "function"
    },
    "kotlin.text.StringBuilder.substring(Int, Int)": {
        "size": 310,
        "type": "function"
    },
    "kotlin.text.StringBuilder.substring(Int)": {
        "size": 216,
        "type": "function"
    },
    "kotlin.text.StringBuilder.trimToSize()": {
        "size": 244,
        "type": "function"
    },
    "kotlin.text.StringBuilder.toString()": {
        "size": 221,
        "type": "function"
    },
    "kotlin.text.StringBuilder.set(Int, Char)": {
        "size": 176,
        "type": "function"
    },
    "kotlin.text.StringBuilder.setRange(Int, Int, String)": {
        "size": 2034,
        "type": "function"
    },
    "kotlin.text.StringBuilder.deleteAt(Int)": {
        "size": 834,
        "type": "function"
    },
    "kotlin.text.StringBuilder.deleteRange(Int, Int)": {
        "size": 893,
        "type": "function"
    },
    "kotlin.text.StringBuilder.toCharArray(CharArray, Int, Int, Int)": {
        "size": 689,
        "type": "function"
    },
    "kotlin.text.StringBuilder.appendRange(CharArray, Int, Int)": {
        "size": 735,
        "type": "function"
    },
    "kotlin.text.StringBuilder.appendRange(CharSequence, Int, Int)": {
        "size": 1994,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insertRange(Int, CharSequence, Int, Int)": {
        "size": 1724,
        "type": "function"
    },
    "kotlin.text.StringBuilder.insertRange(Int, CharArray, Int, Int)": {
        "size": 1318,
        "type": "function"
    },
    "kotlin.text.StringBuilder.ensureExtraCapacity(Int)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.StringBuilder.ensureCapacityInternal(Int)": {
        "size": 506,
        "type": "function"
    },
    "kotlin.text.StringBuilder.checkReplaceRange(Int, Int, Int)": {
        "size": 949,
        "type": "function"
    },
    "kotlin.text.StringBuilder.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.StringBuilder.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.insertString(CharArray, Int, String)": {
        "size": 199,
        "type": "function"
    },
    "kotlin.text.clear()": {
        "size": 440,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>": {
        "size": 2596,
        "type": "class"
    },
    "kotlin.text.regex.<no name provided>.<init>(CachedRange)": {
        "size": 134,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.contains(Int)": {
        "size": 817,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.contains(Char)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<get-bits>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.hasLowHighSurrogates()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<get-instance>()": {
        "size": 61,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.classWithSurrogates()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.classWithoutSurrogates()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.setNegative(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.isNegative()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.toString()": {
        "size": 830,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.this$0": {
        "size": 57,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LOWER_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_UPPER_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ASCII_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ALPHA_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_DIGIT_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ALNUM_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PUNCT_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GRAPH_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PRINT_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BLANK_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CNTRL_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_XDIGIT_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SPACE_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_WORD_instance": {
        "size": 63,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NON_WORD_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SPACE_SHORT_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NON_SPACE_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_DIGIT_SHORT_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NON_DIGIT_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_VERTICAL_WHITESPACE_instance": {
        "size": 78,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NON_VERTICAL_WHITESPACE_instance": {
        "size": 82,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HORIZONTAL_WHITESPACE_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NON_HORIZONTAL_WHITESPACE_instance": {
        "size": 84,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BASIC_LATIN_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LATIN1_SUPPLEMENT_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LATIN_EXTENDED_A_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LATIN_EXTENDED_B_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_IPA_EXTENSIONS_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SPACING_MODIFIER_LETTERS_instance": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_COMBINING_DIACRITICAL_MARKS_instance": {
        "size": 86,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GREEK_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CYRILLIC_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CYRILLIC_SUPPLEMENT_instance": {
        "size": 78,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ARMENIAN_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HEBREW_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ARABIC_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SYRIAC_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ARABICSUPPLEMENT_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_THAANA_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_DEVANAGARI_instance": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BENGALI_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GURMUKHI_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GUJARATI_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ORIYA_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_TAMIL_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_TELUGU_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_KANNADA_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MALAYALAM_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SINHALA_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_THAI_instance": {
        "size": 63,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LAO_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_TIBETAN_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MYANMAR_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GEORGIAN_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HANGULJAMO_instance": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ETHIOPIC_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ETHIOPICSUPPLEMENT_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CHEROKEE_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_UNIFIEDCANADIANABORIGINALSYLLABICS_instance": {
        "size": 93,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_OGHAM_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_RUNIC_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_TAGALOG_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HANUNOO_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BUHID_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_TAGBANWA_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_KHMER_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MONGOLIAN_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LIMBU_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_TAILE_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NEWTAILUE_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_KHMERSYMBOLS_instance": {
        "size": 71,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BUGINESE_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PHONETICEXTENSIONS_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PHONETICEXTENSIONSSUPPLEMENT_instance": {
        "size": 87,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_COMBININGDIACRITICALMARKSSUPPLEMENT_instance": {
        "size": 94,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LATINEXTENDEDADDITIONAL_instance": {
        "size": 82,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GREEKEXTENDED_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GENERALPUNCTUATION_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SUPERSCRIPTSANDSUBSCRIPTS_instance": {
        "size": 84,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CURRENCYSYMBOLS_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_COMBININGMARKSFORSYMBOLS_instance": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LETTERLIKESYMBOLS_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NUMBERFORMS_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ARROWS_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MATHEMATICALOPERATORS_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSTECHNICAL_instance": {
        "size": 81,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CONTROLPICTURES_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_OPTICALCHARACTERRECOGNITION_instance": {
        "size": 86,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ENCLOSEDALPHANUMERICS_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BOXDRAWING_instance": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BLOCKELEMENTS_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GEOMETRICSHAPES_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSSYMBOLS_instance": {
        "size": 79,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_DINGBATS_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSMATHEMATICALSYMBOLS_A_instance": {
        "size": 93,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALARROWS_A_instance": {
        "size": 79,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BRAILLEPATTERNS_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALARROWS_B_instance": {
        "size": 79,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSMATHEMATICALSYMBOLS_B_instance": {
        "size": 93,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALMATHEMATICALOPERATORS_instance": {
        "size": 92,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSSYMBOLSANDARROWS_instance": {
        "size": 88,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GLAGOLITIC_instance": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_COPTIC_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_GEORGIANSUPPLEMENT_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_TIFINAGH_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ETHIOPICEXTENDED_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALPUNCTUATION_instance": {
        "size": 82,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKRADICALSSUPPLEMENT_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_KANGXIRADICALS_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_IDEOGRAPHICDESCRIPTIONCHARACTERS_instance": {
        "size": 91,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKSYMBOLSANDPUNCTUATION_instance": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HIRAGANA_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_KATAKANA_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BOPOMOFO_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HANGULCOMPATIBILITYJAMO_instance": {
        "size": 82,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_KANBUN_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_BOPOMOFOEXTENDED_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKSTROKES_instance": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_KATAKANAPHONETICEXTENSIONS_instance": {
        "size": 85,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ENCLOSEDCJKLETTERSANDMONTHS_instance": {
        "size": 86,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKCOMPATIBILITY_instance": {
        "size": 75,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKUNIFIEDIDEOGRAPHSEXTENSIONA_instance": {
        "size": 89,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_YIJINGHEXAGRAMSYMBOLS_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKUNIFIEDIDEOGRAPHS_instance": {
        "size": 79,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_YISYLLABLES_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_YIRADICALS_instance": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MODIFIERTONELETTERS_instance": {
        "size": 78,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SYLOTINAGRI_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HANGULSYLLABLES_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HIGHSURROGATES_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HIGHPRIVATEUSESURROGATES_instance": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LOWSURROGATES_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PRIVATEUSEAREA_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKCOMPATIBILITYIDEOGRAPHS_instance": {
        "size": 85,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ALPHABETICPRESENTATIONFORMS_instance": {
        "size": 86,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ARABICPRESENTATIONFORMS_A_instance": {
        "size": 84,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_VARIATIONSELECTORS_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_VERTICALFORMS_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_COMBININGHALFMARKS_instance": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CJKCOMPATIBILITYFORMS_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SMALLFORMVARIANTS_instance": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ARABICPRESENTATIONFORMS_B_instance": {
        "size": 84,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_HALFWIDTHANDFULLWIDTHFORMS_instance": {
        "size": 85,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ALL_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SPECIALS_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CN_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ISL_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LU_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LL_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LT_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LM_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_LO_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ISM_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MN_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ME_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_MC_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_N_instance": {
        "size": 60,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ND_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NL_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_NO_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ISZ_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ZS_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ZL_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ZP_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ISC_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CC_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CF_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CO_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_CS_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ISP_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PD_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PS_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PE_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PC_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PO_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_ISS_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SM_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SC_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SK_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_SO_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PI_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_PF_instance": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.values()": {
        "size": 7242,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_entriesInitialized": {
        "size": 71,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses_initEntries()": {
        "size": 44319,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedLower$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedLower$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedLower$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedLower$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedUpper$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedUpper$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedUpper$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedUpper$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedASCII$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedASCII$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedASCII$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedASCII$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlpha$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlpha$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlpha$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlpha$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedDigit$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedDigit$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedDigit$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedDigit$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlnum$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlnum$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlnum$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedAlnum$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPunct$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPunct$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPunct$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPunct$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedGraph$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedGraph$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedGraph$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedGraph$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPrint$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPrint$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPrint$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedPrint$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedBlank$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedBlank$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedBlank$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedBlank$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedCntrl$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedCntrl$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedCntrl$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedCntrl$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedXDigit$<init>$ref": {
        "size": 409,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedXDigit$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedXDigit$<init>$ref.invoke()": {
        "size": 74,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedXDigit$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpace$<init>$ref": {
        "size": 404,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpace$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpace$<init>$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpace$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedWord$<init>$ref": {
        "size": 399,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedWord$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedWord$<init>$ref.invoke()": {
        "size": 70,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedWord$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonWord$<init>$ref": {
        "size": 414,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonWord$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonWord$<init>$ref.invoke()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonWord$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonSpace$<init>$ref": {
        "size": 419,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonSpace$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonSpace$<init>$ref.invoke()": {
        "size": 78,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonSpace$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonDigit$<init>$ref": {
        "size": 419,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonDigit$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonDigit$<init>$ref.invoke()": {
        "size": 78,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonDigit$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedVerticalWhitespace$<init>$ref": {
        "size": 469,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedVerticalWhitespace$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedVerticalWhitespace$<init>$ref.invoke()": {
        "size": 98,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedVerticalWhitespace$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonVerticalWhitespace$<init>$ref": {
        "size": 484,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonVerticalWhitespace$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonVerticalWhitespace$<init>$ref.invoke()": {
        "size": 104,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonVerticalWhitespace$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedHorizontalWhitespace$<init>$ref": {
        "size": 479,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedHorizontalWhitespace$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedHorizontalWhitespace$<init>$ref.invoke()": {
        "size": 102,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedHorizontalWhitespace$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonHorizontalWhitespace$<init>$ref": {
        "size": 494,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonHorizontalWhitespace$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonHorizontalWhitespace$<init>$ref.invoke()": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedNonHorizontalWhitespace$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$Companion$CharClasses$CharClasses_initEntries$lambda": {
        "size": 1316,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$Companion$CharClasses$CharClasses_initEntries$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$Companion$CharClasses$CharClasses_initEntries$lambda.invoke()": {
        "size": 1034,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpecialsBlock$<init>$ref": {
        "size": 444,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpecialsBlock$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpecialsBlock$<init>$ref.invoke()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass$CachedSpecialsBlock$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses": {
        "size": 670,
        "type": "class"
    },
    "kotlin.text.regex.CharClasses.<init>(String, Int, String, Function0<CachedCharClass>)": {
        "size": 265,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses.regexName": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses.factory": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.regex.CharClasses.compareTo(CharClasses)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LOWER_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_UPPER_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ASCII_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ALPHA_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_DIGIT_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ALNUM_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PUNCT_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GRAPH_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PRINT_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BLANK_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CNTRL_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_XDIGIT_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SPACE_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_WORD_getInstance()": {
        "size": 117,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NON_WORD_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SPACE_SHORT_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NON_SPACE_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_DIGIT_SHORT_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NON_DIGIT_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_VERTICAL_WHITESPACE_getInstance()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NON_VERTICAL_WHITESPACE_getInstance()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HORIZONTAL_WHITESPACE_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NON_HORIZONTAL_WHITESPACE_getInstance()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BASIC_LATIN_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LATIN1_SUPPLEMENT_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LATIN_EXTENDED_A_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LATIN_EXTENDED_B_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_IPA_EXTENSIONS_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SPACING_MODIFIER_LETTERS_getInstance()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_COMBINING_DIACRITICAL_MARKS_getInstance()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GREEK_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CYRILLIC_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CYRILLIC_SUPPLEMENT_getInstance()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ARMENIAN_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HEBREW_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ARABIC_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SYRIAC_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ARABICSUPPLEMENT_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_THAANA_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_DEVANAGARI_getInstance()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BENGALI_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GURMUKHI_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GUJARATI_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ORIYA_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_TAMIL_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_TELUGU_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_KANNADA_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MALAYALAM_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SINHALA_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_THAI_getInstance()": {
        "size": 117,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LAO_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_TIBETAN_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MYANMAR_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GEORGIAN_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HANGULJAMO_getInstance()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ETHIOPIC_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ETHIOPICSUPPLEMENT_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CHEROKEE_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_UNIFIEDCANADIANABORIGINALSYLLABICS_getInstance()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_OGHAM_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_RUNIC_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_TAGALOG_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HANUNOO_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BUHID_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_TAGBANWA_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_KHMER_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MONGOLIAN_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LIMBU_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_TAILE_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NEWTAILUE_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_KHMERSYMBOLS_getInstance()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BUGINESE_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PHONETICEXTENSIONS_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PHONETICEXTENSIONSSUPPLEMENT_getInstance()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_COMBININGDIACRITICALMARKSSUPPLEMENT_getInstance()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LATINEXTENDEDADDITIONAL_getInstance()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GREEKEXTENDED_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GENERALPUNCTUATION_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SUPERSCRIPTSANDSUBSCRIPTS_getInstance()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CURRENCYSYMBOLS_getInstance()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_COMBININGMARKSFORSYMBOLS_getInstance()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LETTERLIKESYMBOLS_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NUMBERFORMS_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ARROWS_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MATHEMATICALOPERATORS_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSTECHNICAL_getInstance()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CONTROLPICTURES_getInstance()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_OPTICALCHARACTERRECOGNITION_getInstance()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ENCLOSEDALPHANUMERICS_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BOXDRAWING_getInstance()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BLOCKELEMENTS_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GEOMETRICSHAPES_getInstance()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSSYMBOLS_getInstance()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_DINGBATS_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSMATHEMATICALSYMBOLS_A_getInstance()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALARROWS_A_getInstance()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BRAILLEPATTERNS_getInstance()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALARROWS_B_getInstance()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSMATHEMATICALSYMBOLS_B_getInstance()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALMATHEMATICALOPERATORS_getInstance()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MISCELLANEOUSSYMBOLSANDARROWS_getInstance()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GLAGOLITIC_getInstance()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_COPTIC_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_GEORGIANSUPPLEMENT_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_TIFINAGH_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ETHIOPICEXTENDED_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SUPPLEMENTALPUNCTUATION_getInstance()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKRADICALSSUPPLEMENT_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_KANGXIRADICALS_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_IDEOGRAPHICDESCRIPTIONCHARACTERS_getInstance()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKSYMBOLSANDPUNCTUATION_getInstance()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HIRAGANA_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_KATAKANA_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BOPOMOFO_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HANGULCOMPATIBILITYJAMO_getInstance()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_KANBUN_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_BOPOMOFOEXTENDED_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKSTROKES_getInstance()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_KATAKANAPHONETICEXTENSIONS_getInstance()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ENCLOSEDCJKLETTERSANDMONTHS_getInstance()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKCOMPATIBILITY_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKUNIFIEDIDEOGRAPHSEXTENSIONA_getInstance()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_YIJINGHEXAGRAMSYMBOLS_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKUNIFIEDIDEOGRAPHS_getInstance()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_YISYLLABLES_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_YIRADICALS_getInstance()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MODIFIERTONELETTERS_getInstance()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SYLOTINAGRI_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HANGULSYLLABLES_getInstance()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HIGHSURROGATES_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HIGHPRIVATEUSESURROGATES_getInstance()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LOWSURROGATES_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PRIVATEUSEAREA_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKCOMPATIBILITYIDEOGRAPHS_getInstance()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ALPHABETICPRESENTATIONFORMS_getInstance()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ARABICPRESENTATIONFORMS_A_getInstance()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_VARIATIONSELECTORS_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_VERTICALFORMS_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_COMBININGHALFMARKS_getInstance()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CJKCOMPATIBILITYFORMS_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SMALLFORMVARIANTS_getInstance()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ARABICPRESENTATIONFORMS_B_getInstance()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_HALFWIDTHANDFULLWIDTHFORMS_getInstance()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ALL_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SPECIALS_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CN_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ISL_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LU_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LL_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LT_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LM_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_LO_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ISM_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MN_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ME_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_MC_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_N_getInstance()": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ND_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NL_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_NO_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ISZ_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ZS_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ZL_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ZP_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ISC_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CC_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CF_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CO_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_CS_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ISP_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PD_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PS_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PE_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PC_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PO_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_ISS_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SM_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SC_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SK_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_SO_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PI_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CharClasses_PF_getInstance()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass": {
        "size": 1311,
        "type": "class"
    },
    "kotlin.text.regex.CachedCharClass.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.<get-posValue>()": {
        "size": 259,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.posValue": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.CachedCharClass.<get-negValue>()": {
        "size": 259,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.negValue": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.CachedCharClass.initValues()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.getValue(Boolean)": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.computeValue()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedCharClass.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedDigit": {
        "size": 764,
        "type": "class"
    },
    "kotlin.text.regex.CachedDigit.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedDigit.computeValue()": {
        "size": 221,
        "type": "function"
    },
    "kotlin.text.regex.CachedDigit.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedDigit.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedDigit.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedDigit.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedDigit.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonDigit": {
        "size": 1261,
        "type": "class"
    },
    "kotlin.text.regex.CachedNonDigit.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonDigit.computeValue()": {
        "size": 679,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonDigit.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonDigit.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonDigit.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonDigit.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonDigit.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpace": {
        "size": 774,
        "type": "class"
    },
    "kotlin.text.regex.CachedSpace.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpace.computeValue()": {
        "size": 231,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpace.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpace.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpace.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpace.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpace.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonSpace": {
        "size": 1093,
        "type": "class"
    },
    "kotlin.text.regex.CachedNonSpace.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonSpace.computeValue()": {
        "size": 519,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonSpace.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonSpace.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonSpace.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonSpace.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonSpace.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedWord": {
        "size": 833,
        "type": "class"
    },
    "kotlin.text.regex.CachedWord.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedWord.computeValue()": {
        "size": 291,
        "type": "function"
    },
    "kotlin.text.regex.CachedWord.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedWord.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedWord.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedWord.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedWord.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonWord": {
        "size": 1091,
        "type": "class"
    },
    "kotlin.text.regex.CachedNonWord.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonWord.computeValue()": {
        "size": 518,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonWord.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonWord.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonWord.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonWord.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonWord.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedLower": {
        "size": 764,
        "type": "class"
    },
    "kotlin.text.regex.CachedLower.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedLower.computeValue()": {
        "size": 221,
        "type": "function"
    },
    "kotlin.text.regex.CachedLower.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedLower.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedLower.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedLower.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedLower.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedUpper": {
        "size": 764,
        "type": "class"
    },
    "kotlin.text.regex.CachedUpper.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedUpper.computeValue()": {
        "size": 221,
        "type": "function"
    },
    "kotlin.text.regex.CachedUpper.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedUpper.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedUpper.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedUpper.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedUpper.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedASCII": {
        "size": 762,
        "type": "class"
    },
    "kotlin.text.regex.CachedASCII.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedASCII.computeValue()": {
        "size": 219,
        "type": "function"
    },
    "kotlin.text.regex.CachedASCII.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedASCII.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedASCII.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedASCII.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedASCII.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlpha": {
        "size": 792,
        "type": "class"
    },
    "kotlin.text.regex.CachedAlpha.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlpha.computeValue()": {
        "size": 249,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlpha.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlpha.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlpha.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlpha.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlpha.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlnum": {
        "size": 857,
        "type": "class"
    },
    "kotlin.text.regex.CachedAlnum.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlnum.computeValue()": {
        "size": 310,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlnum.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlnum.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlnum.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlnum.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedAlnum.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedPunct": {
        "size": 816,
        "type": "class"
    },
    "kotlin.text.regex.CachedPunct.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedPunct.computeValue()": {
        "size": 273,
        "type": "function"
    },
    "kotlin.text.regex.CachedPunct.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedPunct.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedPunct.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedPunct.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedPunct.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedGraph": {
        "size": 909,
        "type": "class"
    },
    "kotlin.text.regex.CachedGraph.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedGraph.computeValue()": {
        "size": 362,
        "type": "function"
    },
    "kotlin.text.regex.CachedGraph.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedGraph.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedGraph.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedGraph.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedGraph.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedPrint": {
        "size": 841,
        "type": "class"
    },
    "kotlin.text.regex.CachedPrint.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedPrint.computeValue()": {
        "size": 294,
        "type": "function"
    },
    "kotlin.text.regex.CachedPrint.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedPrint.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedPrint.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedPrint.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedPrint.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedBlank": {
        "size": 765,
        "type": "class"
    },
    "kotlin.text.regex.CachedBlank.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedBlank.computeValue()": {
        "size": 222,
        "type": "function"
    },
    "kotlin.text.regex.CachedBlank.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedBlank.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedBlank.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedBlank.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedBlank.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedCntrl": {
        "size": 775,
        "type": "class"
    },
    "kotlin.text.regex.CachedCntrl.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedCntrl.computeValue()": {
        "size": 232,
        "type": "function"
    },
    "kotlin.text.regex.CachedCntrl.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedCntrl.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedCntrl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedCntrl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedCntrl.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedXDigit": {
        "size": 821,
        "type": "class"
    },
    "kotlin.text.regex.CachedXDigit.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedXDigit.computeValue()": {
        "size": 277,
        "type": "function"
    },
    "kotlin.text.regex.CachedXDigit.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedXDigit.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedXDigit.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedXDigit.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedXDigit.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedVerticalWhitespace": {
        "size": 1059,
        "type": "class"
    },
    "kotlin.text.regex.CachedVerticalWhitespace.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedVerticalWhitespace.computeValue()": {
        "size": 503,
        "type": "function"
    },
    "kotlin.text.regex.CachedVerticalWhitespace.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedVerticalWhitespace.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedVerticalWhitespace.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedVerticalWhitespace.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedVerticalWhitespace.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace": {
        "size": 1119,
        "type": "class"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace.computeValue()": {
        "size": 532,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonVerticalWhitespace.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace": {
        "size": 1107,
        "type": "class"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace.computeValue()": {
        "size": 549,
        "type": "function"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedHorizontalWhitespace.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace": {
        "size": 1123,
        "type": "class"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace.computeValue()": {
        "size": 534,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedNonHorizontalWhitespace.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedRange": {
        "size": 3841,
        "type": "class"
    },
    "kotlin.text.regex.CachedRange.<init>(Int, Int)": {
        "size": 247,
        "type": "function"
    },
    "kotlin.text.regex.CachedRange.start": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.CachedRange.end": {
        "size": 21,
        "type": "field"
    },
    "kotlin.text.regex.CachedRange.computeValue()": {
        "size": 3018,
        "type": "function"
    },
    "kotlin.text.regex.CachedRange.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedRange.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedRange.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedRange.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedRange.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpecialsBlock": {
        "size": 798,
        "type": "class"
    },
    "kotlin.text.regex.CachedSpecialsBlock.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpecialsBlock.computeValue()": {
        "size": 247,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpecialsBlock.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpecialsBlock.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpecialsBlock.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpecialsBlock.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedSpecialsBlock.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope": {
        "size": 2302,
        "type": "class"
    },
    "kotlin.text.regex.CachedCategoryScope.<init>(Int, Boolean, Boolean)": {
        "size": 416,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope.<init>(Int, Boolean, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 602,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope.category": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.regex.CachedCategoryScope.mayContainSupplCodepoints": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CachedCategoryScope.containsAllSurrogates": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CachedCategoryScope.computeValue()": {
        "size": 688,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategoryScope.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory": {
        "size": 2272,
        "type": "class"
    },
    "kotlin.text.regex.CachedCategory.<init>(Int, Boolean, Boolean)": {
        "size": 416,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory.<init>(Int, Boolean, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 597,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory.category": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.regex.CachedCategory.mayContainSupplCodepoints": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.CachedCategory.containsAllSurrogates": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CachedCategory.computeValue()": {
        "size": 668,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory.initValues()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory.getValue(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CachedCategory.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.Companion": {
        "size": 16631,
        "type": "class"
    },
    "kotlin.text.regex.Companion.<init>()": {
        "size": 3555,
        "type": "function"
    },
    "kotlin.text.regex.Companion.SURROGATE_CARDINALITY": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.Companion.classCache": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.regex.Companion.classCacheMap": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.Companion.intersects(AbstractCharClass, Int)": {
        "size": 91,
        "type": "function"
    },
    "kotlin.text.regex.Companion.intersects(AbstractCharClass, AbstractCharClass)": {
        "size": 556,
        "type": "function"
    },
    "kotlin.text.regex.Companion.getPredefinedClass(String, Boolean)": {
        "size": 2369,
        "type": "function"
    },
    "kotlin.text.regex.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.Companion_getInstance()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<init>(BitSet)": {
        "size": 144,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.$surrogates": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.<no name provided>.<init>(AbstractCharClass)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass": {
        "size": 4256,
        "type": "class"
    },
    "kotlin.text.regex.AbstractCharClass.<init>()": {
        "size": 409,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.alt": {
        "size": 25,
        "type": "field"
    },
    "kotlin.text.regex.AbstractCharClass.altSurrogates": {
        "size": 35,
        "type": "field"
    },
    "kotlin.text.regex.AbstractCharClass.lowHighSurrogates": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.AbstractCharClass.mayContainSupplCodepoints": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.AbstractCharClass.contains(Int)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.contains(Char)": {
        "size": 196,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.<get-bits>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.hasLowHighSurrogates()": {
        "size": 314,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.type": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.AbstractCharClass.<get-instance>()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.surrogates_": {
        "size": 79,
        "type": "field"
    },
    "kotlin.text.regex.AbstractCharClass.classWithSurrogates()": {
        "size": 1327,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.classWithoutSurrogates()": {
        "size": 335,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.setNegative(Boolean)": {
        "size": 555,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.isNegative()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.AbstractCharClass.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope": {
        "size": 1245,
        "type": "class"
    },
    "kotlin.text.regex.UnicodeCategoryScope.<init>(Int)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.contains(Int)": {
        "size": 406,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.contains(Char)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.<get-bits>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.hasLowHighSurrogates()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.<get-instance>()": {
        "size": 61,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.classWithSurrogates()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.classWithoutSurrogates()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.setNegative(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.isNegative()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategoryScope.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory": {
        "size": 1202,
        "type": "class"
    },
    "kotlin.text.regex.UnicodeCategory.<init>(Int)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.category": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.regex.UnicodeCategory.contains(Int)": {
        "size": 298,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.contains(Char)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.<get-bits>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.hasLowHighSurrogates()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.<get-instance>()": {
        "size": 61,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.classWithSurrogates()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.classWithoutSurrogates()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.setNegative(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.isNegative()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.UnicodeCategory.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.Companion.getInstance(Int)": {
        "size": 317,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator": {
        "size": 732,
        "type": "class"
    },
    "kotlin.text.regex.AbstractLineTerminator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator.isLineTerminator(Char)": {
        "size": 233,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator.isLineTerminator(Int)": {
        "size": 56,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator.isLineTerminatorPair(Char, Char)": {
        "size": 70,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator.isAfterLineTerminator(Char, Char)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.AbstractLineTerminator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.unixLT": {
        "size": 769,
        "type": "class"
    },
    "kotlin.text.regex.unixLT.<init>()": {
        "size": 122,
        "type": "function"
    },
    "kotlin.text.regex.unixLT.isLineTerminator(Int)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.text.regex.unixLT.isLineTerminatorPair(Char, Char)": {
        "size": 89,
        "type": "function"
    },
    "kotlin.text.regex.unixLT.isAfterLineTerminator(Char, Char)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.unixLT.isLineTerminator(Char)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.unixLT.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.unixLT.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.unixLT.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.unixLT_instance": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.unixLT_getInstance()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT": {
        "size": 1700,
        "type": "class"
    },
    "kotlin.text.regex.unicodeLT.<init>()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT.isLineTerminatorPair(Char, Char)": {
        "size": 185,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT.isLineTerminator(Int)": {
        "size": 485,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT.isAfterLineTerminator(Char, Char)": {
        "size": 553,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT.isLineTerminator(Char)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.unicodeLT_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.unicodeLT_getInstance()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.$another": {
        "size": 58,
        "type": "field"
    },
    "kotlin.text.regex.<no name provided>.<init>(Boolean, CharClass, AbstractCharClass)": {
        "size": 237,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.$curAlt": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.<no name provided>.<init>(Boolean, AbstractCharClass?, AbstractCharClass)": {
        "size": 237,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.$nb": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.<no name provided>.<init>(AbstractCharClass, Boolean, CharClass)": {
        "size": 237,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<init>(BitSet?)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.$bs": {
        "size": 43,
        "type": "field"
    },
    "kotlin.text.regex.CharClass": {
        "size": 28880,
        "type": "class"
    },
    "kotlin.text.regex.CharClass.<init>(Boolean, Boolean)": {
        "size": 465,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.<init>(Boolean?, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 748,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.ignoreCase": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.CharClass.invertedSurrogates": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.regex.CharClass.inverted": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.CharClass.hideBits": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.CharClass.bits_": {
        "size": 26,
        "type": "field"
    },
    "kotlin.text.regex.CharClass.<get-bits>()": {
        "size": 204,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.nonBitSet": {
        "size": 42,
        "type": "field"
    },
    "kotlin.text.regex.CharClass.<get-asciiSupplement>()": {
        "size": 432,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.add(Int)": {
        "size": 1815,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.add(Char)": {
        "size": 89,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.add(AbstractCharClass)": {
        "size": 5525,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.add(Int, Int)": {
        "size": 3059,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.add(Char, Char)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.addAll(Iterable<Char>)": {
        "size": 512,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.union(AbstractCharClass)": {
        "size": 5771,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.intersection(AbstractCharClass)": {
        "size": 5780,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.contains(Int)": {
        "size": 681,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.<get-instance>()": {
        "size": 503,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.toString()": {
        "size": 749,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.contains(Char)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.hasLowHighSurrogates()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.classWithSurrogates()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.classWithoutSurrogates()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.setNegative(Boolean)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.isNegative()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CharClass.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.Mode_PATTERN_instance": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.Mode_RANGE_instance": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.Mode_ESCAPE_instance": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.regex.Mode_entriesInitialized": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.Mode_initEntries()": {
        "size": 312,
        "type": "function"
    },
    "kotlin.text.regex.Mode": {
        "size": 400,
        "type": "class"
    },
    "kotlin.text.regex.Mode.<init>(String, Int)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.regex.Mode.compareTo(Mode)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.Mode.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.Mode.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.Mode.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.Companion.CHAR_DOLLAR": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_RIGHT_PARENTHESIS": {
        "size": 58,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_LEFT_SQUARE_BRACKET": {
        "size": 60,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_RIGHT_SQUARE_BRACKET": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_CARET": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_VERTICAL_BAR": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_AMPERSAND": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_HYPHEN": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_DOT": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_LEFT_PARENTHESIS": {
        "size": 57,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_NAMED_GROUP": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_NONCAP_GROUP": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_POS_LOOKAHEAD": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_NEG_LOOKAHEAD": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_POS_LOOKBEHIND": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_NEG_LOOKBEHIND": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_ATOMIC_GROUP": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_FLAGS": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_START_OF_INPUT": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_WORD_BOUND": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_NONWORD_BOUND": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_PREVIOUS_MATCH": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_NAMED_GROUP_REF": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_END_OF_INPUT": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_END_OF_LINE": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CHAR_LINEBREAK": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QMOD_GREEDY": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QMOD_RELUCTANT": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QMOD_POSSESSIVE": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_STAR": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_STAR_P": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_STAR_R": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_PLUS": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_PLUS_P": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_PLUS_R": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_ALT": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_ALT_P": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_ALT_R": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_COMP": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_COMP_P": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.Companion.QUANT_COMP_R": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.Companion.isLetter(Int)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.text.regex.Companion.codePointAt(Int)": {
        "size": 603,
        "type": "function"
    },
    "kotlin.text.regex.Companion.MAX_DECOMPOSITION_LENGTH": {
        "size": 60,
        "type": "field"
    },
    "kotlin.text.regex.Companion.MAX_HANGUL_DECOMPOSITION_LENGTH": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.Companion.SBase": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.Companion.LBase": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.regex.Companion.VBase": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.regex.Companion.TBase": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.regex.Companion.SCount": {
        "size": 42,
        "type": "field"
    },
    "kotlin.text.regex.Companion.LCount": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.Companion.VCount": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.Companion.TCount": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.Companion.NCount": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.regex.Companion.getCanonicalClass(Int)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.text.regex.Companion.isDecomposedCharBoundary(Int)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.text.regex.Companion.hasSingleCodepointDecomposition(Int)": {
        "size": 117,
        "type": "function"
    },
    "kotlin.text.regex.Companion.hasDecompositionNonNullCanClass(Int)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.text.regex.Companion.normalize(String)": {
        "size": 4780,
        "type": "function"
    },
    "kotlin.text.regex.Companion.getCanonicalOrder(IntArray, Int)": {
        "size": 2618,
        "type": "function"
    },
    "kotlin.text.regex.Companion.getHangulDecomposition(Int)": {
        "size": 1427,
        "type": "function"
    },
    "kotlin.text.regex.Mode_PATTERN_getInstance()": {
        "size": 95,
        "type": "function"
    },
    "kotlin.text.regex.Mode_RANGE_getInstance()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.text.regex.Mode_ESCAPE_getInstance()": {
        "size": 93,
        "type": "function"
    },
    "kotlin.text.regex.Lexer": {
        "size": 49375,
        "type": "class"
    },
    "kotlin.text.regex.Lexer.<init>(String, Int)": {
        "size": 2011,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.patternString": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.pattern": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.flags": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.mode": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.savedMode": {
        "size": 28,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.setModeWithReread(Mode)": {
        "size": 559,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.lookBack": {
        "size": 26,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.currentChar": {
        "size": 29,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.lookAhead": {
        "size": 27,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.curSpecialToken": {
        "size": 43,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.lookAheadSpecialToken": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.prevNonWhitespaceIndex": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.curTokenIndex": {
        "size": 31,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.lookAheadTokenIndex": {
        "size": 37,
        "type": "field"
    },
    "kotlin.text.regex.Lexer.<get-isSpecial>()": {
        "size": 118,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.<get-isNextSpecial>()": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.isSurrogatePair()": {
        "size": 279,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.isLineSeparator()": {
        "size": 410,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.isEmpty()": {
        "size": 368,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.isLetter()": {
        "size": 271,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.isHighSurrogate()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.isLowSurrogate()": {
        "size": 130,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.isSurrogate()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.restoreFlags(Int)": {
        "size": 310,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.toString()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.next()": {
        "size": 79,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.nextSpecial()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.reread()": {
        "size": 249,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.nextIndex()": {
        "size": 826,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.skipComments()": {
        "size": 2073,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.nextCodePoint()": {
        "size": 777,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.movePointer()": {
        "size": 1079,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.processInEscapeMode()": {
        "size": 1226,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.processInPatternMode()": {
        "size": 7047,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.processInRangeMode()": {
        "size": 1336,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.processEscapedChar()": {
        "size": 11711,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.processQuantifier()": {
        "size": 4789,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.readFlags()": {
        "size": 3963,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.parseCharClassName()": {
        "size": 2035,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.readHex(String, Int)": {
        "size": 1542,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.readOctals()": {
        "size": 1264,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.readGroupName()": {
        "size": 1304,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.Lexer.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.Type_CHARCLASS_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.Type_QUANTIFIER_instance": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.Type_NAMED_GROUP_instance": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.Type_entriesInitialized": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.regex.Type_initEntries()": {
        "size": 336,
        "type": "function"
    },
    "kotlin.text.regex.Type": {
        "size": 400,
        "type": "class"
    },
    "kotlin.text.regex.Type.<init>(String, Int)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.regex.Type.compareTo(Type)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.Type.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.Type.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.Type.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.Type_CHARCLASS_getInstance()": {
        "size": 99,
        "type": "function"
    },
    "kotlin.text.regex.Type_QUANTIFIER_getInstance()": {
        "size": 101,
        "type": "function"
    },
    "kotlin.text.regex.Type_NAMED_GROUP_getInstance()": {
        "size": 103,
        "type": "function"
    },
    "kotlin.text.regex.SpecialToken": {
        "size": 273,
        "type": "class"
    },
    "kotlin.text.regex.SpecialToken.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.text.regex.SpecialToken.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.SpecialToken.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.SpecialToken.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<init>(<no name provided>)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.nextIndex": {
        "size": 27,
        "type": "field"
    },
    "kotlin.text.regex.<no name provided>.hasNext()": {
        "size": 226,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.next()": {
        "size": 607,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultState": {
        "size": 4017,
        "type": "class"
    },
    "kotlin.text.regex.MatchResultState.<init>(IntArray, IntArray, IntArray, Int, Int)": {
        "size": 363,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultState.groupBounds": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultState.consumers": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultState.enterCounters": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultState.startIndex": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultState.previousMatch": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultState.toString()": {
        "size": 896,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultState.hashCode()": {
        "size": 745,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultState.equals(Any?)": {
        "size": 1531,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<init>(MatchResultImpl)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<get-size>()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.iterator()": {
        "size": 249,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.get(Int)": {
        "size": 505,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.get(String)": {
        "size": 747,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.contains(MatchGroup?)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.containsAll(Collection<MatchGroup?>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl": {
        "size": 13476,
        "type": "class"
    },
    "kotlin.text.regex.MatchResultImpl.<init>(CharSequence, Regex)": {
        "size": 3606,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.input": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.regex": {
        "size": 43,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.nativePattern": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.groupCount": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.groupBounds": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.consumers": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.enterCounters": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.<set-startIndex>(Int)": {
        "size": 280,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.startIndex": {
        "size": 28,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.previousMatch": {
        "size": 31,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.mode": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.state": {
        "size": 37,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.saveState()": {
        "size": 269,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.rollbackState()": {
        "size": 2055,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.<get-range>()": {
        "size": 210,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.<get-value>()": {
        "size": 376,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.<get-groups>()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.groups": {
        "size": 59,
        "type": "field"
    },
    "kotlin.text.regex.MatchResultImpl.<get-groupValues>()": {
        "size": 1543,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.next()": {
        "size": 860,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.setConsumed(Int, Int)": {
        "size": 103,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.getConsumed(Int)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.setStart(Int, Int)": {
        "size": 180,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.setEnd(Int, Int)": {
        "size": 213,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.getStart(Int)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.getEnd(Int)": {
        "size": 187,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.getEnd$default(Int?, Int, Any?)": {
        "size": 372,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.group(Int)": {
        "size": 530,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.finalizeMatch()": {
        "size": 452,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.checkGroup(Int)": {
        "size": 327,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.<get-destructured>()": {
        "size": 60,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.MatchResultImpl.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.NamedGroup": {
        "size": 751,
        "type": "class"
    },
    "kotlin.text.regex.NamedGroup.<init>(String)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.text.regex.NamedGroup.name": {
        "size": 43,
        "type": "field"
    },
    "kotlin.text.regex.NamedGroup.toString()": {
        "size": 313,
        "type": "function"
    },
    "kotlin.text.regex.NamedGroup.type": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.NamedGroup.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.NamedGroup.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.Companion.UNIX_LINES": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CASE_INSENSITIVE": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.Companion.COMMENTS": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.regex.Companion.MULTILINE": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.regex.Companion.LITERAL": {
        "size": 43,
        "type": "field"
    },
    "kotlin.text.regex.Companion.DOTALL": {
        "size": 42,
        "type": "field"
    },
    "kotlin.text.regex.Companion.CANON_EQ": {
        "size": 44,
        "type": "field"
    },
    "kotlin.text.regex.Companion.flagsBitMask": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.regex.Companion.quote(String)": {
        "size": 264,
        "type": "function"
    },
    "kotlin.text.regex.Pattern": {
        "size": 64867,
        "type": "class"
    },
    "kotlin.text.regex.Pattern.<init>(String, Int)": {
        "size": 1616,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.<init>(String, Int?, Int, DefaultConstructorMarker?)": {
        "size": 411,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.pattern": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.flags": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.lexemes": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.capturingGroups": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.groupNameToIndex": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.needsBackRefReplacement": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.groupQuantifierCount": {
        "size": 38,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.consumersCount": {
        "size": 32,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.startNode": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.Pattern.toString()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.hasFlag(Int)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processAlternations(AbstractSet)": {
        "size": 1198,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processExpression(Int, Int, AbstractSet?)": {
        "size": 8171,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processSequence()": {
        "size": 2027,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processDecomposedChar()": {
        "size": 5197,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processSubExpression(AbstractSet)": {
        "size": 4576,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.quantifierFromLexerToken(Int)": {
        "size": 964,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processQuantifier(AbstractSet, AbstractSet)": {
        "size": 5265,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processTerminal(AbstractSet)": {
        "size": 17884,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.createBackReference(Int)": {
        "size": 1248,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processRange(Boolean, AbstractSet)": {
        "size": 276,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processRangeExpression(Boolean)": {
        "size": 10368,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processRangeSet(AbstractCharClass)": {
        "size": 1142,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.processCharSet(Int)": {
        "size": 796,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.Pattern.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.Companion.starQuantifier": {
        "size": 57,
        "type": "field"
    },
    "kotlin.text.regex.Companion.plusQuantifier": {
        "size": 57,
        "type": "field"
    },
    "kotlin.text.regex.Companion.altQuantifier": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.Companion.INF": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.Companion.fromLexerToken(Int)": {
        "size": 1300,
        "type": "function"
    },
    "kotlin.text.regex.Quantifier": {
        "size": 1352,
        "type": "class"
    },
    "kotlin.text.regex.Quantifier.<init>(Int, Int)": {
        "size": 495,
        "type": "function"
    },
    "kotlin.text.regex.Quantifier.min": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.Quantifier.max": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.Quantifier.toString()": {
        "size": 512,
        "type": "function"
    },
    "kotlin.text.regex.Quantifier.type": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.Quantifier.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.Quantifier.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<init>()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<set-next>(AbstractSet)": {
        "size": 89,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<get-next>()": {
        "size": 122,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 205,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.hasConsumed(MatchResultImpl)": {
        "size": 147,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.processSecondPassInternal()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.processSecondPass()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.<no name provided>.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.Companion.TYPE_LEAF": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.Companion.TYPE_FSET": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.Companion.TYPE_QUANT": {
        "size": 42,
        "type": "field"
    },
    "kotlin.text.regex.Companion.TYPE_DOTSET": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.Companion.dummyNext": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.AbstractSet": {
        "size": 4843,
        "type": "class"
    },
    "kotlin.text.regex.AbstractSet.<init>(Int)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.<init>(Int?, Int, DefaultConstructorMarker?)": {
        "size": 375,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.type": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.regex.AbstractSet.secondPassVisited": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.AbstractSet.<set-next>(AbstractSet)": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.<get-next>()": {
        "size": 40,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1245,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 1232,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.<get-consumesFixedLength>()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.hasConsumed(MatchResultImpl)": {
        "size": 65,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.first(AbstractSet)": {
        "size": 61,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.processBackRefReplacement()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.processSecondPassInternal()": {
        "size": 678,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.processSecondPass()": {
        "size": 213,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.AbstractSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet": {
        "size": 1687,
        "type": "class"
    },
    "kotlin.text.regex.SimpleSet.<set-next>(AbstractSet)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.<get-next>()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.next": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.SimpleSet.<init>()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.<init>(Int)": {
        "size": 86,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.hasConsumed(MatchResultImpl)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.SimpleSet.<init>()[synthetic]": {
        "size": 112,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet": {
        "size": 3273,
        "type": "class"
    },
    "kotlin.text.regex.AtomicJointSet.<init>(List<AbstractSet>, FSet)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1741,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.<set-next>(AbstractSet)": {
        "size": 164,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.<get-next>()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.next": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.AtomicJointSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.AtomicJointSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet": {
        "size": 5685,
        "type": "class"
    },
    "kotlin.text.regex.BackReferenceSet.<init>(Int, Int, Boolean)": {
        "size": 252,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.referencedGroup": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.regex.BackReferenceSet.consCounter": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.BackReferenceSet.ignoreCase": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.BackReferenceSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1008,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1499,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 1362,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.getReferencedGroupValue(MatchResultImpl)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.hasConsumed(MatchResultImpl)": {
        "size": 381,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.BackReferenceSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CharSet": {
        "size": 5330,
        "type": "class"
    },
    "kotlin.text.regex.CharSet.<init>(Char, Boolean)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.<init>(Char, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 444,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.ignoreCase": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.CharSet.char": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.regex.CharSet.accepts(Int, CharSequence)": {
        "size": 519,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1056,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 959,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.first(AbstractSet)": {
        "size": 964,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.<get-charCount>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CharSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet": {
        "size": 2677,
        "type": "class"
    },
    "kotlin.text.regex.CompositeRangeSet.<init>(AbstractSet, SurrogateRangeSet)": {
        "size": 274,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.withoutSurrogates": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.CompositeRangeSet.surrogates": {
        "size": 60,
        "type": "field"
    },
    "kotlin.text.regex.CompositeRangeSet.<set-next>(AbstractSet)": {
        "size": 383,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.<get-next>()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.next": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.CompositeRangeSet.<get-consumesFixedLength>()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 734,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.first(AbstractSet)": {
        "size": 65,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.CompositeRangeSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.$KPROPERTIES": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.regex.DecomposedCharSet$decomposedCharUTF16$delegate$lambda": {
        "size": 1435,
        "type": "class"
    },
    "kotlin.text.regex.DecomposedCharSet$decomposedCharUTF16$delegate$lambda.<init>(DecomposedCharSet)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet$decomposedCharUTF16$delegate$lambda.invoke()": {
        "size": 1026,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet$decomposedCharUTF16$delegate$lambda.this$0": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.DecomposedCharSet": {
        "size": 9604,
        "type": "class"
    },
    "kotlin.text.regex.DecomposedCharSet.<init>(IntArray, Int)": {
        "size": 460,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.decomposedChar": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.DecomposedCharSet.decomposedCharLength": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.DecomposedCharSet.readCharsForCodePoint": {
        "size": 39,
        "type": "field"
    },
    "kotlin.text.regex.DecomposedCharSet.<get-decomposedCharUTF16>()": {
        "size": 438,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.decomposedCharUTF16$delegate": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.regex.DecomposedCharSet.<get-consumesFixedLength>()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 5407,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.codePointAt(Int, CharSequence, Int)": {
        "size": 1346,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.first(AbstractSet)": {
        "size": 368,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet$<get-decomposedCharUTF16>$ref": {
        "size": 737,
        "type": "class"
    },
    "kotlin.text.regex.DecomposedCharSet$<get-decomposedCharUTF16>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet$<get-decomposedCharUTF16>$ref.invoke(DecomposedCharSet)": {
        "size": 105,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet$<get-decomposedCharUTF16>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "kotlin.text.regex.DecomposedCharSet$<get-decomposedCharUTF16>$ref.<get-name>()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet": {
        "size": 8143,
        "type": "class"
    },
    "kotlin.text.regex.DotQuantifierSet.<init>(AbstractSet, AbstractSet, Int, AbstractLineTerminator, Boolean)": {
        "size": 341,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.lineTerminator": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.regex.DotQuantifierSet.matchLineTerminator": {
        "size": 59,
        "type": "field"
    },
    "kotlin.text.regex.DotQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1306,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 2403,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.findLineTerminator(Int, Int)": {
        "size": 1157,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.findBackLineTerminator(Int, Int, CharSequence)": {
        "size": 1461,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.DotQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.DotSet": {
        "size": 3549,
        "type": "class"
    },
    "kotlin.text.regex.DotSet.<init>(AbstractLineTerminator, Boolean)": {
        "size": 268,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.lt": {
        "size": 57,
        "type": "field"
    },
    "kotlin.text.regex.DotSet.matchLineTerminator": {
        "size": 59,
        "type": "field"
    },
    "kotlin.text.regex.DotSet.<get-consumesFixedLength>()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 2053,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.DotSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.EOISet": {
        "size": 1525,
        "type": "class"
    },
    "kotlin.text.regex.EOISet.<init>()": {
        "size": 73,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 454,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.EOISet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet": {
        "size": 3882,
        "type": "class"
    },
    "kotlin.text.regex.EOLSet.<init>(Int, AbstractLineTerminator, Boolean)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.<init>(Int, AbstractLineTerminator, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 496,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.consCounter": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.EOLSet.lt": {
        "size": 57,
        "type": "field"
    },
    "kotlin.text.regex.EOLSet.multiline": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.regex.EOLSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1633,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.hasConsumed(MatchResultImpl)": {
        "size": 361,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.EOLSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet": {
        "size": 4805,
        "type": "class"
    },
    "kotlin.text.regex.EmptySet.<init>(AbstractSet)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.<set-next>(AbstractSet)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.<get-next>()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.next": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.EmptySet.<get-charCount>()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.charCount": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.regex.EmptySet.accepts(Int, CharSequence)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1563,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 1548,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.EmptySet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet": {
        "size": 1185,
        "type": "class"
    },
    "kotlin.text.regex.PossessiveFSet.<init>()": {
        "size": 73,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.Companion.possessiveFSet": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.regex.FSet": {
        "size": 2286,
        "type": "class"
    },
    "kotlin.text.regex.FSet.<init>(Int)": {
        "size": 161,
        "type": "function"
    },
    "kotlin.text.regex.FSet.groupIndex": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.regex.FSet.isBackReferenced": {
        "size": 38,
        "type": "field"
    },
    "kotlin.text.regex.FSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 729,
        "type": "function"
    },
    "kotlin.text.regex.FSet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.FSet.processSecondPass()": {
        "size": 246,
        "type": "function"
    },
    "kotlin.text.regex.FSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.FSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.FSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.FSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.FSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.FSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.FSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.FSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.FSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.FSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.FSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet": {
        "size": 1610,
        "type": "class"
    },
    "kotlin.text.regex.NonCapFSet.<init>(Int)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 522,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.processSecondPass()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.NonCapFSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet": {
        "size": 1166,
        "type": "class"
    },
    "kotlin.text.regex.AheadFSet.<init>()": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.processSecondPass()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.AheadFSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet": {
        "size": 1435,
        "type": "class"
    },
    "kotlin.text.regex.BehindFSet.<init>(Int)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 359,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.processSecondPass()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.BehindFSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet": {
        "size": 1540,
        "type": "class"
    },
    "kotlin.text.regex.AtomicFSet.<init>(Int)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.AtomicFSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 407,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.processSecondPass()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.AtomicFSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet": {
        "size": 1511,
        "type": "class"
    },
    "kotlin.text.regex.FinalSet.<init>()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 447,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.processSecondPass()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.FinalSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet": {
        "size": 5261,
        "type": "class"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<init>(Quantifier, AbstractSet, AbstractSet, Int)": {
        "size": 1330,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.quantifier": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<get-min>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<get-max>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<get-consumesFixedLength>()": {
        "size": 237,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1779,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.toString()": {
        "size": 524,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.FixedLengthQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.matches$matchNext(MatchResultImpl, GroupQuantifierSet, Int, CharSequence, $closureBox$)": {
        "size": 573,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet": {
        "size": 6262,
        "type": "class"
    },
    "kotlin.text.regex.GroupQuantifierSet.<init>(Quantifier, AbstractSet, AbstractSet, Int, Int)": {
        "size": 1407,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.quantifier": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.regex.GroupQuantifierSet.groupQuantifierIndex": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.GroupQuantifierSet.<get-max>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.<get-min>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 3276,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.GroupQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$decomposedCharUTF16$delegate$lambda": {
        "size": 737,
        "type": "class"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$decomposedCharUTF16$delegate$lambda.<init>(HangulDecomposedCharSet)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$decomposedCharUTF16$delegate$lambda.invoke()": {
        "size": 354,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$decomposedCharUTF16$delegate$lambda.this$0": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.regex.HangulDecomposedCharSet": {
        "size": 9534,
        "type": "class"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.<init>(CharArray, Int)": {
        "size": 429,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.decomposedChar": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.decomposedCharLength": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.<get-decomposedCharUTF16>()": {
        "size": 444,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.decomposedCharUTF16$delegate": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.<get-consumesFixedLength>()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 6672,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.first(AbstractSet)": {
        "size": 409,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$<get-decomposedCharUTF16>$ref": {
        "size": 773,
        "type": "class"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$<get-decomposedCharUTF16>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$<get-decomposedCharUTF16>$ref.invoke(HangulDecomposedCharSet)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$<get-decomposedCharUTF16>$ref.invoke(P1)": {
        "size": 306,
        "type": "function"
    },
    "kotlin.text.regex.HangulDecomposedCharSet$<get-decomposedCharUTF16>$ref.<get-name>()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.JointSet$processSecondPassInternal$lambda": {
        "size": 691,
        "type": "class"
    },
    "kotlin.text.regex.JointSet$processSecondPassInternal$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.regex.JointSet$processSecondPassInternal$lambda.invoke(AbstractSet)": {
        "size": 190,
        "type": "function"
    },
    "kotlin.text.regex.JointSet$processSecondPassInternal$lambda.invoke(P1)": {
        "size": 285,
        "type": "function"
    },
    "kotlin.text.regex.JointSet": {
        "size": 5762,
        "type": "class"
    },
    "kotlin.text.regex.JointSet.<init>(List<AbstractSet>, FSet)": {
        "size": 858,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.children": {
        "size": 47,
        "type": "field"
    },
    "kotlin.text.regex.JointSet.fSet": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.regex.JointSet.groupIndex": {
        "size": 28,
        "type": "field"
    },
    "kotlin.text.regex.JointSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1393,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.<set-next>(AbstractSet)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.<get-next>()": {
        "size": 198,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.first(AbstractSet)": {
        "size": 1000,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.hasConsumed(MatchResultImpl)": {
        "size": 418,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.processSecondPassInternal()": {
        "size": 658,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.JointSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet": {
        "size": 5450,
        "type": "class"
    },
    "kotlin.text.regex.LeafQuantifierSet.<init>(Quantifier, LeafSet, AbstractSet, Int)": {
        "size": 380,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.quantifier": {
        "size": 35,
        "type": "field"
    },
    "kotlin.text.regex.LeafQuantifierSet.<get-leaf>()": {
        "size": 238,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.<get-min>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.<get-max>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.<get-consumesFixedLength>()": {
        "size": 223,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 2759,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 345,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.<get-innerSet>()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.LeafQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet": {
        "size": 2189,
        "type": "class"
    },
    "kotlin.text.regex.LeafSet.<init>()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.<get-charCount>()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.charCount": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.regex.LeafSet.accepts(Int, CharSequence)": {
        "size": 70,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.<get-consumesFixedLength>()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 732,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.LeafSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet": {
        "size": 2555,
        "type": "class"
    },
    "kotlin.text.regex.PositiveLookAheadSet.<init>(List<AbstractSet>, FSet)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.tryToMatch(Int, CharSequence, MatchResultImpl)": {
        "size": 1250,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookAheadSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet": {
        "size": 2468,
        "type": "class"
    },
    "kotlin.text.regex.NegativeLookAheadSet.<init>(List<AbstractSet>, FSet)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.tryToMatch(Int, CharSequence, MatchResultImpl)": {
        "size": 1165,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookAheadSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet": {
        "size": 2086,
        "type": "class"
    },
    "kotlin.text.regex.LookAroundSet.<init>(List<AbstractSet>, FSet)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.tryToMatch(Int, CharSequence, MatchResultImpl)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 778,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.LookAroundSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet": {
        "size": 2709,
        "type": "class"
    },
    "kotlin.text.regex.PositiveLookBehindSet.<init>(List<AbstractSet>, FSet)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.tryToMatch(Int, CharSequence, MatchResultImpl)": {
        "size": 1401,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.PositiveLookBehindSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet": {
        "size": 2609,
        "type": "class"
    },
    "kotlin.text.regex.NegativeLookBehindSet.<init>(List<AbstractSet>, FSet)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.tryToMatch(Int, CharSequence, MatchResultImpl)": {
        "size": 1301,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.NegativeLookBehindSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet": {
        "size": 2667,
        "type": "class"
    },
    "kotlin.text.regex.NonCapturingJointSet.<init>(List<AbstractSet>, FSet)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1270,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.hasConsumed(MatchResultImpl)": {
        "size": 283,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.<set-next>(AbstractSet)": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.NonCapturingJointSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet": {
        "size": 2617,
        "type": "class"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<init>(Quantifier, AbstractSet, AbstractSet, Int)": {
        "size": 233,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1114,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<get-min>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<get-max>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveFixedLengthQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet": {
        "size": 3232,
        "type": "class"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<init>(Quantifier, AbstractSet, AbstractSet, Int, Int)": {
        "size": 430,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1504,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<get-max>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<get-min>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveGroupQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet": {
        "size": 3879,
        "type": "class"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<init>(Quantifier, LeafSet, AbstractSet, Int)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 2281,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<get-leaf>()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<get-min>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<get-max>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.PossessiveLeafQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet": {
        "size": 1566,
        "type": "class"
    },
    "kotlin.text.regex.PreviousMatchSet.<init>()": {
        "size": 73,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 485,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.PreviousMatchSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet": {
        "size": 2697,
        "type": "class"
    },
    "kotlin.text.regex.QuantifierSet.<init>(AbstractSet, AbstractSet, Int)": {
        "size": 191,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.<get-innerSet>()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.innerSet": {
        "size": 34,
        "type": "field"
    },
    "kotlin.text.regex.QuantifierSet.<set-next>(AbstractSet)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.<get-next>()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.next": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.QuantifierSet.first(AbstractSet)": {
        "size": 376,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.processSecondPassInternal()": {
        "size": 478,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.QuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet": {
        "size": 3709,
        "type": "class"
    },
    "kotlin.text.regex.RangeSet.<init>(AbstractCharClass, Boolean)": {
        "size": 203,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.<init>(AbstractCharClass, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 473,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.ignoreCase": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.RangeSet.chars": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.RangeSet.accepts(Int, CharSequence)": {
        "size": 879,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.first(AbstractSet)": {
        "size": 857,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.<get-charCount>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.RangeSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet": {
        "size": 4385,
        "type": "class"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<init>(Quantifier, AbstractSet, AbstractSet, Int)": {
        "size": 233,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 2775,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<get-min>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<get-max>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantFixedLengthQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.matches$matchNext(MatchResultImpl, ReluctantGroupQuantifierSet, Int, CharSequence, $closureBox$)": {
        "size": 582,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet": {
        "size": 5521,
        "type": "class"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<init>(Quantifier, AbstractSet, AbstractSet, Int, Int)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 3857,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<get-max>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<get-min>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantGroupQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet": {
        "size": 4104,
        "type": "class"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<init>(Quantifier, LeafSet, AbstractSet, Int)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 2491,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<get-leaf>()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<get-min>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<get-max>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.ReluctantLeafQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet": {
        "size": 3134,
        "type": "class"
    },
    "kotlin.text.regex.SOLSet.<init>(AbstractLineTerminator, Boolean)": {
        "size": 173,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.<init>(AbstractLineTerminator, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 451,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.lt": {
        "size": 57,
        "type": "field"
    },
    "kotlin.text.regex.SOLSet.multiline": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.regex.SOLSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1334,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.SOLSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet": {
        "size": 7765,
        "type": "class"
    },
    "kotlin.text.regex.SequenceSet.<init>(CharSequence, Boolean)": {
        "size": 317,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.<init>(CharSequence, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 471,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.ignoreCase": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.SequenceSet.patternString": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.regex.SequenceSet.name": {
        "size": 43,
        "type": "field"
    },
    "kotlin.text.regex.SequenceSet.<get-charCount>()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.charCount": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.regex.SequenceSet.isLowSurrogateOfSupplement(CharSequence, Int)": {
        "size": 429,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.accepts(Int, CharSequence)": {
        "size": 763,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1455,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 1445,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.first(AbstractSet)": {
        "size": 1454,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.SequenceSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet": {
        "size": 4053,
        "type": "class"
    },
    "kotlin.text.regex.BackReferencedSingleSet.<init>(SingleSet)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1462,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 1447,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.processBackRefReplacement()": {
        "size": 71,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.<set-next>(AbstractSet)": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.BackReferencedSingleSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet": {
        "size": 4595,
        "type": "class"
    },
    "kotlin.text.regex.SingleSet.<init>(AbstractSet, FSet)": {
        "size": 284,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.kid": {
        "size": 29,
        "type": "field"
    },
    "kotlin.text.regex.SingleSet.backReferencedSet": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.regex.SingleSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 670,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 542,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 589,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.first(AbstractSet)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.processBackRefReplacement()": {
        "size": 272,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.processSecondPassInternal()": {
        "size": 557,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.processSecondPass()": {
        "size": 709,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.<set-next>(AbstractSet)": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.SingleSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet": {
        "size": 4785,
        "type": "class"
    },
    "kotlin.text.regex.SupplementaryRangeSet.<init>(AbstractCharClass, Boolean)": {
        "size": 205,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.ignoreCase": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.regex.SupplementaryRangeSet.chars": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.regex.SupplementaryRangeSet.<get-consumesFixedLength>()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1754,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.contains(Char)": {
        "size": 547,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.contains(Int)": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.first(AbstractSet)": {
        "size": 883,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.SupplementaryRangeSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet": {
        "size": 6353,
        "type": "class"
    },
    "kotlin.text.regex.LowSurrogateCharSet.<init>(Char)": {
        "size": 161,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.accepts(Int, CharSequence)": {
        "size": 639,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.isHighSurrogate(Int, Int, Int)": {
        "size": 246,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.isHighSurrogate$default(Int, Int?, Int?, Int, Any?)": {
        "size": 791,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1400,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 1205,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.first(AbstractSet)": {
        "size": 802,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.<get-charCount>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.LowSurrogateCharSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet": {
        "size": 6356,
        "type": "class"
    },
    "kotlin.text.regex.HighSurrogateCharSet.<init>(Char)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.accepts(Int, CharSequence)": {
        "size": 639,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.isLowSurrogate(Int, Int, Int)": {
        "size": 244,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.isLowSurrogate$default(Int, Int?, Int?, Int, Any?)": {
        "size": 789,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1400,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 1205,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.first(AbstractSet)": {
        "size": 806,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.<get-charCount>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.HighSurrogateCharSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet": {
        "size": 5616,
        "type": "class"
    },
    "kotlin.text.regex.SurrogateRangeSet.<init>(AbstractCharClass)": {
        "size": 192,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.accepts(Int, CharSequence)": {
        "size": 1443,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.isHighSurrogate(Int, Int, Int)": {
        "size": 246,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.isHighSurrogate$default(Int, Int?, Int?, Int, Any?)": {
        "size": 791,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.isLowSurrogate(Int, Int, Int)": {
        "size": 244,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.isLowSurrogate$default(Int, Int?, Int?, Int, Any?)": {
        "size": 789,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.first(AbstractSet)": {
        "size": 617,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.hasConsumed(MatchResultImpl)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.<get-charCount>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.SurrogateRangeSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet": {
        "size": 3697,
        "type": "class"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<init>(LeafQuantifierSet)": {
        "size": 430,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 940,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 1072,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<get-leaf>()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<get-min>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<get-max>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<set-innerSet>(AbstractSet)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<get-innerSet>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.hasConsumed(MatchResultImpl)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.UnifiedQuantifierSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet": {
        "size": 3483,
        "type": "class"
    },
    "kotlin.text.regex.WordBoundarySet.<init>(Boolean)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.positive": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.regex.WordBoundarySet.matches(Int, CharSequence, MatchResultImpl)": {
        "size": 1210,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.hasConsumed(MatchResultImpl)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.isSpace(Char, Int, CharSequence)": {
        "size": 1012,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.<set-next>(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.<get-next>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.find(Int, CharSequence, MatchResultImpl)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.findBack(Int, Int, CharSequence, MatchResultImpl)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.<get-consumesFixedLength>()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.first(AbstractSet)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.processBackRefReplacement()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.processSecondPassInternal()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.processSecondPass()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.regex.WordBoundarySet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.CharSequence": {
        "size": 339,
        "type": "class"
    },
    "kotlin.CharSequence.<get-length>()": {
        "size": 34,
        "type": "function"
    },
    "kotlin.CharSequence.get(Int)": {
        "size": 45,
        "type": "function"
    },
    "kotlin.CharSequence.subSequence(Int, Int)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.CharSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.CharSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.CharSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.Comparable": {
        "size": 197,
        "type": "class"
    },
    "kotlin.Comparable.compareTo(T)": {
        "size": 48,
        "type": "function"
    },
    "kotlin.Comparable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Comparable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Number": {
        "size": 287,
        "type": "class"
    },
    "kotlin.Number.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.Number.toInt()": {
        "size": 27,
        "type": "function"
    },
    "kotlin.Number.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Number.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Number.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.Function": {
        "size": 192,
        "type": "class"
    },
    "kotlin.Function.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Function.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Function.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.Unit": {
        "size": 276,
        "type": "class"
    },
    "kotlin.Unit.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.Unit.toString()": {
        "size": 60,
        "type": "function"
    },
    "kotlin.Unit.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Unit.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Unit_instance": {
        "size": 44,
        "type": "field"
    },
    "kotlin.collections.<get-lastIndex>()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.collections.contains(Long)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.collections.indexOf(Long)": {
        "size": 759,
        "type": "function"
    },
    "kotlin.collections.<get-indices>()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.collections.toSet()": {
        "size": 1313,
        "type": "function"
    },
    "kotlin.collections.toList()": {
        "size": 1485,
        "type": "function"
    },
    "kotlin.collections.reverse()": {
        "size": 1193,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<T, CharSequence>?)": {
        "size": 438,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<T, CharSequence>?, Int, Any?)": {
        "size": 1703,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Int, CharSequence>?)": {
        "size": 422,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Int, CharSequence>?, Int, Any?)": {
        "size": 1687,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Char, CharSequence>?)": {
        "size": 424,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Char, CharSequence>?, Int, Any?)": {
        "size": 1689,
        "type": "function"
    },
    "kotlin.collections.minOrNull()": {
        "size": 2389,
        "type": "function"
    },
    "kotlin.collections.maxOrNull()": {
        "size": 2389,
        "type": "function"
    },
    "kotlin.collections.minWithOrNull(Comparator<in T>)": {
        "size": 1107,
        "type": "function"
    },
    "kotlin.collections.minWithOrNull(Comparator<in Int>)": {
        "size": 1178,
        "type": "function"
    },
    "kotlin.collections.maxWithOrNull(Comparator<in T>)": {
        "size": 1107,
        "type": "function"
    },
    "kotlin.collections.maxWithOrNull(Comparator<in Int>)": {
        "size": 1178,
        "type": "function"
    },
    "kotlin.collections.sum()": {
        "size": 1351,
        "type": "function"
    },
    "kotlin.collections.average()": {
        "size": 2102,
        "type": "function"
    },
    "kotlin.collections.indexOf(Byte)": {
        "size": 811,
        "type": "function"
    },
    "kotlin.collections.indexOf(Short)": {
        "size": 815,
        "type": "function"
    },
    "kotlin.collections.indexOf(Int)": {
        "size": 757,
        "type": "function"
    },
    "kotlin.collections.indexOf(Char)": {
        "size": 759,
        "type": "function"
    },
    "kotlin.collections.indexOf(Boolean)": {
        "size": 765,
        "type": "function"
    },
    "kotlin.collections.indexOf(T)": {
        "size": 1781,
        "type": "function"
    },
    "kotlin.collections.lastIndexOf(T)": {
        "size": 1723,
        "type": "function"
    },
    "kotlin.collections.first()": {
        "size": 529,
        "type": "function"
    },
    "kotlin.collections.last()": {
        "size": 612,
        "type": "function"
    },
    "kotlin.collections.random(Random)": {
        "size": 369,
        "type": "function"
    },
    "kotlin.collections.randomOrNull(Random)": {
        "size": 393,
        "type": "function"
    },
    "kotlin.collections.contains(T)": {
        "size": 391,
        "type": "function"
    },
    "kotlin.collections.slice(IntRange)": {
        "size": 755,
        "type": "function"
    },
    "kotlin.collections.slice(Iterable<Int>)": {
        "size": 721,
        "type": "function"
    },
    "kotlin.collections.sliceArray(IntRange)": {
        "size": 305,
        "type": "function"
    },
    "kotlin.collections.sliceArray(Collection<Int>)": {
        "size": 818,
        "type": "function"
    },
    "kotlin.collections.asIterable()": {
        "size": 425,
        "type": "function"
    },
    "kotlin.collections.toIntArray()": {
        "size": 1299,
        "type": "function"
    },
    "kotlin.collections.reverse(Int, Int)": {
        "size": 1315,
        "type": "function"
    },
    "kotlin.collections.reversed()": {
        "size": 455,
        "type": "function"
    },
    "kotlin.collections.reversedArray()": {
        "size": 1015,
        "type": "function"
    },
    "kotlin.collections.drop(Int)": {
        "size": 4795,
        "type": "function"
    },
    "kotlin.collections.dropLast(Int)": {
        "size": 1095,
        "type": "function"
    },
    "kotlin.collections.take(Int)": {
        "size": 2238,
        "type": "function"
    },
    "kotlin.collections.takeLast(Int)": {
        "size": 2682,
        "type": "function"
    },
    "kotlin.collections.filterNotNull()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.collections.asSequence()": {
        "size": 429,
        "type": "function"
    },
    "kotlin.collections.sortDescending()": {
        "size": 466,
        "type": "function"
    },
    "kotlin.collections.sortDescending(Int, Int)": {
        "size": 404,
        "type": "function"
    },
    "kotlin.collections.sorted()": {
        "size": 1812,
        "type": "function"
    },
    "kotlin.collections.sortedDescending()": {
        "size": 769,
        "type": "function"
    },
    "kotlin.collections.sortedArray()": {
        "size": 828,
        "type": "function"
    },
    "kotlin.collections.sortedArrayDescending()": {
        "size": 848,
        "type": "function"
    },
    "kotlin.collections.toLongArray()": {
        "size": 1309,
        "type": "function"
    },
    "kotlin.collections.toCharArray()": {
        "size": 1309,
        "type": "function"
    },
    "kotlin.collections.toByteArray()": {
        "size": 1309,
        "type": "function"
    },
    "kotlin.collections.toDoubleArray()": {
        "size": 1329,
        "type": "function"
    },
    "kotlin.collections.sortedWith(Comparator<in T>)": {
        "size": 1862,
        "type": "function"
    },
    "kotlin.collections.sortedWith(Comparator<in Int>)": {
        "size": 588,
        "type": "function"
    },
    "kotlin.collections.sortedArrayWith(Comparator<in T>)": {
        "size": 755,
        "type": "function"
    },
    "kotlin.collections.shuffle(Random)": {
        "size": 1142,
        "type": "function"
    },
    "kotlin.collections.toMutableList()": {
        "size": 681,
        "type": "function"
    },
    "kotlin.collections.getOrNull(Int)": {
        "size": 506,
        "type": "function"
    },
    "kotlin.collections.contains(Char)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.collections.single()": {
        "size": 701,
        "type": "function"
    },
    "kotlin.collections.toCollection(C)": {
        "size": 625,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<T, CharSequence>?)": {
        "size": 1816,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Int, CharSequence>?)": {
        "size": 1986,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Char, CharSequence>?)": {
        "size": 1963,
        "type": "function"
    },
    "kotlin.collections.filterNotNullTo(C)": {
        "size": 692,
        "type": "function"
    },
    "kotlin.collections.lastIndexOf(Char)": {
        "size": 736,
        "type": "function"
    },
    "kotlin.collections.contains(Int)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.collections.lastIndexOf(Int)": {
        "size": 734,
        "type": "function"
    },
    "kotlin.collections.lastIndexOf(Long)": {
        "size": 736,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Long, CharSequence>?)": {
        "size": 424,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Long, CharSequence>?, Int, Any?)": {
        "size": 1689,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Double, CharSequence>?)": {
        "size": 428,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Double, CharSequence>?, Int, Any?)": {
        "size": 1693,
        "type": "function"
    },
    "kotlin.collections.contains(Byte)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.collections.lastIndexOf(Byte)": {
        "size": 788,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Byte, CharSequence>?)": {
        "size": 424,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Byte, CharSequence>?, Int, Any?)": {
        "size": 1689,
        "type": "function"
    },
    "kotlin.collections.contains(Boolean)": {
        "size": 136,
        "type": "function"
    },
    "kotlin.collections.lastIndexOf(Boolean)": {
        "size": 742,
        "type": "function"
    },
    "kotlin.collections.contains(Short)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.collections.lastIndexOf(Short)": {
        "size": 792,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Long, CharSequence>?)": {
        "size": 1992,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Double, CharSequence>?)": {
        "size": 2004,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Byte, CharSequence>?)": {
        "size": 1992,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Short, CharSequence>?)": {
        "size": 426,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Short, CharSequence>?, Int, Any?)": {
        "size": 1691,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Float, CharSequence>?)": {
        "size": 426,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Float, CharSequence>?, Int, Any?)": {
        "size": 1691,
        "type": "function"
    },
    "kotlin.collections.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Boolean, CharSequence>?)": {
        "size": 430,
        "type": "function"
    },
    "kotlin.collections.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<Boolean, CharSequence>?, Int, Any?)": {
        "size": 1695,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Short, CharSequence>?)": {
        "size": 1998,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Float, CharSequence>?)": {
        "size": 1998,
        "type": "function"
    },
    "kotlin.collections.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<Boolean, CharSequence>?)": {
        "size": 2010,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(IntArray)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.$this_asIterable": {
        "size": 61,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.<init>(Array<out T>)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.$this_asSequence": {
        "size": 61,
        "type": "field"
    },
    "kotlin.collections.joinTo$default(A, CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<T, CharSequence>?, Int, Any?)": {
        "size": 1733,
        "type": "function"
    },
    "kotlin.collections.plus(Iterable<T>)": {
        "size": 1168,
        "type": "function"
    },
    "kotlin.collections.plus(Array<out T>)": {
        "size": 556,
        "type": "function"
    },
    "kotlin.collections.distinct()": {
        "size": 98,
        "type": "function"
    },
    "kotlin.collections.toShortArray()": {
        "size": 682,
        "type": "function"
    },
    "kotlin.collections.toFloatArray()": {
        "size": 682,
        "type": "function"
    },
    "kotlin.collections.toBooleanArray()": {
        "size": 698,
        "type": "function"
    },
    "kotlin.collections.none()": {
        "size": 376,
        "type": "function"
    },
    "kotlin.collections.firstOrNull()": {
        "size": 766,
        "type": "function"
    },
    "kotlin.collections.zip(Iterable<R>)": {
        "size": 1383,
        "type": "function"
    },
    "kotlin.collections.plus(T)": {
        "size": 426,
        "type": "function"
    },
    "kotlin.collections.plus(Sequence<T>)": {
        "size": 360,
        "type": "function"
    },
    "kotlin.collections.minus(T)": {
        "size": 1046,
        "type": "function"
    },
    "kotlin.collections.minus(Iterable<T>)": {
        "size": 1170,
        "type": "function"
    },
    "kotlin.collections.minus(Array<out T>)": {
        "size": 1131,
        "type": "function"
    },
    "kotlin.collections.minus(Sequence<T>)": {
        "size": 1053,
        "type": "function"
    },
    "kotlin.collections.requireNoNulls()": {
        "size": 658,
        "type": "function"
    },
    "kotlin.collections.toMutableSet()": {
        "size": 420,
        "type": "function"
    },
    "kotlin.collections.elementAt(Int)": {
        "size": 409,
        "type": "function"
    },
    "kotlin.collections.elementAtOrElse(Int, Function1<Int, T>)": {
        "size": 1343,
        "type": "function"
    },
    "kotlin.collections.elementAtOrNull(Int)": {
        "size": 742,
        "type": "function"
    },
    "kotlin.collections.lastOrNull()": {
        "size": 955,
        "type": "function"
    },
    "kotlin.collections.zipWithNext()": {
        "size": 984,
        "type": "function"
    },
    "kotlin.collections.chunked(Int)": {
        "size": 173,
        "type": "function"
    },
    "kotlin.collections.chunked(Int, Function1<List<T>, R>)": {
        "size": 237,
        "type": "function"
    },
    "kotlin.collections.windowed(Int, Int, Boolean)": {
        "size": 4204,
        "type": "function"
    },
    "kotlin.collections.windowed$default(Int, Int?, Boolean?, Int, Any?)": {
        "size": 813,
        "type": "function"
    },
    "kotlin.collections.windowed(Int, Int, Boolean, Function1<List<T>, R>)": {
        "size": 2533,
        "type": "function"
    },
    "kotlin.collections.windowed$default(Int, Int?, Boolean?, Function1<List<T>, R>, Int, Any?)": {
        "size": 877,
        "type": "function"
    },
    "kotlin.collections.any()": {
        "size": 375,
        "type": "function"
    },
    "kotlin.collections.singleOrNull()": {
        "size": 842,
        "type": "function"
    },
    "kotlin.collections.withIndex()": {
        "size": 266,
        "type": "function"
    },
    "kotlin.collections.count()": {
        "size": 1381,
        "type": "function"
    },
    "kotlin.collections.union(Iterable<T>)": {
        "size": 199,
        "type": "function"
    },
    "kotlin.collections.subtract(Iterable<T>)": {
        "size": 205,
        "type": "function"
    },
    "kotlin.collections.intersect(Iterable<T>)": {
        "size": 206,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(Iterable<T>)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.collections.elementAt$lambda": {
        "size": 930,
        "type": "class"
    },
    "kotlin.collections.elementAt$lambda.<init>(Int)": {
        "size": 112,
        "type": "function"
    },
    "kotlin.collections.elementAt$lambda.invoke(Int)": {
        "size": 400,
        "type": "function"
    },
    "kotlin.collections.elementAt$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "kotlin.collections.elementAt$lambda.$index": {
        "size": 42,
        "type": "field"
    },
    "kotlin.collections.withIndex$lambda": {
        "size": 598,
        "type": "class"
    },
    "kotlin.collections.withIndex$lambda.<init>(Iterable<T>)": {
        "size": 147,
        "type": "function"
    },
    "kotlin.collections.withIndex$lambda.invoke()": {
        "size": 235,
        "type": "function"
    },
    "kotlin.collections.withIndex$lambda.$this_withIndex": {
        "size": 59,
        "type": "field"
    },
    "kotlin.comparisons.maxOf(T, T, Comparator<in T>)": {
        "size": 203,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(T, T, T, Comparator<in T>)": {
        "size": 210,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(T, Array<out T>, Comparator<in T>)": {
        "size": 733,
        "type": "function"
    },
    "kotlin.comparisons.minOf(T, T, Comparator<in T>)": {
        "size": 203,
        "type": "function"
    },
    "kotlin.comparisons.minOf(T, T, T, Comparator<in T>)": {
        "size": 210,
        "type": "function"
    },
    "kotlin.comparisons.minOf(T, Array<out T>, Comparator<in T>)": {
        "size": 733,
        "type": "function"
    },
    "kotlin.text.titlecaseImpl()": {
        "size": 761,
        "type": "function"
    },
    "kotlin.ranges.until(Int)": {
        "size": 485,
        "type": "function"
    },
    "kotlin.ranges.until(Char)": {
        "size": 605,
        "type": "function"
    },
    "kotlin.ranges.until(Byte)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.ranges.until(Long)": {
        "size": 626,
        "type": "function"
    },
    "kotlin.ranges.until(Short)": {
        "size": 368,
        "type": "function"
    },
    "kotlin.ranges.coerceAtLeast(Int)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.ranges.coerceAtMost(Int)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.ranges.contains(Long)": {
        "size": 626,
        "type": "function"
    },
    "kotlin.ranges.toIntExactOrNull()": {
        "size": 389,
        "type": "function"
    },
    "kotlin.ranges.downTo(Int)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.ranges.step(Int)": {
        "size": 578,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(T?, T?)": {
        "size": 1524,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(Int, Int)": {
        "size": 681,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(ClosedRange<Int>)": {
        "size": 1009,
        "type": "function"
    },
    "kotlin.ranges.coerceAtLeast(Long)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.ranges.coerceAtMost(Long)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(Long, Long)": {
        "size": 685,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(ClosedRange<Long>)": {
        "size": 1021,
        "type": "function"
    },
    "kotlin.ranges.coerceAtLeast(Double)": {
        "size": 161,
        "type": "function"
    },
    "kotlin.ranges.coerceAtMost(Double)": {
        "size": 160,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(Double, Double)": {
        "size": 687,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(ClosedFloatingPointRange<T>)": {
        "size": 894,
        "type": "function"
    },
    "kotlin.ranges.coerceAtLeast(T)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.ranges.coerceAtMost(T)": {
        "size": 188,
        "type": "function"
    },
    "kotlin.ranges.coerceIn(ClosedRange<T>)": {
        "size": 833,
        "type": "function"
    },
    "kotlin.ranges.downTo(Byte)": {
        "size": 197,
        "type": "function"
    },
    "kotlin.ranges.downTo(Short)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.ranges.downTo(Long)": {
        "size": 172,
        "type": "function"
    },
    "kotlin.ranges.downTo(Char)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.ranges.step(Long)": {
        "size": 636,
        "type": "function"
    },
    "kotlin.ranges.reversed()": {
        "size": 495,
        "type": "function"
    },
    "kotlin.ranges.contains(Float)": {
        "size": 302,
        "type": "function"
    },
    "kotlin.ranges.contains(Double)": {
        "size": 206,
        "type": "function"
    },
    "kotlin.ranges.first()": {
        "size": 369,
        "type": "function"
    },
    "kotlin.ranges.firstOrNull()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.ranges.last()": {
        "size": 367,
        "type": "function"
    },
    "kotlin.ranges.lastOrNull()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.ranges.random(Random)": {
        "size": 1125,
        "type": "function"
    },
    "kotlin.ranges.contains(Short)": {
        "size": 200,
        "type": "function"
    },
    "kotlin.ranges.contains(Byte)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.ranges.contains(Int)": {
        "size": 196,
        "type": "function"
    },
    "kotlin.ranges.randomOrNull(Random)": {
        "size": 773,
        "type": "function"
    },
    "kotlin.sequences.toList()": {
        "size": 490,
        "type": "function"
    },
    "kotlin.sequences.map(Function1<T, R>)": {
        "size": 167,
        "type": "function"
    },
    "kotlin.sequences.take(Int)": {
        "size": 1247,
        "type": "function"
    },
    "kotlin.sequences.minOrNull()": {
        "size": 889,
        "type": "function"
    },
    "kotlin.sequences.maxOrNull()": {
        "size": 780,
        "type": "function"
    },
    "kotlin.sequences.minWithOrNull(Comparator<in T>)": {
        "size": 527,
        "type": "function"
    },
    "kotlin.sequences.maxWithOrNull(Comparator<in T>)": {
        "size": 527,
        "type": "function"
    },
    "kotlin.sequences.sum()": {
        "size": 808,
        "type": "function"
    },
    "kotlin.sequences.average()": {
        "size": 1853,
        "type": "function"
    },
    "kotlin.sequences.count()": {
        "size": 1164,
        "type": "function"
    },
    "kotlin.sequences.filter(Function1<T, Boolean>)": {
        "size": 175,
        "type": "function"
    },
    "kotlin.sequences.requireNoNulls()": {
        "size": 203,
        "type": "function"
    },
    "kotlin.sequences.filterIndexed(Function2<@ParameterName(name = \"index\") Int, T, Boolean>)": {
        "size": 486,
        "type": "function"
    },
    "kotlin.sequences.filterNot(Function1<T, Boolean>)": {
        "size": 179,
        "type": "function"
    },
    "kotlin.sequences.filterNotNull()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.sequences.takeWhile(Function1<T, Boolean>)": {
        "size": 161,
        "type": "function"
    },
    "kotlin.sequences.mapIndexed(Function2<@ParameterName(name = \"index\") Int, T, R>)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.sequences.mapNotNull(Function1<T, R?>)": {
        "size": 194,
        "type": "function"
    },
    "kotlin.sequences.mapIndexedNotNull(Function2<@ParameterName(name = \"index\") Int, T, R?>)": {
        "size": 244,
        "type": "function"
    },
    "kotlin.sequences.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<T, CharSequence>?)": {
        "size": 437,
        "type": "function"
    },
    "kotlin.sequences.joinToString$default(CharSequence?, CharSequence?, CharSequence?, Int?, CharSequence?, Function1<T, CharSequence>?, Int, Any?)": {
        "size": 1702,
        "type": "function"
    },
    "kotlin.sequences.withIndex()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.sequences.onEach(Function1<T, Unit>)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.sequences.onEachIndexed(Function2<@ParameterName(name = \"index\") Int, T, Unit>)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.sequences.scan(R, Function2<@ParameterName(name = \"acc\") R, T, R>)": {
        "size": 330,
        "type": "function"
    },
    "kotlin.sequences.runningFold(R, Function2<@ParameterName(name = \"acc\") R, T, R>)": {
        "size": 366,
        "type": "function"
    },
    "kotlin.sequences.scanIndexed(R, Function3<@ParameterName(name = \"index\") Int, @ParameterName(name = \"acc\") R, T, R>)": {
        "size": 380,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed(R, Function3<@ParameterName(name = \"index\") Int, @ParameterName(name = \"acc\") R, T, R>)": {
        "size": 423,
        "type": "function"
    },
    "kotlin.sequences.runningReduce(Function2<@ParameterName(name = \"acc\") S, T, S>)": {
        "size": 400,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed(Function3<@ParameterName(name = \"index\") Int, @ParameterName(name = \"acc\") S, T, S>)": {
        "size": 394,
        "type": "function"
    },
    "kotlin.sequences.drop(Int)": {
        "size": 1235,
        "type": "function"
    },
    "kotlin.sequences.dropWhile(Function1<T, Boolean>)": {
        "size": 161,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext(Function2<@ParameterName(name = \"a\") T, @ParameterName(name = \"b\") T, R>)": {
        "size": 359,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext()": {
        "size": 223,
        "type": "function"
    },
    "kotlin.sequences.chunked(Int)": {
        "size": 177,
        "type": "function"
    },
    "kotlin.sequences.chunked(Int, Function1<List<T>, R>)": {
        "size": 241,
        "type": "function"
    },
    "kotlin.sequences.single()": {
        "size": 388,
        "type": "function"
    },
    "kotlin.sequences.none()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.sequences.windowed(Int, Int, Boolean)": {
        "size": 253,
        "type": "function"
    },
    "kotlin.sequences.windowed$default(Int, Int?, Boolean?, Int, Any?)": {
        "size": 817,
        "type": "function"
    },
    "kotlin.sequences.windowed(Int, Int, Boolean, Function1<List<T>, R>)": {
        "size": 329,
        "type": "function"
    },
    "kotlin.sequences.windowed$default(Int, Int?, Boolean?, Function1<List<T>, R>, Int, Any?)": {
        "size": 881,
        "type": "function"
    },
    "kotlin.sequences.zip(Sequence<R>, Function2<@ParameterName(name = \"a\") T, @ParameterName(name = \"b\") R, V>)": {
        "size": 324,
        "type": "function"
    },
    "kotlin.sequences.plus(T)": {
        "size": 175,
        "type": "function"
    },
    "kotlin.sequences.plus(Iterable<T>)": {
        "size": 175,
        "type": "function"
    },
    "kotlin.sequences.plus(Array<out T>)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.sequences.plus(Sequence<T>)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.sequences.minus(T)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.sequences.minus(Iterable<T>)": {
        "size": 202,
        "type": "function"
    },
    "kotlin.sequences.minus(Array<out T>)": {
        "size": 368,
        "type": "function"
    },
    "kotlin.sequences.minus(Sequence<T>)": {
        "size": 202,
        "type": "function"
    },
    "kotlin.sequences.flatMap(Function1<T, Sequence<R>>)": {
        "size": 276,
        "type": "function"
    },
    "kotlin.sequences.flatMap(Function1<T, Iterable<R>>)": {
        "size": 436,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed(Function2<@ParameterName(name = \"index\") Int, T, Sequence<R>>)": {
        "size": 478,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed(Function2<@ParameterName(name = \"index\") Int, T, Iterable<R>>)": {
        "size": 478,
        "type": "function"
    },
    "kotlin.sequences.distinct()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.sequences.distinctBy(Function1<T, K>)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.sequences.sorted()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.sequences.sortedDescending()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.sequences.sortedWith(Comparator<in T>)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.sequences.toSet()": {
        "size": 482,
        "type": "function"
    },
    "kotlin.sequences.zip(Sequence<R>)": {
        "size": 250,
        "type": "function"
    },
    "kotlin.sequences.last()": {
        "size": 315,
        "type": "function"
    },
    "kotlin.sequences.asIterable()": {
        "size": 253,
        "type": "function"
    },
    "kotlin.sequences.joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, Function1<T, CharSequence>?)": {
        "size": 1616,
        "type": "function"
    },
    "kotlin.sequences.toMutableList()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.sequences.toCollection(C)": {
        "size": 373,
        "type": "function"
    },
    "kotlin.sequences.requireNoNulls$lambda": {
        "size": 985,
        "type": "class"
    },
    "kotlin.sequences.requireNoNulls$lambda.<init>(Sequence<T?>)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.sequences.requireNoNulls$lambda.invoke(T?)": {
        "size": 570,
        "type": "function"
    },
    "kotlin.sequences.requireNoNulls$lambda.invoke(P1)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.sequences.requireNoNulls$lambda.$this_requireNoNulls": {
        "size": 65,
        "type": "field"
    },
    "kotlin.sequences.filterIndexed$lambda": {
        "size": 1113,
        "type": "class"
    },
    "kotlin.sequences.filterIndexed$lambda.<init>(Function2<@ParameterName(name = \"index\") Int, T, Boolean>)": {
        "size": 178,
        "type": "function"
    },
    "kotlin.sequences.filterIndexed$lambda.invoke(IndexedValue<T>)": {
        "size": 389,
        "type": "function"
    },
    "kotlin.sequences.filterIndexed$lambda.invoke(P1)": {
        "size": 320,
        "type": "function"
    },
    "kotlin.sequences.filterIndexed$lambda.$predicate": {
        "size": 100,
        "type": "field"
    },
    "kotlin.sequences.filterIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.filterNotNull$lambda": {
        "size": 352,
        "type": "class"
    },
    "kotlin.sequences.filterNotNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.filterNotNull$lambda.invoke(T?)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.sequences.filterNotNull$lambda.invoke(P1)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.sequences.onEach$lambda": {
        "size": 530,
        "type": "class"
    },
    "kotlin.sequences.onEach$lambda.<init>(Function1<T, Unit>)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.sequences.onEach$lambda.invoke(T)": {
        "size": 263,
        "type": "function"
    },
    "kotlin.sequences.onEach$lambda.$action": {
        "size": 58,
        "type": "field"
    },
    "kotlin.sequences.onEachIndexed$lambda": {
        "size": 1074,
        "type": "class"
    },
    "kotlin.sequences.onEachIndexed$lambda.<init>(Function2<@ParameterName(name = \"index\") Int, T, Unit>)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.sequences.onEachIndexed$lambda.invoke(Int, T)": {
        "size": 379,
        "type": "function"
    },
    "kotlin.sequences.onEachIndexed$lambda.invoke(P1, P2)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.sequences.onEachIndexed$lambda.$action": {
        "size": 94,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda": {
        "size": 5848,
        "type": "class"
    },
    "kotlin.sequences.runningFold$slambda.<init>(R, Sequence<T>, Function2<@ParameterName(name = \"acc\") R, T, R>, Continuation<Any?>?)": {
        "size": 381,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.invoke(SequenceScope<R>, Continuation<Unit>)": {
        "size": 389,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.invoke(P1, Continuation<R>)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.$initial": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda.$this_runningFold": {
        "size": 61,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda.$operation": {
        "size": 90,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda.$this$sequence": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda.doResume()": {
        "size": 3132,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.accumulator0": {
        "size": 28,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda.tmp0_iterator1": {
        "size": 58,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda.element2": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.runningFold$slambda.create(SequenceScope<R>, Continuation<*>)": {
        "size": 468,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.runningFold$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda": {
        "size": 7000,
        "type": "class"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.<init>(R, Sequence<T>, Function3<@ParameterName(name = \"index\") Int, @ParameterName(name = \"acc\") R, T, R>, Continuation<Any?>?)": {
        "size": 438,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.invoke(SequenceScope<R>, Continuation<Unit>)": {
        "size": 410,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.invoke(P1, Continuation<R>)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.$initial": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.$this_runningFoldIndexed": {
        "size": 68,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.$operation": {
        "size": 126,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.$this$sequence": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.doResume()": {
        "size": 4029,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.index0": {
        "size": 24,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.accumulator1": {
        "size": 28,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.tmp0_iterator2": {
        "size": 58,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.element3": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.create(SequenceScope<R>, Continuation<*>)": {
        "size": 517,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.runningFoldIndexed$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda": {
        "size": 6149,
        "type": "class"
    },
    "kotlin.sequences.runningReduce$slambda.<init>(Sequence<T>, Function2<@ParameterName(name = \"acc\") S, T, S>, Continuation<Any?>?)": {
        "size": 344,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.invoke(SequenceScope<S>, Continuation<Unit>)": {
        "size": 395,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.invoke(P1, Continuation<R>)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.$this_runningReduce": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.runningReduce$slambda.$operation": {
        "size": 90,
        "type": "field"
    },
    "kotlin.sequences.runningReduce$slambda.$this$sequence": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.runningReduce$slambda.doResume()": {
        "size": 3541,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.iterator0": {
        "size": 53,
        "type": "field"
    },
    "kotlin.sequences.runningReduce$slambda.accumulator1": {
        "size": 28,
        "type": "field"
    },
    "kotlin.sequences.runningReduce$slambda.create(SequenceScope<S>, Continuation<*>)": {
        "size": 448,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.runningReduce$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda": {
        "size": 7301,
        "type": "class"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.<init>(Sequence<T>, Function3<@ParameterName(name = \"index\") Int, @ParameterName(name = \"acc\") S, T, S>, Continuation<Any?>?)": {
        "size": 401,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.invoke(SequenceScope<S>, Continuation<Unit>)": {
        "size": 416,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.invoke(P1, Continuation<R>)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.$this_runningReduceIndexed": {
        "size": 70,
        "type": "field"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.$operation": {
        "size": 126,
        "type": "field"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.$this$sequence": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.doResume()": {
        "size": 4438,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.iterator0": {
        "size": 53,
        "type": "field"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.accumulator1": {
        "size": 28,
        "type": "field"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.index2": {
        "size": 24,
        "type": "field"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.create(SequenceScope<S>, Continuation<*>)": {
        "size": 497,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.runningReduceIndexed$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda": {
        "size": 5492,
        "type": "class"
    },
    "kotlin.sequences.zipWithNext$slambda.<init>(Sequence<T>, Function2<@ParameterName(name = \"a\") T, @ParameterName(name = \"b\") T, R>, Continuation<Any?>?)": {
        "size": 363,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.invoke(SequenceScope<R>, Continuation<Unit>)": {
        "size": 383,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.invoke(P1, Continuation<R>)": {
        "size": 362,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.$this_zipWithNext": {
        "size": 61,
        "type": "field"
    },
    "kotlin.sequences.zipWithNext$slambda.$transform": {
        "size": 115,
        "type": "field"
    },
    "kotlin.sequences.zipWithNext$slambda.$this$result": {
        "size": 61,
        "type": "field"
    },
    "kotlin.sequences.zipWithNext$slambda.doResume()": {
        "size": 2887,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.iterator0": {
        "size": 53,
        "type": "field"
    },
    "kotlin.sequences.zipWithNext$slambda.current1": {
        "size": 24,
        "type": "field"
    },
    "kotlin.sequences.zipWithNext$slambda.next2": {
        "size": 39,
        "type": "field"
    },
    "kotlin.sequences.zipWithNext$slambda.create(SequenceScope<R>, Continuation<*>)": {
        "size": 428,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$lambda": {
        "size": 397,
        "type": "class"
    },
    "kotlin.sequences.zipWithNext$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$lambda.invoke(T, T)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.sequences.zipWithNext$lambda.invoke(P1, P2)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.sequences.minus$o$iterator$lambda": {
        "size": 965,
        "type": "class"
    },
    "kotlin.sequences.minus$o$iterator$lambda.<init>($closureBox$, T)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.sequences.minus$o$iterator$lambda.invoke(T)": {
        "size": 478,
        "type": "function"
    },
    "kotlin.sequences.minus$o$iterator$lambda.invoke(P1)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.sequences.minus$o$iterator$lambda.$removed": {
        "size": 53,
        "type": "field"
    },
    "kotlin.sequences.minus$o$iterator$lambda.$element": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>": {
        "size": 2858,
        "type": "class"
    },
    "kotlin.sequences.<no name provided>.<init>(Sequence<T>, T)": {
        "size": 178,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.iterator()": {
        "size": 610,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.$this_minus": {
        "size": 55,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.$element": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.minus$o$iterator$lambda.<init>(Collection<T>)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.sequences.minus$o$iterator$lambda.$other": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.<init>(Iterable<T>, Sequence<T>)": {
        "size": 191,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.$elements": {
        "size": 54,
        "type": "field"
    },
    "kotlin.sequences.minus$o$iterator$lambda.<init>(Array<out T>)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.sequences.minus$o$iterator$lambda.$elements": {
        "size": 54,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.<init>(Sequence<T>, Array<out T>)": {
        "size": 192,
        "type": "function"
    },
    "kotlin.sequences.minus$o$iterator$lambda.<init>(List<T>)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(Sequence<T>, Sequence<T>)": {
        "size": 191,
        "type": "function"
    },
    "kotlin.sequences.Sequence$iterator$ref": {
        "size": 666,
        "type": "class"
    },
    "kotlin.sequences.Sequence$iterator$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.Sequence$iterator$ref.invoke(Sequence<R>)": {
        "size": 87,
        "type": "function"
    },
    "kotlin.sequences.Sequence$iterator$ref.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.sequences.Sequence$iterator$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.Iterable$iterator$ref": {
        "size": 666,
        "type": "class"
    },
    "kotlin.sequences.Iterable$iterator$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.Iterable$iterator$ref.invoke(Iterable<R>)": {
        "size": 87,
        "type": "function"
    },
    "kotlin.sequences.Iterable$iterator$ref.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.sequences.Iterable$iterator$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.distinct$lambda": {
        "size": 198,
        "type": "class"
    },
    "kotlin.sequences.distinct$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.distinct$lambda.invoke(T)": {
        "size": 56,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(Sequence<T>)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.$this_sorted": {
        "size": 56,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.<init>(Sequence<T>, Comparator<in T>)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.$this_sortedWith": {
        "size": 60,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.$comparator": {
        "size": 60,
        "type": "field"
    },
    "kotlin.sequences.zip$lambda": {
        "size": 341,
        "type": "class"
    },
    "kotlin.sequences.zip$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.zip$lambda.invoke(T, R)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.sequences.zip$lambda.invoke(P1, P2)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.$this_asIterable": {
        "size": 60,
        "type": "field"
    },
    "kotlin.text.asSequence()": {
        "size": 542,
        "type": "function"
    },
    "kotlin.text.asIterable()": {
        "size": 538,
        "type": "function"
    },
    "kotlin.text.toList()": {
        "size": 354,
        "type": "function"
    },
    "kotlin.text.take(Int)": {
        "size": 1005,
        "type": "function"
    },
    "kotlin.text.first()": {
        "size": 284,
        "type": "function"
    },
    "kotlin.text.last()": {
        "size": 306,
        "type": "function"
    },
    "kotlin.text.getOrNull(Int)": {
        "size": 281,
        "type": "function"
    },
    "kotlin.text.toHashSet()": {
        "size": 263,
        "type": "function"
    },
    "kotlin.text.chunked(Int)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.text.takeLast(Int)": {
        "size": 1042,
        "type": "function"
    },
    "kotlin.text.drop(Int)": {
        "size": 1025,
        "type": "function"
    },
    "kotlin.text.dropLast(Int)": {
        "size": 997,
        "type": "function"
    },
    "kotlin.text.slice(IntRange)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.text.slice(Iterable<Int>)": {
        "size": 572,
        "type": "function"
    },
    "kotlin.text.reversed()": {
        "size": 98,
        "type": "function"
    },
    "kotlin.text.firstOrNull()": {
        "size": 271,
        "type": "function"
    },
    "kotlin.text.random(Random)": {
        "size": 373,
        "type": "function"
    },
    "kotlin.text.randomOrNull(Random)": {
        "size": 420,
        "type": "function"
    },
    "kotlin.text.zipWithNext()": {
        "size": 1639,
        "type": "function"
    },
    "kotlin.text.chunked(Int, Function1<CharSequence, R>)": {
        "size": 230,
        "type": "function"
    },
    "kotlin.text.chunkedSequence(Int)": {
        "size": 236,
        "type": "function"
    },
    "kotlin.text.windowed(Int, Int, Boolean)": {
        "size": 293,
        "type": "function"
    },
    "kotlin.text.windowed$default(Int, Int?, Boolean?, Int, Any?)": {
        "size": 799,
        "type": "function"
    },
    "kotlin.text.windowed(Int, Int, Boolean, Function1<CharSequence, R>)": {
        "size": 1198,
        "type": "function"
    },
    "kotlin.text.windowed$default(Int, Int?, Boolean?, Function1<CharSequence, R>, Int, Any?)": {
        "size": 870,
        "type": "function"
    },
    "kotlin.text.windowedSequence(Int, Int, Boolean)": {
        "size": 321,
        "type": "function"
    },
    "kotlin.text.windowedSequence$default(Int, Int?, Boolean?, Int, Any?)": {
        "size": 819,
        "type": "function"
    },
    "kotlin.text.windowedSequence(Int, Int, Boolean, Function1<CharSequence, R>)": {
        "size": 658,
        "type": "function"
    },
    "kotlin.text.toMutableList()": {
        "size": 216,
        "type": "function"
    },
    "kotlin.text.toCollection(C)": {
        "size": 625,
        "type": "function"
    },
    "kotlin.text.chunkedSequence(Int, Function1<CharSequence, R>)": {
        "size": 250,
        "type": "function"
    },
    "kotlin.text.<no name provided>": {
        "size": 5256,
        "type": "class"
    },
    "kotlin.text.<no name provided>.<init>(CharSequence)": {
        "size": 176,
        "type": "function"
    },
    "kotlin.text.<no name provided>.iterator()": {
        "size": 284,
        "type": "function"
    },
    "kotlin.text.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.<no name provided>.$this_asSequence": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.<no name provided>.$this_asIterable": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.chunkedSequence$lambda": {
        "size": 558,
        "type": "class"
    },
    "kotlin.text.chunkedSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.chunkedSequence$lambda.invoke(CharSequence)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.chunkedSequence$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "kotlin.text.windowed$lambda": {
        "size": 551,
        "type": "class"
    },
    "kotlin.text.windowed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.windowed$lambda.invoke(CharSequence)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.windowed$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "kotlin.text.windowedSequence$lambda": {
        "size": 1741,
        "type": "class"
    },
    "kotlin.text.windowedSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.windowedSequence$lambda.invoke(CharSequence)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.windowedSequence$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "kotlin.text.windowedSequence$lambda.<init>(Int, CharSequence, Function1<CharSequence, R>)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.text.windowedSequence$lambda.invoke(Int)": {
        "size": 863,
        "type": "function"
    },
    "kotlin.text.windowedSequence$lambda.$size": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.windowedSequence$lambda.$this_windowedSequence": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.windowedSequence$lambda.$transform": {
        "size": 69,
        "type": "field"
    },
    "kotlin.collections.copyInto(UIntArray, Int, Int, Int)": {
        "size": 452,
        "type": "function"
    },
    "kotlin.collections.contentEquals(UIntArray?)": {
        "size": 660,
        "type": "function"
    },
    "kotlin.collections.contentToString()": {
        "size": 708,
        "type": "function"
    },
    "kotlin.collections.copyInto(ULongArray, Int, Int, Int)": {
        "size": 457,
        "type": "function"
    },
    "kotlin.collections.contentEquals(ULongArray?)": {
        "size": 670,
        "type": "function"
    },
    "kotlin.collections.copyInto(UByteArray, Int, Int, Int)": {
        "size": 457,
        "type": "function"
    },
    "kotlin.collections.contentEquals(UByteArray?)": {
        "size": 670,
        "type": "function"
    },
    "kotlin.collections.sort(Int, Int)": {
        "size": 352,
        "type": "function"
    },
    "kotlin.collections.contentHashCode()": {
        "size": 1019,
        "type": "function"
    },
    "kotlin.collections.contentEquals(UShortArray?)": {
        "size": 680,
        "type": "function"
    },
    "kotlin.collections.toTypedArray()": {
        "size": 1420,
        "type": "function"
    },
    "kotlin.collections.copyOf()": {
        "size": 217,
        "type": "function"
    },
    "kotlin.collections.plus(Collection<UInt>)": {
        "size": 1086,
        "type": "function"
    },
    "kotlin.collections.toULongArray()": {
        "size": 2165,
        "type": "function"
    },
    "kotlin.collections.minWithOrNull(Comparator<in UByte>)": {
        "size": 1314,
        "type": "function"
    },
    "kotlin.collections.minWithOrNull(Comparator<in UShort>)": {
        "size": 1327,
        "type": "function"
    },
    "kotlin.collections.minWithOrNull(Comparator<in UInt>)": {
        "size": 1301,
        "type": "function"
    },
    "kotlin.collections.minWithOrNull(Comparator<in ULong>)": {
        "size": 1314,
        "type": "function"
    },
    "kotlin.collections.maxWithOrNull(Comparator<in UByte>)": {
        "size": 1314,
        "type": "function"
    },
    "kotlin.collections.maxWithOrNull(Comparator<in UShort>)": {
        "size": 1327,
        "type": "function"
    },
    "kotlin.collections.maxWithOrNull(Comparator<in UInt>)": {
        "size": 1301,
        "type": "function"
    },
    "kotlin.collections.maxWithOrNull(Comparator<in ULong>)": {
        "size": 1314,
        "type": "function"
    },
    "kotlin.collections.zip(UByteArray)": {
        "size": 2011,
        "type": "function"
    },
    "kotlin.collections.zip(UShortArray)": {
        "size": 2029,
        "type": "function"
    },
    "kotlin.collections.fill(UByte, Int, Int)": {
        "size": 356,
        "type": "function"
    },
    "kotlin.collections.fill(UShort, Int, Int)": {
        "size": 360,
        "type": "function"
    },
    "kotlin.collections.fill(UInt, Int, Int)": {
        "size": 352,
        "type": "function"
    },
    "kotlin.collections.fill(ULong, Int, Int)": {
        "size": 356,
        "type": "function"
    },
    "kotlin.collections.withIndex$lambda.<init>(UByteArray)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.collections.withIndex$lambda.<init>(UShortArray)": {
        "size": 147,
        "type": "function"
    },
    "kotlin.collections.withIndex$lambda.<init>(UIntArray)": {
        "size": 145,
        "type": "function"
    },
    "kotlin.collections.withIndex$lambda.<init>(ULongArray)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.collections.toUIntArray()": {
        "size": 771,
        "type": "function"
    },
    "kotlin.collections.toUByteArray()": {
        "size": 780,
        "type": "function"
    },
    "kotlin.collections.toUShortArray()": {
        "size": 789,
        "type": "function"
    },
    "kotlin.comparisons.minOf(UByte, UByte)": {
        "size": 1097,
        "type": "function"
    },
    "kotlin.comparisons.minOf(UShort, UShort)": {
        "size": 1108,
        "type": "function"
    },
    "kotlin.comparisons.minOf(UInt, UInt)": {
        "size": 384,
        "type": "function"
    },
    "kotlin.comparisons.minOf(ULong, ULong)": {
        "size": 390,
        "type": "function"
    },
    "kotlin.comparisons.minOf(UByte, UByteArray)": {
        "size": 405,
        "type": "function"
    },
    "kotlin.comparisons.minOf(UShort, UShortArray)": {
        "size": 413,
        "type": "function"
    },
    "kotlin.comparisons.minOf(UInt, UIntArray)": {
        "size": 397,
        "type": "function"
    },
    "kotlin.comparisons.minOf(ULong, ULongArray)": {
        "size": 405,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(UByte, UByte)": {
        "size": 1097,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(UShort, UShort)": {
        "size": 1108,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(UInt, UInt)": {
        "size": 384,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(ULong, ULong)": {
        "size": 390,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(UByte, UByteArray)": {
        "size": 405,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(UShort, UShortArray)": {
        "size": 413,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(UInt, UIntArray)": {
        "size": 397,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(ULong, ULongArray)": {
        "size": 405,
        "type": "function"
    },
    "kotlin.ranges.until(UInt)": {
        "size": 1313,
        "type": "function"
    },
    "kotlin.ranges.until(ULong)": {
        "size": 1949,
        "type": "function"
    },
    "kotlin.ranges.until(UByte)": {
        "size": 2932,
        "type": "function"
    },
    "kotlin.ranges.until(UShort)": {
        "size": 2951,
        "type": "function"
    },
    "kotlin.ranges.downTo(UInt)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.ranges.downTo(UByte)": {
        "size": 647,
        "type": "function"
    },
    "kotlin.ranges.downTo(UShort)": {
        "size": 657,
        "type": "function"
    },
    "kotlin.ranges.downTo(ULong)": {
        "size": 247,
        "type": "function"
    },
    "kotlin.ranges.contains(UShort)": {
        "size": 408,
        "type": "function"
    },
    "kotlin.ranges.contains(UByte)": {
        "size": 403,
        "type": "function"
    },
    "kotlin.ranges.contains(ULong)": {
        "size": 1325,
        "type": "function"
    },
    "kotlin.ranges.contains(UInt)": {
        "size": 407,
        "type": "function"
    },
    "kotlin.Char(Int)": {
        "size": 1089,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection$toString$lambda": {
        "size": 678,
        "type": "class"
    },
    "kotlin.collections.AbstractCollection$toString$lambda.<init>(AbstractCollection<E>)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection$toString$lambda.invoke(E)": {
        "size": 296,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection$toString$lambda.invoke(P1)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection$toString$lambda.this$0": {
        "size": 60,
        "type": "field"
    },
    "kotlin.collections.AbstractCollection": {
        "size": 3499,
        "type": "class"
    },
    "kotlin.collections.AbstractCollection.<init>()": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.<get-size>()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.iterator()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.contains(@UnsafeVariance E)": {
        "size": 892,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.containsAll(Collection<@UnsafeVariance E>)": {
        "size": 943,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.isEmpty()": {
        "size": 192,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.toString()": {
        "size": 454,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.toArray()": {
        "size": 221,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.toArray(Array<T>)": {
        "size": 236,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.AbstractCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator": {
        "size": 2667,
        "type": "class"
    },
    "kotlin.collections.AbstractIterator.<init>()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.state": {
        "size": 25,
        "type": "field"
    },
    "kotlin.collections.AbstractIterator.nextValue": {
        "size": 26,
        "type": "field"
    },
    "kotlin.collections.AbstractIterator.hasNext()": {
        "size": 1348,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.next()": {
        "size": 314,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.tryToComputeNext()": {
        "size": 222,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.computeNext()": {
        "size": 38,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.setNext(T)": {
        "size": 109,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.done()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.AbstractIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.State_Ready_instance": {
        "size": 52,
        "type": "field"
    },
    "kotlin.collections.State_NotReady_instance": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.State_Done_instance": {
        "size": 51,
        "type": "field"
    },
    "kotlin.collections.State_Failed_instance": {
        "size": 53,
        "type": "field"
    },
    "kotlin.collections.State_entriesInitialized": {
        "size": 65,
        "type": "field"
    },
    "kotlin.collections.State_initEntries()": {
        "size": 382,
        "type": "function"
    },
    "kotlin.collections.State": {
        "size": 412,
        "type": "class"
    },
    "kotlin.collections.State.<init>(String, Int)": {
        "size": 139,
        "type": "function"
    },
    "kotlin.collections.State.compareTo(State)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.State.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.State.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.State.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.State_Ready_getInstance()": {
        "size": 95,
        "type": "function"
    },
    "kotlin.collections.State_NotReady_getInstance()": {
        "size": 101,
        "type": "function"
    },
    "kotlin.collections.State_Done_getInstance()": {
        "size": 93,
        "type": "function"
    },
    "kotlin.collections.State_Failed_getInstance()": {
        "size": 97,
        "type": "function"
    },
    "kotlin.collections.SubList.<init>(AbstractList<E>, Int, Int)": {
        "size": 507,
        "type": "function"
    },
    "kotlin.collections.IteratorImpl.<init>(AbstractList<E>)": {
        "size": 137,
        "type": "function"
    },
    "kotlin.collections.ListIteratorImpl.<init>(AbstractList<E>, Int)": {
        "size": 361,
        "type": "function"
    },
    "kotlin.collections.Companion.checkElementIndex(Int, Int)": {
        "size": 488,
        "type": "function"
    },
    "kotlin.collections.Companion.checkPositionIndex(Int, Int)": {
        "size": 489,
        "type": "function"
    },
    "kotlin.collections.Companion.checkRangeIndexes(Int, Int, Int)": {
        "size": 975,
        "type": "function"
    },
    "kotlin.collections.Companion.checkBoundsIndexes(Int, Int, Int)": {
        "size": 990,
        "type": "function"
    },
    "kotlin.collections.Companion.maxArraySize": {
        "size": 61,
        "type": "field"
    },
    "kotlin.collections.Companion.newCapacity(Int, Int)": {
        "size": 760,
        "type": "function"
    },
    "kotlin.collections.Companion.orderedHashCode(Collection<*>)": {
        "size": 838,
        "type": "function"
    },
    "kotlin.collections.Companion.orderedEquals(Collection<*>, Collection<*>)": {
        "size": 666,
        "type": "function"
    },
    "kotlin.collections.AbstractList": {
        "size": 4216,
        "type": "class"
    },
    "kotlin.collections.AbstractList.<init>()": {
        "size": 95,
        "type": "function"
    },
    "kotlin.collections.AbstractList.<get-size>()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.AbstractList.get(Int)": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.AbstractList.iterator()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.collections.AbstractList.indexOf(@UnsafeVariance E)": {
        "size": 1019,
        "type": "function"
    },
    "kotlin.collections.AbstractList.lastIndexOf(@UnsafeVariance E)": {
        "size": 801,
        "type": "function"
    },
    "kotlin.collections.AbstractList.listIterator()": {
        "size": 194,
        "type": "function"
    },
    "kotlin.collections.AbstractList.listIterator(Int)": {
        "size": 208,
        "type": "function"
    },
    "kotlin.collections.AbstractList.subList(Int, Int)": {
        "size": 232,
        "type": "function"
    },
    "kotlin.collections.AbstractList.equals(Any?)": {
        "size": 502,
        "type": "function"
    },
    "kotlin.collections.AbstractList.hashCode()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.collections.AbstractList.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.AbstractList.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.AbstractList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractList.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.AbstractList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(Iterator<Entry<K, V>>)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(AbstractMap<K, V>)": {
        "size": 144,
        "type": "function"
    },
    "kotlin.collections.AbstractMap$toString$lambda": {
        "size": 820,
        "type": "class"
    },
    "kotlin.collections.AbstractMap$toString$lambda.<init>(AbstractMap<K, V>)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.collections.AbstractMap$toString$lambda.invoke(Entry<K, V>)": {
        "size": 224,
        "type": "function"
    },
    "kotlin.collections.AbstractMap$toString$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.collections.AbstractMap$toString$lambda.this$0": {
        "size": 56,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.contains(@UnsafeVariance V)": {
        "size": 292,
        "type": "function"
    },
    "kotlin.collections.AbstractMap": {
        "size": 8400,
        "type": "class"
    },
    "kotlin.collections.AbstractMap.<init>()": {
        "size": 129,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.containsKey(K)": {
        "size": 231,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.containsValue(@UnsafeVariance V)": {
        "size": 1064,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.containsEntry(Entry<*, *>?)": {
        "size": 857,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.equals(Any?)": {
        "size": 1648,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.get(K)": {
        "size": 355,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.hashCode()": {
        "size": 216,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.isEmpty()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.<get-size>()": {
        "size": 220,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.<get-keys>()": {
        "size": 562,
        "type": "function"
    },
    "kotlin.collections.AbstractMap._keys": {
        "size": 37,
        "type": "field"
    },
    "kotlin.collections.AbstractMap.toString()": {
        "size": 465,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.toString(Entry<K, V>)": {
        "size": 183,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.toString(Any?)": {
        "size": 139,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.<get-values>()": {
        "size": 584,
        "type": "function"
    },
    "kotlin.collections.AbstractMap._values": {
        "size": 46,
        "type": "field"
    },
    "kotlin.collections.AbstractMap.implFindEntry(K)": {
        "size": 800,
        "type": "function"
    },
    "kotlin.collections.AbstractMap.<get-entries>()": {
        "size": 68,
        "type": "function"
    },
    "kotlin.collections.Companion.unorderedHashCode(Collection<*>)": {
        "size": 815,
        "type": "function"
    },
    "kotlin.collections.Companion.setEquals(Set<*>, Set<*>)": {
        "size": 297,
        "type": "function"
    },
    "kotlin.collections.AbstractSet": {
        "size": 1445,
        "type": "class"
    },
    "kotlin.collections.AbstractSet.<init>()": {
        "size": 95,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.equals(Any?)": {
        "size": 488,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.hashCode()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.iterator()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.AbstractSet.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.Companion.emptyElementData": {
        "size": 60,
        "type": "field"
    },
    "kotlin.collections.Companion.defaultMinCapacity": {
        "size": 59,
        "type": "field"
    },
    "kotlin.collections.ArrayDeque": {
        "size": 57915,
        "type": "class"
    },
    "kotlin.collections.ArrayDeque.head": {
        "size": 22,
        "type": "field"
    },
    "kotlin.collections.ArrayDeque.elementData": {
        "size": 37,
        "type": "field"
    },
    "kotlin.collections.ArrayDeque.<get-size>()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.size": {
        "size": 22,
        "type": "field"
    },
    "kotlin.collections.ArrayDeque.<init>(Int)": {
        "size": 447,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.<init>()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.<init>(Collection<E>)": {
        "size": 710,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.ensureCapacity(Int)": {
        "size": 766,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.copyElements(Int)": {
        "size": 588,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.positiveMod(Int)": {
        "size": 227,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.negativeMod(Int)": {
        "size": 195,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.incremented(Int)": {
        "size": 200,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.decremented(Int)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.isEmpty()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.first()": {
        "size": 390,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.firstOrNull()": {
        "size": 339,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.last()": {
        "size": 741,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.lastOrNull()": {
        "size": 690,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.addFirst(E)": {
        "size": 372,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.addLast(E)": {
        "size": 578,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.removeFirst()": {
        "size": 648,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.removeFirstOrNull()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.removeLast()": {
        "size": 813,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.removeLastOrNull()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.add(E)": {
        "size": 179,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.add(Int, E)": {
        "size": 4234,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.copyCollectionElements(Int, Collection<E>)": {
        "size": 1817,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.addAll(Collection<E>)": {
        "size": 691,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.addAll(Int, Collection<E>)": {
        "size": 7809,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.get(Int)": {
        "size": 633,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.set(Int, E)": {
        "size": 656,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.contains(E)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.indexOf(E)": {
        "size": 3068,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.lastIndexOf(E)": {
        "size": 3210,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.remove(E)": {
        "size": 325,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.removeAt(Int)": {
        "size": 3965,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.removeAll(Collection<E>)": {
        "size": 7312,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.retainAll(Collection<E>)": {
        "size": 7231,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.clear()": {
        "size": 1194,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.toArray(Array<T>)": {
        "size": 1940,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.toArray()": {
        "size": 264,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.testToArray(Array<T>)": {
        "size": 110,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.testToArray()": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.internalStructure(Function2<@ParameterName(name = \"head\") Int, @ParameterName(name = \"elements\") Array<Any?>, Unit>)": {
        "size": 793,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.iterator()": {
        "size": 65,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.listIterator()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.listIterator(Int)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.subList(Int, Int)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.removeRange(Int, Int)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ArrayDeque.<init>()[synthetic]": {
        "size": 100,
        "type": "function"
    },
    "kotlin.collections.flatten()": {
        "size": 1665,
        "type": "function"
    },
    "kotlin.collections.unzip()": {
        "size": 937,
        "type": "function"
    },
    "kotlin.collections.contentDeepEqualsImpl(Array<out T>?)": {
        "size": 9490,
        "type": "function"
    },
    "kotlin.collections.contentDeepToStringImpl()": {
        "size": 1468,
        "type": "function"
    },
    "kotlin.collections.contentDeepToStringInternal(StringBuilder, MutableList<Array<*>>)": {
        "size": 6040,
        "type": "function"
    },
    "kotlin.collections.listOf(Array<out T>)": {
        "size": 179,
        "type": "function"
    },
    "kotlin.collections.emptyList()": {
        "size": 70,
        "type": "function"
    },
    "kotlin.collections.shuffled(Random)": {
        "size": 595,
        "type": "function"
    },
    "kotlin.collections.listOfNotNull(T?)": {
        "size": 195,
        "type": "function"
    },
    "kotlin.collections.listOfNotNull(Array<out T?>)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.collections.arrayListOf(Array<out T>)": {
        "size": 249,
        "type": "function"
    },
    "kotlin.collections.binarySearch(T?, Int, Int)": {
        "size": 1197,
        "type": "function"
    },
    "kotlin.collections.binarySearch$default(T?, Int?, Int?, Int, Any?)": {
        "size": 781,
        "type": "function"
    },
    "kotlin.collections.binarySearch(T, Comparator<in T>, Int, Int)": {
        "size": 1189,
        "type": "function"
    },
    "kotlin.collections.binarySearch$default(T, Comparator<in T>, Int?, Int?, Int, Any?)": {
        "size": 825,
        "type": "function"
    },
    "kotlin.collections.binarySearch(Int, Int, Function1<T, Int>)": {
        "size": 1196,
        "type": "function"
    },
    "kotlin.collections.binarySearch$default(Int?, Int?, Function1<T, Int>, Int, Any?)": {
        "size": 795,
        "type": "function"
    },
    "kotlin.collections.mutableListOf(Array<out T>)": {
        "size": 253,
        "type": "function"
    },
    "kotlin.collections.optimizeReadOnlyList()": {
        "size": 329,
        "type": "function"
    },
    "kotlin.collections.asCollection()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator": {
        "size": 826,
        "type": "class"
    },
    "kotlin.collections.EmptyIterator.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.hasNext()": {
        "size": 61,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.hasPrevious()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.nextIndex()": {
        "size": 46,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.previousIndex()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.next()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.previous()": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.EmptyIterator_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.collections.EmptyList": {
        "size": 4161,
        "type": "class"
    },
    "kotlin.collections.EmptyList.<init>()": {
        "size": 128,
        "type": "function"
    },
    "kotlin.collections.EmptyList.serialVersionUID": {
        "size": 77,
        "type": "field"
    },
    "kotlin.collections.EmptyList.equals(Any?)": {
        "size": 338,
        "type": "function"
    },
    "kotlin.collections.EmptyList.hashCode()": {
        "size": 45,
        "type": "function"
    },
    "kotlin.collections.EmptyList.toString()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.EmptyList.<get-size>()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.collections.EmptyList.isEmpty()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.EmptyList.contains(Nothing)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.EmptyList.contains(@UnsafeVariance E)": {
        "size": 457,
        "type": "function"
    },
    "kotlin.collections.EmptyList.containsAll(Collection<Nothing>)": {
        "size": 98,
        "type": "function"
    },
    "kotlin.collections.EmptyList.get(Int)": {
        "size": 305,
        "type": "function"
    },
    "kotlin.collections.EmptyList.indexOf(Nothing)": {
        "size": 61,
        "type": "function"
    },
    "kotlin.collections.EmptyList.indexOf(@UnsafeVariance E)": {
        "size": 439,
        "type": "function"
    },
    "kotlin.collections.EmptyList.lastIndexOf(Nothing)": {
        "size": 65,
        "type": "function"
    },
    "kotlin.collections.EmptyList.lastIndexOf(@UnsafeVariance E)": {
        "size": 447,
        "type": "function"
    },
    "kotlin.collections.EmptyList.iterator()": {
        "size": 90,
        "type": "function"
    },
    "kotlin.collections.EmptyList.listIterator()": {
        "size": 89,
        "type": "function"
    },
    "kotlin.collections.EmptyList.listIterator(Int)": {
        "size": 278,
        "type": "function"
    },
    "kotlin.collections.EmptyList.subList(Int, Int)": {
        "size": 557,
        "type": "function"
    },
    "kotlin.collections.EmptyList_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.collections.ArrayAsCollection": {
        "size": 2462,
        "type": "class"
    },
    "kotlin.collections.ArrayAsCollection.<init>(Array<out T>, Boolean)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.values": {
        "size": 51,
        "type": "field"
    },
    "kotlin.collections.ArrayAsCollection.isVarargs": {
        "size": 49,
        "type": "field"
    },
    "kotlin.collections.ArrayAsCollection.<get-size>()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.isEmpty()": {
        "size": 386,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.contains(T)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.containsAll(Collection<T>)": {
        "size": 893,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.iterator()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ArrayAsCollection.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.rangeCheck(Int, Int, Int)": {
        "size": 1110,
        "type": "function"
    },
    "kotlin.collections.throwIndexOverflow()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.collections.throwCountOverflow()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.collections.Grouping": {
        "size": 315,
        "type": "class"
    },
    "kotlin.collections.Grouping.sourceIterator()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.Grouping.keyOf(T)": {
        "size": 35,
        "type": "function"
    },
    "kotlin.collections.Grouping.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.Grouping.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.Grouping.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.eachCountTo(M)": {
        "size": 2600,
        "type": "function"
    },
    "kotlin.collections.IndexedValue": {
        "size": 2232,
        "type": "class"
    },
    "kotlin.collections.IndexedValue.<init>(Int, T)": {
        "size": 139,
        "type": "function"
    },
    "kotlin.collections.IndexedValue.index": {
        "size": 41,
        "type": "field"
    },
    "kotlin.collections.IndexedValue.value": {
        "size": 39,
        "type": "field"
    },
    "kotlin.collections.IndexedValue.toString()": {
        "size": 459,
        "type": "function"
    },
    "kotlin.collections.IndexedValue.hashCode()": {
        "size": 439,
        "type": "function"
    },
    "kotlin.collections.IndexedValue.equals(Any?)": {
        "size": 942,
        "type": "function"
    },
    "kotlin.collections.collectionSizeOrDefault(Int)": {
        "size": 341,
        "type": "function"
    },
    "kotlin.collections.IndexingIterable": {
        "size": 818,
        "type": "class"
    },
    "kotlin.collections.IndexingIterable.<init>(Function0<Iterator<T>>)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.collections.IndexingIterable.iteratorFactory": {
        "size": 70,
        "type": "field"
    },
    "kotlin.collections.IndexingIterable.iterator()": {
        "size": 335,
        "type": "function"
    },
    "kotlin.collections.IndexingIterable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.IndexingIterable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.IndexingIterable.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.collectionSizeOrNull()": {
        "size": 353,
        "type": "function"
    },
    "kotlin.collections.IndexingIterator": {
        "size": 1901,
        "type": "class"
    },
    "kotlin.collections.IndexingIterator.<init>(Iterator<T>)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.collections.IndexingIterator.iterator": {
        "size": 52,
        "type": "field"
    },
    "kotlin.collections.IndexingIterator.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.IndexingIterator.hasNext()": {
        "size": 230,
        "type": "function"
    },
    "kotlin.collections.IndexingIterator.next()": {
        "size": 1053,
        "type": "function"
    },
    "kotlin.collections.IndexingIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.IndexingIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.IndexingIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.withDefault(Function1<@ParameterName(name = \"key\") K, V>)": {
        "size": 651,
        "type": "function"
    },
    "kotlin.collections.getOrImplicitDefault(K)": {
        "size": 1241,
        "type": "function"
    },
    "kotlin.collections.MapWithDefault": {
        "size": 161,
        "type": "class"
    },
    "kotlin.collections.MapWithDefault.<get-map>()": {
        "size": 37,
        "type": "function"
    },
    "kotlin.collections.MapWithDefault.getOrImplicitDefault(K)": {
        "size": 46,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl": {
        "size": 4453,
        "type": "class"
    },
    "kotlin.collections.MapWithDefaultImpl.<init>(Map<K, V>, Function1<@ParameterName(name = \"key\") K, V>)": {
        "size": 188,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.<get-map>()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.map": {
        "size": 45,
        "type": "field"
    },
    "kotlin.collections.MapWithDefaultImpl.default": {
        "size": 84,
        "type": "field"
    },
    "kotlin.collections.MapWithDefaultImpl.equals(Any?)": {
        "size": 255,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.hashCode()": {
        "size": 222,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.toString()": {
        "size": 225,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.<get-size>()": {
        "size": 226,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.isEmpty()": {
        "size": 224,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.containsKey(K)": {
        "size": 247,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.containsValue(@UnsafeVariance V)": {
        "size": 273,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.get(K)": {
        "size": 235,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.<get-keys>()": {
        "size": 229,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.<get-values>()": {
        "size": 240,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.<get-entries>()": {
        "size": 245,
        "type": "function"
    },
    "kotlin.collections.MapWithDefaultImpl.getOrImplicitDefault(K)": {
        "size": 1012,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefault": {
        "size": 161,
        "type": "class"
    },
    "kotlin.collections.MutableMapWithDefault.<get-map>()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl": {
        "size": 6179,
        "type": "class"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.<init>(MutableMap<K, V>, Function1<@ParameterName(name = \"key\") K, V>)": {
        "size": 195,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.<get-map>()": {
        "size": 191,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.map": {
        "size": 52,
        "type": "field"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.default": {
        "size": 84,
        "type": "field"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.equals(Any?)": {
        "size": 276,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.hashCode()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.toString()": {
        "size": 246,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.<get-size>()": {
        "size": 247,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.isEmpty()": {
        "size": 245,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.containsKey(K)": {
        "size": 268,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.containsValue(@UnsafeVariance V)": {
        "size": 294,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.get(K)": {
        "size": 256,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.<get-keys>()": {
        "size": 257,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.<get-values>()": {
        "size": 268,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.<get-entries>()": {
        "size": 280,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.put(K, V)": {
        "size": 272,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.remove(K)": {
        "size": 253,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.putAll(Map<out K, V>)": {
        "size": 264,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.clear()": {
        "size": 232,
        "type": "function"
    },
    "kotlin.collections.MutableMapWithDefaultImpl.getOrImplicitDefault(K)": {
        "size": 1033,
        "type": "function"
    },
    "kotlin.collections.toMap()": {
        "size": 363,
        "type": "function"
    },
    "kotlin.collections.mapOf(Array<out Pair<K, V>>)": {
        "size": 341,
        "type": "function"
    },
    "kotlin.collections.toMutableMap()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.collections.emptyMap()": {
        "size": 80,
        "type": "function"
    },
    "kotlin.collections.linkedMapOf(Array<out Pair<K, V>>)": {
        "size": 259,
        "type": "function"
    },
    "kotlin.collections.hashMapOf(Array<out Pair<K, V>>)": {
        "size": 633,
        "type": "function"
    },
    "kotlin.collections.mutableMapOf(Array<out Pair<K, V>>)": {
        "size": 639,
        "type": "function"
    },
    "kotlin.collections.toMap(M)": {
        "size": 483,
        "type": "function"
    },
    "kotlin.collections.EmptyMap": {
        "size": 2078,
        "type": "class"
    },
    "kotlin.collections.EmptyMap.<init>()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.serialVersionUID": {
        "size": 76,
        "type": "field"
    },
    "kotlin.collections.EmptyMap.equals(Any?)": {
        "size": 344,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.hashCode()": {
        "size": 45,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.toString()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.<get-size>()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.isEmpty()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.containsKey(Any?)": {
        "size": 65,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.containsValue(Nothing)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.containsValue(@UnsafeVariance V)": {
        "size": 448,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.get(Any?)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.get(K)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.<get-entries>()": {
        "size": 89,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.<get-keys>()": {
        "size": 70,
        "type": "function"
    },
    "kotlin.collections.EmptyMap.<get-values>()": {
        "size": 83,
        "type": "function"
    },
    "kotlin.collections.EmptyMap_instance": {
        "size": 52,
        "type": "field"
    },
    "kotlin.collections.putAll(Array<out Pair<K, V>>)": {
        "size": 771,
        "type": "function"
    },
    "kotlin.collections.removeAll(Function1<T, Boolean>)": {
        "size": 180,
        "type": "function"
    },
    "kotlin.collections.retainAll(Function1<T, Boolean>)": {
        "size": 181,
        "type": "function"
    },
    "kotlin.collections.addAll(Iterable<T>)": {
        "size": 822,
        "type": "function"
    },
    "kotlin.collections.addAll(Array<out T>)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.collections.addAll(Sequence<T>)": {
        "size": 490,
        "type": "function"
    },
    "kotlin.collections.removeFirst()": {
        "size": 285,
        "type": "function"
    },
    "kotlin.collections.removeFirstOrNull()": {
        "size": 240,
        "type": "function"
    },
    "kotlin.collections.removeLast()": {
        "size": 310,
        "type": "function"
    },
    "kotlin.collections.removeLastOrNull()": {
        "size": 265,
        "type": "function"
    },
    "kotlin.collections.removeAll(Array<out T>)": {
        "size": 441,
        "type": "function"
    },
    "kotlin.collections.removeAll(Iterable<T>)": {
        "size": 167,
        "type": "function"
    },
    "kotlin.collections.removeAll(Sequence<T>)": {
        "size": 335,
        "type": "function"
    },
    "kotlin.collections.retainAll(Array<out T>)": {
        "size": 465,
        "type": "function"
    },
    "kotlin.collections.retainAll(Iterable<T>)": {
        "size": 167,
        "type": "function"
    },
    "kotlin.collections.retainAll(Sequence<T>)": {
        "size": 359,
        "type": "function"
    },
    "kotlin.collections.convertToListIfNotCollection()": {
        "size": 264,
        "type": "function"
    },
    "kotlin.collections.filterInPlace(Function1<T, Boolean>, Boolean)": {
        "size": 2454,
        "type": "function"
    },
    "kotlin.collections.retainNothing()": {
        "size": 241,
        "type": "function"
    },
    "kotlin.collections.IntIterator": {
        "size": 621,
        "type": "class"
    },
    "kotlin.collections.IntIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.IntIterator.next()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.collections.IntIterator.nextInt()": {
        "size": 29,
        "type": "function"
    },
    "kotlin.collections.IntIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.IntIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.IntIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.IntIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ByteIterator": {
        "size": 630,
        "type": "class"
    },
    "kotlin.collections.ByteIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.ByteIterator.next()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.ByteIterator.nextByte()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.collections.ByteIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.ByteIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ByteIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ByteIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.CharIterator": {
        "size": 630,
        "type": "class"
    },
    "kotlin.collections.CharIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.CharIterator.next()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.CharIterator.nextChar()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.collections.CharIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.CharIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.CharIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.CharIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ShortIterator": {
        "size": 639,
        "type": "class"
    },
    "kotlin.collections.ShortIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.ShortIterator.next()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.collections.ShortIterator.nextShort()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.ShortIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.ShortIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ShortIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ShortIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.LongIterator": {
        "size": 630,
        "type": "class"
    },
    "kotlin.collections.LongIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.LongIterator.next()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.LongIterator.nextLong()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.collections.LongIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.LongIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.LongIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.LongIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.DoubleIterator": {
        "size": 648,
        "type": "class"
    },
    "kotlin.collections.DoubleIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.DoubleIterator.next()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.collections.DoubleIterator.nextDouble()": {
        "size": 35,
        "type": "function"
    },
    "kotlin.collections.DoubleIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.DoubleIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.DoubleIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.DoubleIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.FloatIterator": {
        "size": 639,
        "type": "class"
    },
    "kotlin.collections.FloatIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.FloatIterator.next()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.collections.FloatIterator.nextFloat()": {
        "size": 33,
        "type": "function"
    },
    "kotlin.collections.FloatIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.FloatIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.FloatIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.FloatIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.BooleanIterator": {
        "size": 657,
        "type": "class"
    },
    "kotlin.collections.BooleanIterator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.BooleanIterator.next()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.collections.BooleanIterator.nextBoolean()": {
        "size": 37,
        "type": "function"
    },
    "kotlin.collections.BooleanIterator.hasNext()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.collections.BooleanIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.BooleanIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.BooleanIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.asReversed()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(ReversedListReadOnly<T>, Int)": {
        "size": 311,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.delegateIterator": {
        "size": 71,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.hasPrevious()": {
        "size": 248,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.nextIndex()": {
        "size": 298,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.previous()": {
        "size": 236,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.previousIndex()": {
        "size": 298,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly": {
        "size": 2197,
        "type": "class"
    },
    "kotlin.collections.ReversedListReadOnly.<init>(List<T>)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.delegate": {
        "size": 48,
        "type": "field"
    },
    "kotlin.collections.ReversedListReadOnly.<get-size>()": {
        "size": 227,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.get(Int)": {
        "size": 284,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.iterator()": {
        "size": 197,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.listIterator()": {
        "size": 196,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.listIterator(Int)": {
        "size": 274,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.indexOf(T)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.lastIndexOf(T)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.subList(Int, Int)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.contains(T)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.containsAll(Collection<T>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.ReversedListReadOnly.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(ReversedList<T>, Int)": {
        "size": 310,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.add(T)": {
        "size": 375,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.set(T)": {
        "size": 254,
        "type": "function"
    },
    "kotlin.collections.ReversedList": {
        "size": 4056,
        "type": "class"
    },
    "kotlin.collections.ReversedList.<init>(MutableList<T>)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.collections.ReversedList.delegate": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.ReversedList.<get-size>()": {
        "size": 218,
        "type": "function"
    },
    "kotlin.collections.ReversedList.get(Int)": {
        "size": 275,
        "type": "function"
    },
    "kotlin.collections.ReversedList.clear()": {
        "size": 203,
        "type": "function"
    },
    "kotlin.collections.ReversedList.removeAt(Int)": {
        "size": 276,
        "type": "function"
    },
    "kotlin.collections.ReversedList.set(Int, T)": {
        "size": 306,
        "type": "function"
    },
    "kotlin.collections.ReversedList.add(Int, T)": {
        "size": 288,
        "type": "function"
    },
    "kotlin.collections.ReversedList.iterator()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.collections.ReversedList.listIterator()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.collections.ReversedList.listIterator(Int)": {
        "size": 265,
        "type": "function"
    },
    "kotlin.collections.ReversedList.add(T)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.ReversedList.addAll(Int, Collection<T>)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.ReversedList.addAll(Collection<T>)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.collections.ReversedList.removeAll(Collection<T>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.ReversedList.retainAll(Collection<T>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.collections.ReversedList.contains(T)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.ReversedList.indexOf(T)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.ReversedList.lastIndexOf(T)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.collections.ReversedList.subList(Int, Int)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.collections.ReversedList.removeRange(Int, Int)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.ReversedList.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.ReversedList.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.ReversedList.remove(T)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.ReversedList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ReversedList.containsAll(Collection<T>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.ReversedList.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.ReversedList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.ReversedList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.reverseElementIndex(Int)": {
        "size": 642,
        "type": "function"
    },
    "kotlin.collections.reversePositionIndex(Int)": {
        "size": 611,
        "type": "function"
    },
    "kotlin.collections.reverseIteratorIndex(Int)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.sequences.Sequence": {
        "size": 241,
        "type": "class"
    },
    "kotlin.sequences.Sequence.iterator()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.sequences.Sequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.Sequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.Sequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.sequence(@ExtensionFunctionType SuspendFunction1<SequenceScope<T>, Unit>)": {
        "size": 381,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope": {
        "size": 1189,
        "type": "class"
    },
    "kotlin.sequences.SequenceScope.<init>()": {
        "size": 76,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope.yield(T, Continuation<Unit>)": {
        "size": 68,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope.yieldAll(Iterator<T>, Continuation<Unit>)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope.yieldAll(Iterable<T>, Continuation<Unit>)": {
        "size": 471,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope.yieldAll(Sequence<T>, Continuation<Unit>)": {
        "size": 186,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.SequenceScope.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.iterator(@ExtensionFunctionType SuspendFunction1<SequenceScope<T>, Unit>)": {
        "size": 425,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator": {
        "size": 6488,
        "type": "class"
    },
    "kotlin.sequences.SequenceBuilderIterator.<init>()": {
        "size": 191,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.state": {
        "size": 23,
        "type": "field"
    },
    "kotlin.sequences.SequenceBuilderIterator.nextValue": {
        "size": 26,
        "type": "field"
    },
    "kotlin.sequences.SequenceBuilderIterator.nextIterator": {
        "size": 39,
        "type": "field"
    },
    "kotlin.sequences.SequenceBuilderIterator.nextStep": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.SequenceBuilderIterator.hasNext()": {
        "size": 1917,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.next()": {
        "size": 1074,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.nextNotReady()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.exceptionalState()": {
        "size": 444,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.yield(T, Continuation<Unit>)": {
        "size": 600,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.yieldAll(Iterator<T>, Continuation<Unit>)": {
        "size": 710,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.resumeWith(Result<Unit>)": {
        "size": 365,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.<get-context>()": {
        "size": 93,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.yieldAll(Iterable<T>, Continuation<Unit>)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.yieldAll(Sequence<T>, Continuation<Unit>)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.SequenceBuilderIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(@ExtensionFunctionType SuspendFunction1<SequenceScope<T>, Unit>)": {
        "size": 172,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.$block": {
        "size": 102,
        "type": "field"
    },
    "kotlin.sequences.sequenceOf(Array<out T>)": {
        "size": 278,
        "type": "function"
    },
    "kotlin.sequences.asSequence()": {
        "size": 272,
        "type": "function"
    },
    "kotlin.sequences.emptySequence()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.sequences.generateSequence(T?, Function1<T, T?>)": {
        "size": 377,
        "type": "function"
    },
    "kotlin.sequences.generateSequence(Function0<T?>)": {
        "size": 277,
        "type": "function"
    },
    "kotlin.sequences.generateSequence(Function0<T?>, Function1<T, T?>)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.sequences.constrainOnce()": {
        "size": 235,
        "type": "function"
    },
    "kotlin.sequences.flatten()": {
        "size": 227,
        "type": "function"
    },
    "kotlin.sequences.unzip()": {
        "size": 613,
        "type": "function"
    },
    "kotlin.sequences.shuffled()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.sequences.shuffled(Random)": {
        "size": 265,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(TransformingSequence<T, R>)": {
        "size": 242,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.iterator": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.next()": {
        "size": 1220,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.hasNext()": {
        "size": 480,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.this$0": {
        "size": 72,
        "type": "field"
    },
    "kotlin.sequences.TransformingSequence": {
        "size": 1032,
        "type": "class"
    },
    "kotlin.sequences.TransformingSequence.<init>(Sequence<T>, Function1<T, R>)": {
        "size": 188,
        "type": "function"
    },
    "kotlin.sequences.TransformingSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.TransformingSequence.transformer": {
        "size": 59,
        "type": "field"
    },
    "kotlin.sequences.TransformingSequence.iterator()": {
        "size": 255,
        "type": "function"
    },
    "kotlin.sequences.TransformingSequence.flatten(Function1<R, Iterator<E>>)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.sequences.TransformingSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.TransformingSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.TransformingSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.DropTakeSequence": {
        "size": 303,
        "type": "class"
    },
    "kotlin.sequences.DropTakeSequence.drop(Int)": {
        "size": 40,
        "type": "function"
    },
    "kotlin.sequences.DropTakeSequence.take(Int)": {
        "size": 40,
        "type": "function"
    },
    "kotlin.sequences.DropTakeSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.DropTakeSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.DropTakeSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(TakeSequence<T>)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.left": {
        "size": 22,
        "type": "field"
    },
    "kotlin.sequences.TakeSequence": {
        "size": 2454,
        "type": "class"
    },
    "kotlin.sequences.TakeSequence.<init>(Sequence<T>, Int)": {
        "size": 1158,
        "type": "function"
    },
    "kotlin.sequences.TakeSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.TakeSequence.count": {
        "size": 41,
        "type": "field"
    },
    "kotlin.sequences.TakeSequence.drop(Int)": {
        "size": 328,
        "type": "function"
    },
    "kotlin.sequences.TakeSequence.take(Int)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.sequences.TakeSequence.iterator()": {
        "size": 233,
        "type": "function"
    },
    "kotlin.sequences.TakeSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.TakeSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.TakeSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(FilteringSequence<T>)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.nextState": {
        "size": 27,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.nextItem": {
        "size": 25,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.calcNext()": {
        "size": 587,
        "type": "function"
    },
    "kotlin.sequences.FilteringSequence": {
        "size": 899,
        "type": "class"
    },
    "kotlin.sequences.FilteringSequence.<init>(Sequence<T>, Boolean, Function1<T, Boolean>)": {
        "size": 239,
        "type": "function"
    },
    "kotlin.sequences.FilteringSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.FilteringSequence.sendWhen": {
        "size": 48,
        "type": "field"
    },
    "kotlin.sequences.FilteringSequence.predicate": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.FilteringSequence.iterator()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.sequences.FilteringSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.FilteringSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.FilteringSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(IndexingSequence<T>)": {
        "size": 231,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.sequences.IndexingSequence": {
        "size": 686,
        "type": "class"
    },
    "kotlin.sequences.IndexingSequence.<init>(Sequence<T>)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.sequences.IndexingSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.IndexingSequence.iterator()": {
        "size": 255,
        "type": "function"
    },
    "kotlin.sequences.IndexingSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.IndexingSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.IndexingSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(TakeWhileSequence<T>)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.sequences.TakeWhileSequence": {
        "size": 796,
        "type": "class"
    },
    "kotlin.sequences.TakeWhileSequence.<init>(Sequence<T>, Function1<T, Boolean>)": {
        "size": 188,
        "type": "function"
    },
    "kotlin.sequences.TakeWhileSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.TakeWhileSequence.predicate": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.TakeWhileSequence.iterator()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.sequences.TakeWhileSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.TakeWhileSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.TakeWhileSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(TransformingIndexedSequence<T, R>)": {
        "size": 271,
        "type": "function"
    },
    "kotlin.sequences.TransformingIndexedSequence": {
        "size": 848,
        "type": "class"
    },
    "kotlin.sequences.TransformingIndexedSequence.<init>(Sequence<T>, Function2<Int, T, R>)": {
        "size": 193,
        "type": "function"
    },
    "kotlin.sequences.TransformingIndexedSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.TransformingIndexedSequence.transformer": {
        "size": 64,
        "type": "field"
    },
    "kotlin.sequences.TransformingIndexedSequence.iterator()": {
        "size": 269,
        "type": "function"
    },
    "kotlin.sequences.TransformingIndexedSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.TransformingIndexedSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.TransformingIndexedSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(DropSequence<T>)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.drop()": {
        "size": 694,
        "type": "function"
    },
    "kotlin.sequences.DropSequence": {
        "size": 3417,
        "type": "class"
    },
    "kotlin.sequences.DropSequence.<init>(Sequence<T>, Int)": {
        "size": 1158,
        "type": "function"
    },
    "kotlin.sequences.DropSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.DropSequence.count": {
        "size": 41,
        "type": "field"
    },
    "kotlin.sequences.DropSequence.drop(Int)": {
        "size": 737,
        "type": "function"
    },
    "kotlin.sequences.DropSequence.take(Int)": {
        "size": 772,
        "type": "function"
    },
    "kotlin.sequences.DropSequence.iterator()": {
        "size": 233,
        "type": "function"
    },
    "kotlin.sequences.DropSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.DropSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.DropSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(DropWhileSequence<T>)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.dropState": {
        "size": 27,
        "type": "field"
    },
    "kotlin.sequences.DropWhileSequence": {
        "size": 796,
        "type": "class"
    },
    "kotlin.sequences.DropWhileSequence.<init>(Sequence<T>, Function1<T, Boolean>)": {
        "size": 188,
        "type": "function"
    },
    "kotlin.sequences.DropWhileSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.DropWhileSequence.predicate": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.DropWhileSequence.iterator()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.sequences.DropWhileSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.DropWhileSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.DropWhileSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(MergingSequence<T1, T2, V>)": {
        "size": 355,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.iterator1": {
        "size": 54,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.iterator2": {
        "size": 54,
        "type": "field"
    },
    "kotlin.sequences.MergingSequence": {
        "size": 949,
        "type": "class"
    },
    "kotlin.sequences.MergingSequence.<init>(Sequence<T1>, Sequence<T2>, Function2<T1, T2, V>)": {
        "size": 250,
        "type": "function"
    },
    "kotlin.sequences.MergingSequence.sequence1": {
        "size": 54,
        "type": "field"
    },
    "kotlin.sequences.MergingSequence.sequence2": {
        "size": 54,
        "type": "field"
    },
    "kotlin.sequences.MergingSequence.transform": {
        "size": 62,
        "type": "field"
    },
    "kotlin.sequences.MergingSequence.iterator()": {
        "size": 255,
        "type": "function"
    },
    "kotlin.sequences.MergingSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.MergingSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.MergingSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(FlatteningSequence<T, R, E>)": {
        "size": 275,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.itemIterator": {
        "size": 39,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.ensureItemIterator()": {
        "size": 1383,
        "type": "function"
    },
    "kotlin.sequences.FlatteningSequence": {
        "size": 966,
        "type": "class"
    },
    "kotlin.sequences.FlatteningSequence.<init>(Sequence<T>, Function1<T, R>, Function1<R, Iterator<E>>)": {
        "size": 257,
        "type": "function"
    },
    "kotlin.sequences.FlatteningSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.FlatteningSequence.transformer": {
        "size": 59,
        "type": "field"
    },
    "kotlin.sequences.FlatteningSequence.iterator": {
        "size": 66,
        "type": "field"
    },
    "kotlin.sequences.FlatteningSequence.iterator()": {
        "size": 257,
        "type": "function"
    },
    "kotlin.sequences.FlatteningSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.FlatteningSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.FlatteningSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed(Sequence<T>, Function2<Int, T, C>, Function1<C, Iterator<R>>)": {
        "size": 360,
        "type": "function"
    },
    "kotlin.sequences.DistinctSequence": {
        "size": 861,
        "type": "class"
    },
    "kotlin.sequences.DistinctSequence.<init>(Sequence<T>, Function1<T, K>)": {
        "size": 182,
        "type": "function"
    },
    "kotlin.sequences.DistinctSequence.source": {
        "size": 50,
        "type": "field"
    },
    "kotlin.sequences.DistinctSequence.keySelector": {
        "size": 59,
        "type": "field"
    },
    "kotlin.sequences.DistinctSequence.iterator()": {
        "size": 313,
        "type": "function"
    },
    "kotlin.sequences.DistinctSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.DistinctSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.DistinctSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence": {
        "size": 742,
        "type": "class"
    },
    "kotlin.sequences.EmptySequence.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence.iterator()": {
        "size": 90,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence.drop(Int)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence.take(Int)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.EmptySequence_instance": {
        "size": 62,
        "type": "field"
    },
    "kotlin.sequences.<no name provided>.<init>(GeneratorSequence<T>)": {
        "size": 184,
        "type": "function"
    },
    "kotlin.sequences.GeneratorSequence": {
        "size": 828,
        "type": "class"
    },
    "kotlin.sequences.GeneratorSequence.<init>(Function0<T?>, Function1<T, T?>)": {
        "size": 215,
        "type": "function"
    },
    "kotlin.sequences.GeneratorSequence.getInitialValue": {
        "size": 61,
        "type": "field"
    },
    "kotlin.sequences.GeneratorSequence.getNextValue": {
        "size": 61,
        "type": "field"
    },
    "kotlin.sequences.GeneratorSequence.iterator()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.sequences.GeneratorSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.GeneratorSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.GeneratorSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.flatten(Function1<T, Iterator<R>>)": {
        "size": 628,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(SubSequence<T>)": {
        "size": 255,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.position": {
        "size": 26,
        "type": "field"
    },
    "kotlin.sequences.SubSequence": {
        "size": 4617,
        "type": "class"
    },
    "kotlin.sequences.SubSequence.<init>(Sequence<T>, Int, Int)": {
        "size": 2889,
        "type": "function"
    },
    "kotlin.sequences.SubSequence.sequence": {
        "size": 52,
        "type": "field"
    },
    "kotlin.sequences.SubSequence.startIndex": {
        "size": 46,
        "type": "field"
    },
    "kotlin.sequences.SubSequence.endIndex": {
        "size": 44,
        "type": "field"
    },
    "kotlin.sequences.SubSequence.<get-count>()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.sequences.SubSequence.drop(Int)": {
        "size": 393,
        "type": "function"
    },
    "kotlin.sequences.SubSequence.take(Int)": {
        "size": 388,
        "type": "function"
    },
    "kotlin.sequences.SubSequence.iterator()": {
        "size": 231,
        "type": "function"
    },
    "kotlin.sequences.SubSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.SubSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.SubSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator": {
        "size": 1540,
        "type": "class"
    },
    "kotlin.sequences.DistinctIterator.<init>(Iterator<T>, Function1<T, K>)": {
        "size": 234,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.source": {
        "size": 50,
        "type": "field"
    },
    "kotlin.sequences.DistinctIterator.keySelector": {
        "size": 59,
        "type": "field"
    },
    "kotlin.sequences.DistinctIterator.observed": {
        "size": 51,
        "type": "field"
    },
    "kotlin.sequences.DistinctIterator.computeNext()": {
        "size": 646,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.hasNext()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.next()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.setNext(T)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.done()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.DistinctIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.<init>(Iterator<T>)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.sequences.<no name provided>.$this_asSequence": {
        "size": 60,
        "type": "field"
    },
    "kotlin.sequences.generateSequence$lambda": {
        "size": 616,
        "type": "class"
    },
    "kotlin.sequences.generateSequence$lambda.<init>(T?)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.sequences.generateSequence$lambda.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.sequences.generateSequence$lambda.$seed": {
        "size": 40,
        "type": "field"
    },
    "kotlin.sequences.generateSequence$lambda.<init>(Function0<T?>)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.sequences.generateSequence$lambda.invoke(T)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.sequences.generateSequence$lambda.invoke(P1)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.sequences.generateSequence$lambda.$nextFunction": {
        "size": 59,
        "type": "field"
    },
    "kotlin.sequences.flatten$lambda": {
        "size": 556,
        "type": "class"
    },
    "kotlin.sequences.flatten$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.sequences.flatten$lambda.invoke(Sequence<T>)": {
        "size": 87,
        "type": "function"
    },
    "kotlin.sequences.flatten$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.sequences.flatten$lambda.invoke(Iterable<T>)": {
        "size": 87,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda": {
        "size": 5440,
        "type": "class"
    },
    "kotlin.sequences.shuffled$slambda.<init>(Sequence<T>, Random, Continuation<Any?>?)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.invoke(SequenceScope<T>, Continuation<Unit>)": {
        "size": 380,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.invoke(P1, Continuation<R>)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.$this_shuffled": {
        "size": 58,
        "type": "field"
    },
    "kotlin.sequences.shuffled$slambda.$random": {
        "size": 46,
        "type": "field"
    },
    "kotlin.sequences.shuffled$slambda.$this$sequence": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.shuffled$slambda.doResume()": {
        "size": 2955,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.buffer0": {
        "size": 54,
        "type": "field"
    },
    "kotlin.sequences.shuffled$slambda.j1": {
        "size": 38,
        "type": "field"
    },
    "kotlin.sequences.shuffled$slambda.last2": {
        "size": 39,
        "type": "field"
    },
    "kotlin.sequences.shuffled$slambda.value3": {
        "size": 40,
        "type": "field"
    },
    "kotlin.sequences.shuffled$slambda.create(SequenceScope<T>, Continuation<*>)": {
        "size": 407,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.shuffled$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda": {
        "size": 6268,
        "type": "class"
    },
    "kotlin.sequences.flatMapIndexed$slambda.<init>(Sequence<T>, Function2<Int, T, C>, Function1<C, Iterator<R>>, Continuation<Any?>?)": {
        "size": 351,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.invoke(SequenceScope<R>, Continuation<Unit>)": {
        "size": 398,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.invoke(P1, Continuation<R>)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.$source": {
        "size": 51,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.$transform": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.$iterator": {
        "size": 67,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.$this$sequence": {
        "size": 63,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.doResume()": {
        "size": 3518,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.index0": {
        "size": 24,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.tmp0_iterator1": {
        "size": 58,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.element2": {
        "size": 42,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.result3": {
        "size": 41,
        "type": "field"
    },
    "kotlin.sequences.flatMapIndexed$slambda.create(SequenceScope<R>, Continuation<*>)": {
        "size": 465,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.flatMapIndexed$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.sequences.flatten$lambda.invoke(T)": {
        "size": 56,
        "type": "function"
    },
    "kotlin.collections.emptySet()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.setOf(Array<out T>)": {
        "size": 175,
        "type": "function"
    },
    "kotlin.collections.setOfNotNull(T?)": {
        "size": 221,
        "type": "function"
    },
    "kotlin.collections.setOfNotNull(Array<out T?>)": {
        "size": 204,
        "type": "function"
    },
    "kotlin.collections.hashSetOf(Array<out T>)": {
        "size": 239,
        "type": "function"
    },
    "kotlin.collections.linkedSetOf(Array<out T>)": {
        "size": 241,
        "type": "function"
    },
    "kotlin.collections.mutableSetOf(Array<out T>)": {
        "size": 245,
        "type": "function"
    },
    "kotlin.collections.optimizeReadOnlySet()": {
        "size": 389,
        "type": "function"
    },
    "kotlin.collections.EmptySet": {
        "size": 1642,
        "type": "class"
    },
    "kotlin.collections.EmptySet.<init>()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.collections.EmptySet.serialVersionUID": {
        "size": 76,
        "type": "field"
    },
    "kotlin.collections.EmptySet.equals(Any?)": {
        "size": 335,
        "type": "function"
    },
    "kotlin.collections.EmptySet.hashCode()": {
        "size": 45,
        "type": "function"
    },
    "kotlin.collections.EmptySet.toString()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.EmptySet.<get-size>()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.collections.EmptySet.isEmpty()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.collections.EmptySet.contains(Nothing)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.EmptySet.contains(@UnsafeVariance E)": {
        "size": 457,
        "type": "function"
    },
    "kotlin.collections.EmptySet.containsAll(Collection<Nothing>)": {
        "size": 98,
        "type": "function"
    },
    "kotlin.collections.EmptySet.iterator()": {
        "size": 90,
        "type": "function"
    },
    "kotlin.collections.EmptySet_instance": {
        "size": 52,
        "type": "field"
    },
    "kotlin.collections.windowedSequence(Int, Int, Boolean, Boolean)": {
        "size": 485,
        "type": "function"
    },
    "kotlin.collections.checkWindowSizeStep(Int, Int)": {
        "size": 1499,
        "type": "function"
    },
    "kotlin.collections.windowedIterator(Iterator<T>, Int, Int, Boolean, Boolean)": {
        "size": 502,
        "type": "function"
    },
    "kotlin.collections.MovingSubList": {
        "size": 2102,
        "type": "class"
    },
    "kotlin.collections.MovingSubList.<init>(List<E>)": {
        "size": 164,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.list": {
        "size": 44,
        "type": "field"
    },
    "kotlin.collections.MovingSubList.fromIndex": {
        "size": 27,
        "type": "field"
    },
    "kotlin.collections.MovingSubList._size": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.MovingSubList.move(Int, Int)": {
        "size": 308,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.get(Int)": {
        "size": 363,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.<get-size>()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.iterator()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.indexOf(E)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.lastIndexOf(E)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.listIterator()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.listIterator(Int)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.subList(Int, Int)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.collections.MovingSubList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(RingBuffer<T>)": {
        "size": 210,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.count": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.computeNext()": {
        "size": 1055,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.setNext(T)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.done()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.collections.RingBuffer": {
        "size": 11069,
        "type": "class"
    },
    "kotlin.collections.RingBuffer.<init>(Array<Any?>, Int)": {
        "size": 2153,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.buffer": {
        "size": 50,
        "type": "field"
    },
    "kotlin.collections.RingBuffer.<init>(Int)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.capacity": {
        "size": 44,
        "type": "field"
    },
    "kotlin.collections.RingBuffer.startIndex": {
        "size": 28,
        "type": "field"
    },
    "kotlin.collections.RingBuffer.<get-size>()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.size": {
        "size": 22,
        "type": "field"
    },
    "kotlin.collections.RingBuffer.get(Int)": {
        "size": 546,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.isFull()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.iterator()": {
        "size": 229,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.toArray(Array<T>)": {
        "size": 1955,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.toArray()": {
        "size": 220,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.expanded(Int)": {
        "size": 549,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.add(T)": {
        "size": 865,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.removeFirst(Int)": {
        "size": 2745,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.indexOf(T)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.lastIndexOf(T)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.listIterator()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.listIterator(Int)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.subList(Int, Int)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.contains(T)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.containsAll(Collection<T>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.RingBuffer.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(Sequence<T>, Int, Int, Boolean, Boolean)": {
        "size": 371,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.$this_windowedSequence": {
        "size": 66,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.$size": {
        "size": 41,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.$step": {
        "size": 41,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.$partialWindows": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.$reuseBuffer": {
        "size": 52,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda": {
        "size": 14198,
        "type": "class"
    },
    "kotlin.collections.windowedIterator$slambda.<init>(Int, Int, Iterator<T>, Boolean, Boolean, Continuation<Any?>?)": {
        "size": 422,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.invoke(SequenceScope<List<T>>, Continuation<Unit>)": {
        "size": 410,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.invoke(P1, Continuation<R>)": {
        "size": 376,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.$size": {
        "size": 41,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.$step": {
        "size": 41,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.$iterator": {
        "size": 53,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.$reuseBuffer": {
        "size": 52,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.$partialWindows": {
        "size": 55,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.$this$iterator": {
        "size": 69,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.doResume()": {
        "size": 10513,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.bufferInitialCapacity0": {
        "size": 58,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.gap1": {
        "size": 40,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.buffer2": {
        "size": 34,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.skip3": {
        "size": 23,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.tmp0_iterator4": {
        "size": 58,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.buffer5": {
        "size": 35,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.tmp1_iterator6": {
        "size": 58,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.e7": {
        "size": 36,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.e8": {
        "size": 36,
        "type": "field"
    },
    "kotlin.collections.windowedIterator$slambda.create(SequenceScope<List<T>>, Continuation<*>)": {
        "size": 557,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.collections.windowedIterator$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.sortArray(UIntArray, Int, Int)": {
        "size": 208,
        "type": "function"
    },
    "kotlin.collections.sortArray(ULongArray, Int, Int)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.collections.sortArray(UByteArray, Int, Int)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.collections.sortArray(UShortArray, Int, Int)": {
        "size": 210,
        "type": "function"
    },
    "kotlin.collections.quickSort(UIntArray, Int, Int)": {
        "size": 599,
        "type": "function"
    },
    "kotlin.collections.quickSort(ULongArray, Int, Int)": {
        "size": 600,
        "type": "function"
    },
    "kotlin.collections.quickSort(UByteArray, Int, Int)": {
        "size": 600,
        "type": "function"
    },
    "kotlin.collections.quickSort(UShortArray, Int, Int)": {
        "size": 601,
        "type": "function"
    },
    "kotlin.collections.partition(UIntArray, Int, Int)": {
        "size": 2160,
        "type": "function"
    },
    "kotlin.collections.partition(ULongArray, Int, Int)": {
        "size": 2178,
        "type": "function"
    },
    "kotlin.collections.partition(UByteArray, Int, Int)": {
        "size": 3592,
        "type": "function"
    },
    "kotlin.collections.partition(UShortArray, Int, Int)": {
        "size": 3620,
        "type": "function"
    },
    "kotlin.comparisons.naturalOrder()": {
        "size": 101,
        "type": "function"
    },
    "kotlin.comparisons.nullsFirst(Comparator<in T>)": {
        "size": 336,
        "type": "function"
    },
    "kotlin.comparisons.nullsLast(Comparator<in T>)": {
        "size": 334,
        "type": "function"
    },
    "kotlin.comparisons.reversed()": {
        "size": 625,
        "type": "function"
    },
    "kotlin.comparisons.reverseOrder()": {
        "size": 101,
        "type": "function"
    },
    "kotlin.comparisons.compareValuesBy(T, T, Array<out Function1<T, Comparable<*>?>>)": {
        "size": 1004,
        "type": "function"
    },
    "kotlin.comparisons.compareValues(T?, T?)": {
        "size": 256,
        "type": "function"
    },
    "kotlin.comparisons.then(Comparator<in T>)": {
        "size": 363,
        "type": "function"
    },
    "kotlin.comparisons.thenDescending(Comparator<in T>)": {
        "size": 393,
        "type": "function"
    },
    "kotlin.comparisons.compareBy(Array<out Function1<T, Comparable<*>?>>)": {
        "size": 1182,
        "type": "function"
    },
    "kotlin.comparisons.NaturalOrderComparator": {
        "size": 970,
        "type": "class"
    },
    "kotlin.comparisons.NaturalOrderComparator.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.comparisons.NaturalOrderComparator.compare(Comparable<Any>, Comparable<Any>)": {
        "size": 103,
        "type": "function"
    },
    "kotlin.comparisons.NaturalOrderComparator.compare(T, T)": {
        "size": 511,
        "type": "function"
    },
    "kotlin.comparisons.NaturalOrderComparator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.comparisons.NaturalOrderComparator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.comparisons.NaturalOrderComparator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.comparisons.NaturalOrderComparator_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.comparisons.ReversedComparator": {
        "size": 677,
        "type": "class"
    },
    "kotlin.comparisons.ReversedComparator.<init>(Comparator<T>)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.comparisons.ReversedComparator.comparator": {
        "size": 56,
        "type": "field"
    },
    "kotlin.comparisons.ReversedComparator.compare(T, T)": {
        "size": 247,
        "type": "function"
    },
    "kotlin.comparisons.ReversedComparator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.comparisons.ReversedComparator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.comparisons.ReversedComparator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.comparisons.ReverseOrderComparator": {
        "size": 970,
        "type": "class"
    },
    "kotlin.comparisons.ReverseOrderComparator.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.comparisons.ReverseOrderComparator.compare(Comparable<Any>, Comparable<Any>)": {
        "size": 103,
        "type": "function"
    },
    "kotlin.comparisons.ReverseOrderComparator.compare(T, T)": {
        "size": 511,
        "type": "function"
    },
    "kotlin.comparisons.ReverseOrderComparator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.comparisons.ReverseOrderComparator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.comparisons.ReverseOrderComparator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.comparisons.ReverseOrderComparator_instance": {
        "size": 80,
        "type": "field"
    },
    "kotlin.comparisons.compareValuesByImpl(T, T, Array<out Function1<T, Comparable<*>?>>)": {
        "size": 1032,
        "type": "function"
    },
    "kotlin.comparisons.sam$kotlin_Comparator$0": {
        "size": 721,
        "type": "class"
    },
    "kotlin.comparisons.sam$kotlin_Comparator$0.function": {
        "size": 61,
        "type": "field"
    },
    "kotlin.comparisons.sam$kotlin_Comparator$0.<init>(Function2<P1, P2, R>)": {
        "size": 133,
        "type": "function"
    },
    "kotlin.comparisons.sam$kotlin_Comparator$0.compare(T, T)": {
        "size": 288,
        "type": "function"
    },
    "kotlin.comparisons.sam$kotlin_Comparator$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.comparisons.sam$kotlin_Comparator$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.comparisons.sam$kotlin_Comparator$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.comparisons.nullsFirst$lambda": {
        "size": 860,
        "type": "class"
    },
    "kotlin.comparisons.nullsFirst$lambda.<init>(Comparator<in T>)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.comparisons.nullsFirst$lambda.invoke(T?, T?)": {
        "size": 384,
        "type": "function"
    },
    "kotlin.comparisons.nullsFirst$lambda.invoke(P1, P2)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.comparisons.nullsFirst$lambda.$comparator": {
        "size": 60,
        "type": "field"
    },
    "kotlin.comparisons.nullsLast$lambda": {
        "size": 857,
        "type": "class"
    },
    "kotlin.comparisons.nullsLast$lambda.<init>(Comparator<in T>)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.comparisons.nullsLast$lambda.invoke(T?, T?)": {
        "size": 382,
        "type": "function"
    },
    "kotlin.comparisons.nullsLast$lambda.invoke(P1, P2)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.comparisons.nullsLast$lambda.$comparator": {
        "size": 60,
        "type": "field"
    },
    "kotlin.comparisons.then$lambda": {
        "size": 1078,
        "type": "class"
    },
    "kotlin.comparisons.then$lambda.<init>(Comparator<T>, Comparator<in T>)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.comparisons.then$lambda.invoke(T, T)": {
        "size": 485,
        "type": "function"
    },
    "kotlin.comparisons.then$lambda.invoke(P1, P2)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.comparisons.then$lambda.$this_then": {
        "size": 56,
        "type": "field"
    },
    "kotlin.comparisons.then$lambda.$comparator": {
        "size": 60,
        "type": "field"
    },
    "kotlin.comparisons.thenDescending$lambda": {
        "size": 1158,
        "type": "class"
    },
    "kotlin.comparisons.thenDescending$lambda.<init>(Comparator<T>, Comparator<in T>)": {
        "size": 231,
        "type": "function"
    },
    "kotlin.comparisons.thenDescending$lambda.invoke(T, T)": {
        "size": 515,
        "type": "function"
    },
    "kotlin.comparisons.thenDescending$lambda.invoke(P1, P2)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.comparisons.thenDescending$lambda.$this_thenDescending": {
        "size": 66,
        "type": "field"
    },
    "kotlin.comparisons.thenDescending$lambda.$comparator": {
        "size": 60,
        "type": "field"
    },
    "kotlin.comparisons.compareBy$lambda": {
        "size": 720,
        "type": "class"
    },
    "kotlin.comparisons.compareBy$lambda.<init>(Array<out Function1<T, Comparable<*>?>>)": {
        "size": 160,
        "type": "function"
    },
    "kotlin.comparisons.compareBy$lambda.invoke(T, T)": {
        "size": 221,
        "type": "function"
    },
    "kotlin.comparisons.compareBy$lambda.invoke(P1, P2)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.comparisons.compareBy$lambda.$selectors": {
        "size": 82,
        "type": "field"
    },
    "kotlin.coroutines.Continuation": {
        "size": 321,
        "type": "class"
    },
    "kotlin.coroutines.Continuation.<get-context>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.coroutines.Continuation.resumeWith(Result<T>)": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.Continuation.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.Continuation.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.Continuation.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.startCoroutine(Continuation<T>)": {
        "size": 731,
        "type": "function"
    },
    "kotlin.coroutines.Key": {
        "size": 296,
        "type": "class"
    },
    "kotlin.coroutines.Key.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.coroutines.Key.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.Key.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.Key.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.Key_instance": {
        "size": 42,
        "type": "field"
    },
    "kotlin.coroutines.ContinuationInterceptor": {
        "size": 1958,
        "type": "class"
    },
    "kotlin.coroutines.ContinuationInterceptor.interceptContinuation(Continuation<T>)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.get(Key<E>)": {
        "size": 523,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.minusKey(Key<*>)": {
        "size": 723,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.<get-key>()": {
        "size": 54,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.ContinuationInterceptor.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.Element": {
        "size": 928,
        "type": "class"
    },
    "kotlin.coroutines.Element.<get-key>()": {
        "size": 34,
        "type": "function"
    },
    "kotlin.coroutines.Element.get(Key<E>)": {
        "size": 203,
        "type": "function"
    },
    "kotlin.coroutines.Element.fold(R, Function2<R, Element, R>)": {
        "size": 139,
        "type": "function"
    },
    "kotlin.coroutines.Element.minusKey(Key<*>)": {
        "size": 226,
        "type": "function"
    },
    "kotlin.coroutines.Element.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.coroutines.Element.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.Element.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.Element.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext$plus$lambda": {
        "size": 1739,
        "type": "class"
    },
    "kotlin.coroutines.CoroutineContext$plus$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext$plus$lambda.invoke(CoroutineContext, Element)": {
        "size": 955,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext$plus$lambda.invoke(P1, P2)": {
        "size": 520,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext": {
        "size": 803,
        "type": "class"
    },
    "kotlin.coroutines.CoroutineContext.get(Key<E>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext.fold(R, Function2<R, Element, R>)": {
        "size": 82,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext.plus(CoroutineContext)": {
        "size": 367,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext.minusKey(Key<*>)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineContext.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext": {
        "size": 945,
        "type": "class"
    },
    "kotlin.coroutines.EmptyCoroutineContext.<init>()": {
        "size": 109,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext.serialVersionUID": {
        "size": 58,
        "type": "field"
    },
    "kotlin.coroutines.EmptyCoroutineContext.get(Key<E>)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext.fold(R, Function2<R, Element, R>)": {
        "size": 103,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext.plus(CoroutineContext)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext.minusKey(Key<*>)": {
        "size": 176,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext.hashCode()": {
        "size": 45,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext.toString()": {
        "size": 70,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.EmptyCoroutineContext_instance": {
        "size": 78,
        "type": "field"
    },
    "kotlin.coroutines.CombinedContext$toString$lambda": {
        "size": 1176,
        "type": "class"
    },
    "kotlin.coroutines.CombinedContext$toString$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext$toString$lambda.invoke(String, Element)": {
        "size": 439,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext$toString$lambda.invoke(P1, P2)": {
        "size": 496,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext": {
        "size": 6452,
        "type": "class"
    },
    "kotlin.coroutines.CombinedContext.<init>(CoroutineContext, Element)": {
        "size": 161,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.left": {
        "size": 53,
        "type": "field"
    },
    "kotlin.coroutines.CombinedContext.element": {
        "size": 47,
        "type": "field"
    },
    "kotlin.coroutines.CombinedContext.get(Key<E>)": {
        "size": 1199,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.fold(R, Function2<R, Element, R>)": {
        "size": 353,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.minusKey(Key<*>)": {
        "size": 1104,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.size()": {
        "size": 737,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.contains(Element)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.containsAll(CombinedContext)": {
        "size": 787,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.equals(Any?)": {
        "size": 652,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.hashCode()": {
        "size": 323,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.toString()": {
        "size": 333,
        "type": "function"
    },
    "kotlin.coroutines.CombinedContext.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey": {
        "size": 1292,
        "type": "class"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.<init>(Key<B>, Function1<@ParameterName(name = \"element\") Element, E?>)": {
        "size": 423,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.safeCast": {
        "size": 96,
        "type": "field"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.topmostKey": {
        "size": 49,
        "type": "field"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.tryCast(Element)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.isSubKey(Key<*>)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextKey.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement": {
        "size": 910,
        "type": "class"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.<init>(Key<*>)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.<get-key>()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.key": {
        "size": 42,
        "type": "field"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.AbstractCoroutineContextElement.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.getPolymorphicElement(Key<E>)": {
        "size": 589,
        "type": "function"
    },
    "kotlin.coroutines.minusPolymorphicKey(Key<*>)": {
        "size": 791,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<get-COROUTINE_SUSPENDED>()": {
        "size": 105,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_COROUTINE_SUSPENDED_instance": {
        "size": 94,
        "type": "field"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_UNDECIDED_instance": {
        "size": 84,
        "type": "field"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_RESUMED_instance": {
        "size": 82,
        "type": "field"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_entriesInitialized": {
        "size": 79,
        "type": "field"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_initEntries()": {
        "size": 481,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons": {
        "size": 513,
        "type": "class"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons.<init>(String, Int)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons.compareTo(CoroutineSingletons)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_COROUTINE_SUSPENDED_getInstance()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_UNDECIDED_getInstance()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.CoroutineSingletons_RESUMED_getInstance()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.enums.EnumEntries": {
        "size": 918,
        "type": "class"
    },
    "kotlin.enums.EnumEntries.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.isEmpty()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.iterator()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.containsAll(Collection<E>)": {
        "size": 80,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.get(Int)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.indexOf(E)": {
        "size": 59,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.listIterator()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.listIterator(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.subList(Int, Int)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.enums.EnumEntries.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.enums.enumEntries(Function0<Array<E>>)": {
        "size": 240,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList": {
        "size": 4353,
        "type": "class"
    },
    "kotlin.enums.EnumEntriesList.<init>(Array<T>)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.entries": {
        "size": 48,
        "type": "field"
    },
    "kotlin.enums.EnumEntriesList.<get-size>()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.get(Int)": {
        "size": 310,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.contains(T)": {
        "size": 364,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.contains(@UnsafeVariance E)": {
        "size": 549,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.indexOf(T)": {
        "size": 417,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.indexOf(@UnsafeVariance E)": {
        "size": 531,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.lastIndexOf(T)": {
        "size": 186,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.lastIndexOf(@UnsafeVariance E)": {
        "size": 539,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.iterator()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.containsAll(Collection<T>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.listIterator()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.listIterator(Int)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.subList(Int, Int)": {
        "size": 72,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.enums.EnumEntriesList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.internal.getProgressionLastElement(Int, Int, Int)": {
        "size": 708,
        "type": "function"
    },
    "kotlin.internal.differenceModulo(Int, Int, Int)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.internal.mod(Int, Int)": {
        "size": 207,
        "type": "function"
    },
    "kotlin.internal.getProgressionLastElement(Long, Long, Long)": {
        "size": 768,
        "type": "function"
    },
    "kotlin.internal.differenceModulo(Long, Long, Long)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.internal.mod(Long, Long)": {
        "size": 239,
        "type": "function"
    },
    "kotlin.io.encoding.<get-base64EncodeMap>()": {
        "size": 110,
        "type": "function"
    },
    "kotlin.io.encoding.base64EncodeMap": {
        "size": 64,
        "type": "field"
    },
    "kotlin.io.encoding.<get-base64DecodeMap>()": {
        "size": 109,
        "type": "function"
    },
    "kotlin.io.encoding.base64DecodeMap": {
        "size": 63,
        "type": "field"
    },
    "kotlin.io.encoding.<get-base64UrlEncodeMap>()": {
        "size": 116,
        "type": "function"
    },
    "kotlin.io.encoding.base64UrlEncodeMap": {
        "size": 67,
        "type": "field"
    },
    "kotlin.io.encoding.<get-base64UrlDecodeMap>()": {
        "size": 115,
        "type": "function"
    },
    "kotlin.io.encoding.base64UrlDecodeMap": {
        "size": 66,
        "type": "field"
    },
    "kotlin.io.encoding.Default": {
        "size": 4746,
        "type": "class"
    },
    "kotlin.io.encoding.Default.<init>()": {
        "size": 1081,
        "type": "function"
    },
    "kotlin.io.encoding.Default.bitsPerByte": {
        "size": 51,
        "type": "field"
    },
    "kotlin.io.encoding.Default.bitsPerSymbol": {
        "size": 53,
        "type": "field"
    },
    "kotlin.io.encoding.Default.bytesPerGroup": {
        "size": 54,
        "type": "field"
    },
    "kotlin.io.encoding.Default.symbolsPerGroup": {
        "size": 56,
        "type": "field"
    },
    "kotlin.io.encoding.Default.padSymbol": {
        "size": 53,
        "type": "field"
    },
    "kotlin.io.encoding.Default.mimeLineLength": {
        "size": 56,
        "type": "field"
    },
    "kotlin.io.encoding.Default.mimeGroupsPerLine": {
        "size": 58,
        "type": "field"
    },
    "kotlin.io.encoding.Default.mimeLineSeparatorSymbols": {
        "size": 66,
        "type": "field"
    },
    "kotlin.io.encoding.Default.UrlSafe": {
        "size": 46,
        "type": "field"
    },
    "kotlin.io.encoding.Default.Mime": {
        "size": 43,
        "type": "field"
    },
    "kotlin.io.encoding.Default.encodeToByteArray(ByteArray, Int, Int)": {
        "size": 105,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encodeToByteArray$default(ByteArray, Int, Int, Int, Any?)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encodeIntoByteArray(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encodeIntoByteArray$default(ByteArray, ByteArray, Int, Int, Int, Int, Any?)": {
        "size": 186,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encode(ByteArray, Int, Int)": {
        "size": 91,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encode$default(ByteArray, Int, Int, Int, Any?)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encodeToAppendable(ByteArray, A, Int, Int)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encodeToAppendable$default(ByteArray, A, Int, Int, Int, Any?)": {
        "size": 168,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decode(ByteArray, Int, Int)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decode$default(ByteArray, Int, Int, Int, Any?)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decode(CharSequence, Int, Int)": {
        "size": 97,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decode$default(CharSequence, Int, Int, Int, Any?)": {
        "size": 134,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decodeIntoByteArray(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decodeIntoByteArray$default(ByteArray, ByteArray, Int, Int, Int, Int, Any?)": {
        "size": 186,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decodeIntoByteArray(CharSequence, ByteArray, Int, Int, Int)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.io.encoding.Default.decodeIntoByteArray$default(CharSequence, ByteArray, Int, Int, Int, Int, Any?)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encodeToByteArrayImpl(ByteArray, Int, Int)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.io.encoding.Default.encodeIntoByteArrayImpl(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.io.encoding.Default.charsToBytesImpl(CharSequence, Int, Int)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.io.encoding.Default.bytesToStringImpl(ByteArray)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.io.encoding.Default.checkSourceBounds(Int, Int, Int)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.io.encoding.Default.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.io.encoding.Default.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.io.encoding.Default.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.io.encoding.Default_instance": {
        "size": 50,
        "type": "field"
    },
    "kotlin.io.encoding.Default_getInstance()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.io.encoding.Base64": {
        "size": 49534,
        "type": "class"
    },
    "kotlin.io.encoding.Base64.<init>(Boolean, Boolean)": {
        "size": 1278,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.isUrlSafe": {
        "size": 49,
        "type": "field"
    },
    "kotlin.io.encoding.Base64.isMimeScheme": {
        "size": 52,
        "type": "field"
    },
    "kotlin.io.encoding.Base64.encodeToByteArray(ByteArray, Int, Int)": {
        "size": 267,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeToByteArray$default(ByteArray, Int?, Int?, Int, Any?)": {
        "size": 777,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeIntoByteArray(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 379,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeIntoByteArray$default(ByteArray, ByteArray, Int?, Int?, Int?, Int, Any?)": {
        "size": 1166,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encode(ByteArray, Int, Int)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encode$default(ByteArray, Int?, Int?, Int, Any?)": {
        "size": 752,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeToAppendable(ByteArray, A, Int, Int)": {
        "size": 481,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeToAppendable$default(ByteArray, A, Int?, Int?, Int, Any?)": {
        "size": 834,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decode(ByteArray, Int, Int)": {
        "size": 1352,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decode$default(ByteArray, Int?, Int?, Int, Any?)": {
        "size": 755,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decodeIntoByteArray(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 610,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decodeIntoByteArray$default(ByteArray, ByteArray, Int?, Int?, Int?, Int, Any?)": {
        "size": 1166,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decode(CharSequence, Int, Int)": {
        "size": 440,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decode$default(CharSequence, Int?, Int?, Int, Any?)": {
        "size": 760,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decodeIntoByteArray(CharSequence, ByteArray, Int, Int, Int)": {
        "size": 604,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decodeIntoByteArray$default(CharSequence, ByteArray, Int?, Int?, Int?, Int, Any?)": {
        "size": 1171,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeToByteArrayImpl(ByteArray, Int, Int)": {
        "size": 570,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeIntoByteArrayImpl(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 11532,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.encodeSize(Int)": {
        "size": 825,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decodeImpl(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 8431,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.decodeSize(ByteArray, Int, Int)": {
        "size": 3754,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.charsToBytesImpl(CharSequence, Int, Int)": {
        "size": 2167,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.bytesToStringImpl(ByteArray)": {
        "size": 741,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.handlePaddingSymbol(ByteArray, Int, Int, Int)": {
        "size": 3409,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.skipIllegalSymbolsIfMime(ByteArray, Int, Int)": {
        "size": 683,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.checkSourceBounds(Int, Int, Int)": {
        "size": 191,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.checkDestinationBounds(Int, Int, Int)": {
        "size": 1397,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.io.encoding.Base64.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.io.encoding.properties initialized Base64.kt": {
        "size": 71,
        "type": "field"
    },
    "kotlin.io.encoding.<init properties Base64.kt>()": {
        "size": 6288,
        "type": "function"
    },
    "kotlin.properties.Delegates": {
        "size": 349,
        "type": "class"
    },
    "kotlin.properties.Delegates.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.properties.Delegates.notNull()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.properties.Delegates.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.properties.Delegates.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.properties.Delegates.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.properties.Delegates_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.properties.NotNullVar": {
        "size": 1962,
        "type": "class"
    },
    "kotlin.properties.NotNullVar.<init>()": {
        "size": 92,
        "type": "function"
    },
    "kotlin.properties.NotNullVar.value": {
        "size": 22,
        "type": "field"
    },
    "kotlin.properties.NotNullVar.getValue(Any?, KProperty<*>)": {
        "size": 608,
        "type": "function"
    },
    "kotlin.properties.NotNullVar.getValue(T, KProperty<*>)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.properties.NotNullVar.setValue(Any?, KProperty<*>, T)": {
        "size": 195,
        "type": "function"
    },
    "kotlin.properties.NotNullVar.setValue(T, KProperty<*>, V)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.properties.NotNullVar.toString()": {
        "size": 475,
        "type": "function"
    },
    "kotlin.properties.NotNullVar.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.properties.NotNullVar.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.properties.ReadWriteProperty": {
        "size": 397,
        "type": "class"
    },
    "kotlin.properties.ReadWriteProperty.getValue(T, KProperty<*>)": {
        "size": 80,
        "type": "function"
    },
    "kotlin.properties.ReadWriteProperty.setValue(T, KProperty<*>, V)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.properties.ReadWriteProperty.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.properties.ReadWriteProperty.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.properties.ReadWriteProperty.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.properties.PropertyDelegateProvider": {
        "size": 335,
        "type": "class"
    },
    "kotlin.properties.PropertyDelegateProvider.provideDelegate(T, KProperty<*>)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.properties.PropertyDelegateProvider.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.properties.PropertyDelegateProvider.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.properties.PropertyDelegateProvider.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.properties.ReadOnlyProperty": {
        "size": 290,
        "type": "class"
    },
    "kotlin.properties.ReadOnlyProperty.getValue(T, KProperty<*>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.properties.ReadOnlyProperty.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.properties.ReadOnlyProperty.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.properties.ReadOnlyProperty.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty": {
        "size": 1653,
        "type": "class"
    },
    "kotlin.properties.ObservableProperty.<init>(V)": {
        "size": 115,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty.value": {
        "size": 21,
        "type": "field"
    },
    "kotlin.properties.ObservableProperty.beforeChange(KProperty<*>, V, V)": {
        "size": 110,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty.afterChange(KProperty<*>, V, V)": {
        "size": 86,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty.getValue(Any?, KProperty<*>)": {
        "size": 203,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty.setValue(Any?, KProperty<*>, V)": {
        "size": 513,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty.toString()": {
        "size": 345,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.properties.ObservableProperty.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.random.Default": {
        "size": 4029,
        "type": "class"
    },
    "kotlin.random.Default.<init>()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.random.Default.defaultRandom": {
        "size": 52,
        "type": "field"
    },
    "kotlin.random.Default.nextBits(Int)": {
        "size": 227,
        "type": "function"
    },
    "kotlin.random.Default.nextInt()": {
        "size": 193,
        "type": "function"
    },
    "kotlin.random.Default.nextInt(Int)": {
        "size": 216,
        "type": "function"
    },
    "kotlin.random.Default.nextInt(Int, Int)": {
        "size": 240,
        "type": "function"
    },
    "kotlin.random.Default.nextLong()": {
        "size": 196,
        "type": "function"
    },
    "kotlin.random.Default.nextLong(Long)": {
        "size": 220,
        "type": "function"
    },
    "kotlin.random.Default.nextLong(Long, Long)": {
        "size": 245,
        "type": "function"
    },
    "kotlin.random.Default.nextBoolean()": {
        "size": 205,
        "type": "function"
    },
    "kotlin.random.Default.nextDouble()": {
        "size": 202,
        "type": "function"
    },
    "kotlin.random.Default.nextDouble(Double)": {
        "size": 228,
        "type": "function"
    },
    "kotlin.random.Default.nextDouble(Double, Double)": {
        "size": 255,
        "type": "function"
    },
    "kotlin.random.Default.nextFloat()": {
        "size": 199,
        "type": "function"
    },
    "kotlin.random.Default.nextBytes(ByteArray)": {
        "size": 232,
        "type": "function"
    },
    "kotlin.random.Default.nextBytes(Int)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.random.Default.nextBytes(ByteArray, Int, Int)": {
        "size": 304,
        "type": "function"
    },
    "kotlin.random.Default.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.random.Default.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.random.Default.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.random.Default_instance": {
        "size": 50,
        "type": "field"
    },
    "kotlin.random.Default_getInstance()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.random.Random": {
        "size": 14758,
        "type": "class"
    },
    "kotlin.random.Random.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.random.Random.nextBits(Int)": {
        "size": 43,
        "type": "function"
    },
    "kotlin.random.Random.nextInt()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.random.Random.nextInt(Int)": {
        "size": 160,
        "type": "function"
    },
    "kotlin.random.Random.nextInt(Int, Int)": {
        "size": 1575,
        "type": "function"
    },
    "kotlin.random.Random.nextLong()": {
        "size": 753,
        "type": "function"
    },
    "kotlin.random.Random.nextLong(Long)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.random.Random.nextLong(Long, Long)": {
        "size": 3392,
        "type": "function"
    },
    "kotlin.random.Random.nextBoolean()": {
        "size": 199,
        "type": "function"
    },
    "kotlin.random.Random.nextDouble()": {
        "size": 216,
        "type": "function"
    },
    "kotlin.random.Random.nextDouble(Double)": {
        "size": 174,
        "type": "function"
    },
    "kotlin.random.Random.nextDouble(Double, Double)": {
        "size": 1208,
        "type": "function"
    },
    "kotlin.random.Random.nextFloat()": {
        "size": 508,
        "type": "function"
    },
    "kotlin.random.Random.nextBytes(ByteArray, Int, Int)": {
        "size": 4805,
        "type": "function"
    },
    "kotlin.random.Random.nextBytes(ByteArray)": {
        "size": 211,
        "type": "function"
    },
    "kotlin.random.Random.nextBytes(Int)": {
        "size": 176,
        "type": "function"
    },
    "kotlin.random.Random.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.random.Random.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.random.Random.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.random.checkRangeBounds(Int, Int)": {
        "size": 746,
        "type": "function"
    },
    "kotlin.random.fastLog2(Int)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.random.checkRangeBounds(Long, Long)": {
        "size": 750,
        "type": "function"
    },
    "kotlin.random.checkRangeBounds(Double, Double)": {
        "size": 756,
        "type": "function"
    },
    "kotlin.random.boundsErrorMessage(Any, Any)": {
        "size": 324,
        "type": "function"
    },
    "kotlin.random.Random(Int)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.random.takeUpperBits(Int)": {
        "size": 346,
        "type": "function"
    },
    "kotlin.random.nextInt(IntRange)": {
        "size": 675,
        "type": "function"
    },
    "kotlin.random.nextLong(LongRange)": {
        "size": 1414,
        "type": "function"
    },
    "kotlin.random.Random(Long)": {
        "size": 299,
        "type": "function"
    },
    "kotlin.random.nextULong()": {
        "size": 368,
        "type": "function"
    },
    "kotlin.random.nextUInt()": {
        "size": 361,
        "type": "function"
    },
    "kotlin.random.nextUInt(UInt)": {
        "size": 191,
        "type": "function"
    },
    "kotlin.random.nextUInt(UInt, UInt)": {
        "size": 953,
        "type": "function"
    },
    "kotlin.random.nextUInt(UIntRange)": {
        "size": 2430,
        "type": "function"
    },
    "kotlin.random.nextULong(ULong)": {
        "size": 196,
        "type": "function"
    },
    "kotlin.random.nextULong(ULong, ULong)": {
        "size": 998,
        "type": "function"
    },
    "kotlin.random.nextULong(ULongRange)": {
        "size": 4004,
        "type": "function"
    },
    "kotlin.random.nextUBytes(Int)": {
        "size": 378,
        "type": "function"
    },
    "kotlin.random.nextUBytes(UByteArray)": {
        "size": 307,
        "type": "function"
    },
    "kotlin.random.nextUBytes(UByteArray, Int, Int)": {
        "size": 379,
        "type": "function"
    },
    "kotlin.random.checkUIntRangeBounds(UInt, UInt)": {
        "size": 947,
        "type": "function"
    },
    "kotlin.random.checkULongRangeBounds(ULong, ULong)": {
        "size": 955,
        "type": "function"
    },
    "kotlin.random.XorWowRandom": {
        "size": 4736,
        "type": "class"
    },
    "kotlin.random.XorWowRandom.<init>(Int, Int, Int, Int, Int, Int)": {
        "size": 2080,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.x": {
        "size": 19,
        "type": "field"
    },
    "kotlin.random.XorWowRandom.y": {
        "size": 19,
        "type": "field"
    },
    "kotlin.random.XorWowRandom.z": {
        "size": 19,
        "type": "field"
    },
    "kotlin.random.XorWowRandom.w": {
        "size": 19,
        "type": "field"
    },
    "kotlin.random.XorWowRandom.v": {
        "size": 19,
        "type": "field"
    },
    "kotlin.random.XorWowRandom.addend": {
        "size": 24,
        "type": "field"
    },
    "kotlin.random.XorWowRandom.<init>(Int, Int)": {
        "size": 362,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextInt()": {
        "size": 793,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextBits(Int)": {
        "size": 192,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextInt(Int)": {
        "size": 50,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextInt(Int, Int)": {
        "size": 61,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextLong()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextLong(Long)": {
        "size": 53,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextLong(Long, Long)": {
        "size": 65,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextBoolean()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextDouble()": {
        "size": 46,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextDouble(Double)": {
        "size": 59,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextDouble(Double, Double)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextFloat()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextBytes(ByteArray, Int, Int)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextBytes(ByteArray)": {
        "size": 64,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.nextBytes(Int)": {
        "size": 57,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.random.XorWowRandom.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.Companion": {
        "size": 529,
        "type": "class"
    },
    "kotlin.ranges.Companion.<init>()": {
        "size": 267,
        "type": "function"
    },
    "kotlin.ranges.Companion.EMPTY": {
        "size": 48,
        "type": "field"
    },
    "kotlin.ranges.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ranges.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.ranges.Companion_getInstance()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.ranges.IntRange": {
        "size": 3491,
        "type": "class"
    },
    "kotlin.ranges.IntRange.<init>(Int, Int)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.ranges.IntRange.<get-start>()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.ranges.IntRange.<get-endInclusive>()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.ranges.IntRange.<get-endExclusive>()": {
        "size": 492,
        "type": "function"
    },
    "kotlin.ranges.IntRange.contains(Int)": {
        "size": 270,
        "type": "function"
    },
    "kotlin.ranges.IntRange.contains(T)": {
        "size": 219,
        "type": "function"
    },
    "kotlin.ranges.IntRange.isEmpty()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.ranges.IntRange.equals(Any?)": {
        "size": 688,
        "type": "function"
    },
    "kotlin.ranges.IntRange.hashCode()": {
        "size": 276,
        "type": "function"
    },
    "kotlin.ranges.IntRange.toString()": {
        "size": 310,
        "type": "function"
    },
    "kotlin.ranges.IntRange.iterator()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.ranges.CharRange": {
        "size": 4381,
        "type": "class"
    },
    "kotlin.ranges.CharRange.<init>(Char, Char)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.ranges.CharRange.<get-start>()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.ranges.CharRange.<get-endInclusive>()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.ranges.CharRange.<get-endExclusive>()": {
        "size": 719,
        "type": "function"
    },
    "kotlin.ranges.CharRange.contains(Char)": {
        "size": 355,
        "type": "function"
    },
    "kotlin.ranges.CharRange.contains(T)": {
        "size": 221,
        "type": "function"
    },
    "kotlin.ranges.CharRange.isEmpty()": {
        "size": 221,
        "type": "function"
    },
    "kotlin.ranges.CharRange.equals(Any?)": {
        "size": 694,
        "type": "function"
    },
    "kotlin.ranges.CharRange.hashCode()": {
        "size": 730,
        "type": "function"
    },
    "kotlin.ranges.CharRange.toString()": {
        "size": 312,
        "type": "function"
    },
    "kotlin.ranges.CharRange.iterator()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.ranges.LongRange": {
        "size": 4709,
        "type": "class"
    },
    "kotlin.ranges.LongRange.<init>(Long, Long)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.ranges.LongRange.<get-start>()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.ranges.LongRange.<get-endInclusive>()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.ranges.LongRange.<get-endExclusive>()": {
        "size": 706,
        "type": "function"
    },
    "kotlin.ranges.LongRange.contains(Long)": {
        "size": 273,
        "type": "function"
    },
    "kotlin.ranges.LongRange.contains(T)": {
        "size": 221,
        "type": "function"
    },
    "kotlin.ranges.LongRange.isEmpty()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.ranges.LongRange.equals(Any?)": {
        "size": 694,
        "type": "function"
    },
    "kotlin.ranges.LongRange.hashCode()": {
        "size": 1175,
        "type": "function"
    },
    "kotlin.ranges.LongRange.toString()": {
        "size": 312,
        "type": "function"
    },
    "kotlin.ranges.LongRange.iterator()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.ranges.IntProgressionIterator": {
        "size": 1885,
        "type": "class"
    },
    "kotlin.ranges.IntProgressionIterator.<init>(Int, Int, Int)": {
        "size": 428,
        "type": "function"
    },
    "kotlin.ranges.IntProgressionIterator.step": {
        "size": 40,
        "type": "field"
    },
    "kotlin.ranges.IntProgressionIterator.finalElement": {
        "size": 48,
        "type": "field"
    },
    "kotlin.ranges.IntProgressionIterator.hasNext": {
        "size": 29,
        "type": "field"
    },
    "kotlin.ranges.IntProgressionIterator.next": {
        "size": 22,
        "type": "field"
    },
    "kotlin.ranges.IntProgressionIterator.hasNext()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.ranges.IntProgressionIterator.nextInt()": {
        "size": 788,
        "type": "function"
    },
    "kotlin.ranges.IntProgressionIterator.next()": {
        "size": 46,
        "type": "function"
    },
    "kotlin.ranges.IntProgressionIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ranges.IntProgressionIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.IntProgressionIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.CharProgressionIterator": {
        "size": 2252,
        "type": "class"
    },
    "kotlin.ranges.CharProgressionIterator.<init>(Char, Char, Int)": {
        "size": 743,
        "type": "function"
    },
    "kotlin.ranges.CharProgressionIterator.step": {
        "size": 40,
        "type": "field"
    },
    "kotlin.ranges.CharProgressionIterator.finalElement": {
        "size": 48,
        "type": "field"
    },
    "kotlin.ranges.CharProgressionIterator.hasNext": {
        "size": 29,
        "type": "field"
    },
    "kotlin.ranges.CharProgressionIterator.next": {
        "size": 22,
        "type": "field"
    },
    "kotlin.ranges.CharProgressionIterator.hasNext()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.ranges.CharProgressionIterator.nextChar()": {
        "size": 819,
        "type": "function"
    },
    "kotlin.ranges.CharProgressionIterator.next()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.ranges.CharProgressionIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ranges.CharProgressionIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.CharProgressionIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.LongProgressionIterator": {
        "size": 1930,
        "type": "class"
    },
    "kotlin.ranges.LongProgressionIterator.<init>(Long, Long, Long)": {
        "size": 458,
        "type": "function"
    },
    "kotlin.ranges.LongProgressionIterator.step": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.LongProgressionIterator.finalElement": {
        "size": 49,
        "type": "field"
    },
    "kotlin.ranges.LongProgressionIterator.hasNext": {
        "size": 29,
        "type": "field"
    },
    "kotlin.ranges.LongProgressionIterator.next": {
        "size": 23,
        "type": "field"
    },
    "kotlin.ranges.LongProgressionIterator.hasNext()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.ranges.LongProgressionIterator.nextLong()": {
        "size": 795,
        "type": "function"
    },
    "kotlin.ranges.LongProgressionIterator.next()": {
        "size": 47,
        "type": "function"
    },
    "kotlin.ranges.LongProgressionIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ranges.LongProgressionIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.LongProgressionIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.Companion.fromClosedRange(Int, Int, Int)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.ranges.IntProgression": {
        "size": 4023,
        "type": "class"
    },
    "kotlin.ranges.IntProgression.<init>(Int, Int, Int)": {
        "size": 655,
        "type": "function"
    },
    "kotlin.ranges.IntProgression.first": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.IntProgression.last": {
        "size": 40,
        "type": "field"
    },
    "kotlin.ranges.IntProgression.step": {
        "size": 40,
        "type": "field"
    },
    "kotlin.ranges.IntProgression.iterator()": {
        "size": 246,
        "type": "function"
    },
    "kotlin.ranges.IntProgression.isEmpty()": {
        "size": 321,
        "type": "function"
    },
    "kotlin.ranges.IntProgression.equals(Any?)": {
        "size": 941,
        "type": "function"
    },
    "kotlin.ranges.IntProgression.hashCode()": {
        "size": 376,
        "type": "function"
    },
    "kotlin.ranges.IntProgression.toString()": {
        "size": 1034,
        "type": "function"
    },
    "kotlin.ranges.Companion.fromClosedRange(Char, Char, Int)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.ranges.CharProgression": {
        "size": 4881,
        "type": "class"
    },
    "kotlin.ranges.CharProgression.<init>(Char, Char, Int)": {
        "size": 905,
        "type": "function"
    },
    "kotlin.ranges.CharProgression.first": {
        "size": 42,
        "type": "field"
    },
    "kotlin.ranges.CharProgression.last": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.CharProgression.step": {
        "size": 40,
        "type": "field"
    },
    "kotlin.ranges.CharProgression.iterator()": {
        "size": 250,
        "type": "function"
    },
    "kotlin.ranges.CharProgression.isEmpty()": {
        "size": 405,
        "type": "function"
    },
    "kotlin.ranges.CharProgression.equals(Any?)": {
        "size": 949,
        "type": "function"
    },
    "kotlin.ranges.CharProgression.hashCode()": {
        "size": 830,
        "type": "function"
    },
    "kotlin.ranges.CharProgression.toString()": {
        "size": 1036,
        "type": "function"
    },
    "kotlin.ranges.Companion.fromClosedRange(Long, Long, Long)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.ranges.LongProgression": {
        "size": 5784,
        "type": "class"
    },
    "kotlin.ranges.LongProgression.<init>(Long, Long, Long)": {
        "size": 670,
        "type": "function"
    },
    "kotlin.ranges.LongProgression.first": {
        "size": 42,
        "type": "field"
    },
    "kotlin.ranges.LongProgression.last": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.LongProgression.step": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.LongProgression.iterator()": {
        "size": 250,
        "type": "function"
    },
    "kotlin.ranges.LongProgression.isEmpty()": {
        "size": 349,
        "type": "function"
    },
    "kotlin.ranges.LongProgression.equals(Any?)": {
        "size": 949,
        "type": "function"
    },
    "kotlin.ranges.LongProgression.hashCode()": {
        "size": 1956,
        "type": "function"
    },
    "kotlin.ranges.LongProgression.toString()": {
        "size": 1065,
        "type": "function"
    },
    "kotlin.ranges.ClosedRange": {
        "size": 722,
        "type": "class"
    },
    "kotlin.ranges.ClosedRange.<get-start>()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.ranges.ClosedRange.<get-endInclusive>()": {
        "size": 38,
        "type": "function"
    },
    "kotlin.ranges.ClosedRange.contains(T)": {
        "size": 242,
        "type": "function"
    },
    "kotlin.ranges.ClosedRange.isEmpty()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.ranges.ClosedRange.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ranges.ClosedRange.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.ClosedRange.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.OpenEndRange": {
        "size": 708,
        "type": "class"
    },
    "kotlin.ranges.OpenEndRange.<get-start>()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.ranges.OpenEndRange.<get-endExclusive>()": {
        "size": 38,
        "type": "function"
    },
    "kotlin.ranges.OpenEndRange.contains(T)": {
        "size": 242,
        "type": "function"
    },
    "kotlin.ranges.OpenEndRange.isEmpty()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.ranges.OpenEndRange.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatingPointRange": {
        "size": 719,
        "type": "class"
    },
    "kotlin.ranges.ClosedFloatingPointRange.contains(T)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatingPointRange.isEmpty()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(T, T)": {
        "size": 52,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatingPointRange.<get-start>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatingPointRange.<get-endInclusive>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatingPointRange.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.rangeTo(Double)": {
        "size": 175,
        "type": "function"
    },
    "kotlin.ranges.rangeTo(T)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.ranges.rangeUntil(Double)": {
        "size": 230,
        "type": "function"
    },
    "kotlin.ranges.rangeTo(Float)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.ranges.rangeUntil(Float)": {
        "size": 226,
        "type": "function"
    },
    "kotlin.ranges.rangeUntil(T)": {
        "size": 242,
        "type": "function"
    },
    "kotlin.ranges.checkStepIsPositive(Boolean, Number)": {
        "size": 376,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange": {
        "size": 3738,
        "type": "class"
    },
    "kotlin.ranges.ClosedDoubleRange.<init>(Double, Double)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange._start": {
        "size": 45,
        "type": "field"
    },
    "kotlin.ranges.ClosedDoubleRange._endInclusive": {
        "size": 52,
        "type": "field"
    },
    "kotlin.ranges.ClosedDoubleRange.<get-start>()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.<get-endInclusive>()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.lessThanOrEquals(Double, Double)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.lessThanOrEquals(T, T)": {
        "size": 355,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.contains(Double)": {
        "size": 297,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.contains(T)": {
        "size": 225,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.isEmpty()": {
        "size": 231,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.equals(Any?)": {
        "size": 762,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.hashCode()": {
        "size": 366,
        "type": "function"
    },
    "kotlin.ranges.ClosedDoubleRange.toString()": {
        "size": 338,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange": {
        "size": 2868,
        "type": "class"
    },
    "kotlin.ranges.ComparableRange.<init>(T, T)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange.<get-start>()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange.start": {
        "size": 39,
        "type": "field"
    },
    "kotlin.ranges.ComparableRange.<get-endInclusive>()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange.endInclusive": {
        "size": 46,
        "type": "field"
    },
    "kotlin.ranges.ComparableRange.equals(Any?)": {
        "size": 1157,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange.hashCode()": {
        "size": 456,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange.toString()": {
        "size": 352,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange.contains(T)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.ranges.ComparableRange.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange": {
        "size": 3258,
        "type": "class"
    },
    "kotlin.ranges.OpenEndDoubleRange.<init>(Double, Double)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange._start": {
        "size": 45,
        "type": "field"
    },
    "kotlin.ranges.OpenEndDoubleRange._endExclusive": {
        "size": 52,
        "type": "field"
    },
    "kotlin.ranges.OpenEndDoubleRange.<get-start>()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange.<get-endExclusive>()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange.contains(Double)": {
        "size": 299,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange.contains(T)": {
        "size": 225,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange.isEmpty()": {
        "size": 233,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange.equals(Any?)": {
        "size": 768,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange.hashCode()": {
        "size": 368,
        "type": "function"
    },
    "kotlin.ranges.OpenEndDoubleRange.toString()": {
        "size": 341,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange": {
        "size": 3699,
        "type": "class"
    },
    "kotlin.ranges.ClosedFloatRange.<init>(Float, Float)": {
        "size": 168,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange._start": {
        "size": 44,
        "type": "field"
    },
    "kotlin.ranges.ClosedFloatRange._endInclusive": {
        "size": 51,
        "type": "field"
    },
    "kotlin.ranges.ClosedFloatRange.<get-start>()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.<get-endInclusive>()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.lessThanOrEquals(Float, Float)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.lessThanOrEquals(T, T)": {
        "size": 351,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.contains(Float)": {
        "size": 294,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.contains(T)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.isEmpty()": {
        "size": 229,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.equals(Any?)": {
        "size": 756,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.hashCode()": {
        "size": 362,
        "type": "function"
    },
    "kotlin.ranges.ClosedFloatRange.toString()": {
        "size": 336,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange": {
        "size": 3225,
        "type": "class"
    },
    "kotlin.ranges.OpenEndFloatRange.<init>(Float, Float)": {
        "size": 168,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange._start": {
        "size": 44,
        "type": "field"
    },
    "kotlin.ranges.OpenEndFloatRange._endExclusive": {
        "size": 51,
        "type": "field"
    },
    "kotlin.ranges.OpenEndFloatRange.<get-start>()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange.<get-endExclusive>()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange.contains(Float)": {
        "size": 296,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange.contains(T)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange.isEmpty()": {
        "size": 231,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange.equals(Any?)": {
        "size": 762,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange.hashCode()": {
        "size": 364,
        "type": "function"
    },
    "kotlin.ranges.OpenEndFloatRange.toString()": {
        "size": 339,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange": {
        "size": 2996,
        "type": "class"
    },
    "kotlin.ranges.ComparableOpenEndRange.<init>(T, T)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange.<get-start>()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange.start": {
        "size": 39,
        "type": "field"
    },
    "kotlin.ranges.ComparableOpenEndRange.<get-endExclusive>()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange.endExclusive": {
        "size": 46,
        "type": "field"
    },
    "kotlin.ranges.ComparableOpenEndRange.equals(Any?)": {
        "size": 1220,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange.hashCode()": {
        "size": 470,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange.toString()": {
        "size": 367,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange.contains(T)": {
        "size": 62,
        "type": "function"
    },
    "kotlin.ranges.ComparableOpenEndRange.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.reflect.safeCast(Any?)": {
        "size": 264,
        "type": "function"
    },
    "kotlin.reflect.cast(Any?)": {
        "size": 385,
        "type": "function"
    },
    "kotlin.reflect.KClassifier": {
        "size": 211,
        "type": "class"
    },
    "kotlin.reflect.KClassifier.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.reflect.KClassifier.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.reflect.KClassifier.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.reflect.KTypeProjection": {
        "size": 3948,
        "type": "class"
    },
    "kotlin.reflect.KTypeProjection.<init>(KVariance?, KType?)": {
        "size": 1410,
        "type": "function"
    },
    "kotlin.reflect.KTypeProjection.variance": {
        "size": 51,
        "type": "field"
    },
    "kotlin.reflect.KTypeProjection.type": {
        "size": 43,
        "type": "field"
    },
    "kotlin.reflect.KTypeProjection.toString()": {
        "size": 662,
        "type": "function"
    },
    "kotlin.reflect.KTypeProjection.hashCode()": {
        "size": 559,
        "type": "function"
    },
    "kotlin.reflect.KTypeProjection.equals(Any?)": {
        "size": 953,
        "type": "function"
    },
    "kotlin.reflect.KVariance_INVARIANT_instance": {
        "size": 64,
        "type": "field"
    },
    "kotlin.reflect.KVariance_IN_instance": {
        "size": 57,
        "type": "field"
    },
    "kotlin.reflect.KVariance_OUT_instance": {
        "size": 58,
        "type": "field"
    },
    "kotlin.reflect.values()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.reflect.KVariance_entriesInitialized": {
        "size": 69,
        "type": "field"
    },
    "kotlin.reflect.KVariance_initEntries()": {
        "size": 349,
        "type": "function"
    },
    "kotlin.reflect.KVariance": {
        "size": 450,
        "type": "class"
    },
    "kotlin.reflect.KVariance.<init>(String, Int)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.reflect.KVariance.compareTo(KVariance)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.reflect.KVariance.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.reflect.KVariance.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.reflect.KVariance.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.reflect.KVariance_INVARIANT_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "kotlin.reflect.KVariance_IN_getInstance()": {
        "size": 105,
        "type": "function"
    },
    "kotlin.reflect.KVariance_OUT_getInstance()": {
        "size": 107,
        "type": "function"
    },
    "kotlin.text.appendElement(T, Function1<T, CharSequence>?)": {
        "size": 848,
        "type": "function"
    },
    "kotlin.text.equals(Char, Boolean)": {
        "size": 458,
        "type": "function"
    },
    "kotlin.text.digitToInt()": {
        "size": 880,
        "type": "function"
    },
    "kotlin.text.digitToIntOrNull()": {
        "size": 650,
        "type": "function"
    },
    "kotlin.text.digitToInt(Int)": {
        "size": 656,
        "type": "function"
    },
    "kotlin.text.digitToIntOrNull(Int)": {
        "size": 715,
        "type": "function"
    },
    "kotlin.text.digitToChar()": {
        "size": 665,
        "type": "function"
    },
    "kotlin.text.digitToChar(Int)": {
        "size": 1843,
        "type": "function"
    },
    "kotlin.text.titlecase()": {
        "size": 96,
        "type": "function"
    },
    "kotlin.text.isSurrogate()": {
        "size": 212,
        "type": "function"
    },
    "kotlin.text.<get-HEX_DIGITS_TO_DECIMAL>()": {
        "size": 128,
        "type": "function"
    },
    "kotlin.text.HEX_DIGITS_TO_DECIMAL": {
        "size": 69,
        "type": "field"
    },
    "kotlin.text.LOWER_CASE_HEX_DIGITS": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.UPPER_CASE_HEX_DIGITS": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.toHexString(HexFormat)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.text.hexToByteArray(HexFormat)": {
        "size": 244,
        "type": "function"
    },
    "kotlin.text.hexToByteArray$default(HexFormat?, Int, Any?)": {
        "size": 435,
        "type": "function"
    },
    "kotlin.text.formattedStringLength(Int, Int, Int, Int, Int, Int, Int)": {
        "size": 4125,
        "type": "function"
    },
    "kotlin.text.parsedByteArrayMaxSize(Int, Int, Int, Int, Int, Int, Int)": {
        "size": 5285,
        "type": "function"
    },
    "kotlin.text.hexToByte(HexFormat)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.text.hexToByte$default(HexFormat?, Int, Any?)": {
        "size": 420,
        "type": "function"
    },
    "kotlin.text.hexToShort(HexFormat)": {
        "size": 232,
        "type": "function"
    },
    "kotlin.text.hexToShort$default(HexFormat?, Int, Any?)": {
        "size": 423,
        "type": "function"
    },
    "kotlin.text.hexToInt(HexFormat)": {
        "size": 226,
        "type": "function"
    },
    "kotlin.text.hexToInt$default(HexFormat?, Int, Any?)": {
        "size": 417,
        "type": "function"
    },
    "kotlin.text.hexToLong(HexFormat)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.text.hexToLong$default(HexFormat?, Int, Any?)": {
        "size": 420,
        "type": "function"
    },
    "kotlin.text.toHexString(Int, Int, HexFormat)": {
        "size": 5637,
        "type": "function"
    },
    "kotlin.text.hexToByteArray(Int, Int, HexFormat)": {
        "size": 3753,
        "type": "function"
    },
    "kotlin.text.charsPerSet(Long, Int, Int)": {
        "size": 1625,
        "type": "function"
    },
    "kotlin.text.wholeElementsPerSet(Long, Long, Int)": {
        "size": 765,
        "type": "function"
    },
    "kotlin.text.toHexStringImpl(HexFormat, Int)": {
        "size": 3350,
        "type": "function"
    },
    "kotlin.text.hexToByte(Int, Int, HexFormat)": {
        "size": 491,
        "type": "function"
    },
    "kotlin.text.hexToShort(Int, Int, HexFormat)": {
        "size": 496,
        "type": "function"
    },
    "kotlin.text.hexToInt(Int, Int, HexFormat)": {
        "size": 285,
        "type": "function"
    },
    "kotlin.text.hexToLong(Int, Int, HexFormat)": {
        "size": 262,
        "type": "function"
    },
    "kotlin.text.checkNewLineAt(Int, Int)": {
        "size": 1031,
        "type": "function"
    },
    "kotlin.text.checkContainsAt(String, Int, Int, String)": {
        "size": 998,
        "type": "function"
    },
    "kotlin.text.checkHexLength(Int, Int, Int, Boolean)": {
        "size": 1232,
        "type": "function"
    },
    "kotlin.text.decimalFromHexDigitAt(Int)": {
        "size": 930,
        "type": "function"
    },
    "kotlin.text.hexToLongImpl(Int, Int, HexFormat, Int)": {
        "size": 2457,
        "type": "function"
    },
    "kotlin.text.properties initialized HexExtensions.kt": {
        "size": 78,
        "type": "field"
    },
    "kotlin.text.<init properties HexExtensions.kt>()": {
        "size": 5767,
        "type": "function"
    },
    "kotlin.text.Builder": {
        "size": 3344,
        "type": "class"
    },
    "kotlin.text.Builder.<init>()": {
        "size": 520,
        "type": "function"
    },
    "kotlin.text.Builder.<set-bytesPerLine>(Int)": {
        "size": 278,
        "type": "function"
    },
    "kotlin.text.Builder.bytesPerLine": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.Builder.<set-bytesPerGroup>(Int)": {
        "size": 281,
        "type": "function"
    },
    "kotlin.text.Builder.bytesPerGroup": {
        "size": 31,
        "type": "field"
    },
    "kotlin.text.Builder.groupSeparator": {
        "size": 35,
        "type": "field"
    },
    "kotlin.text.Builder.<set-byteSeparator>(String)": {
        "size": 496,
        "type": "function"
    },
    "kotlin.text.Builder.byteSeparator": {
        "size": 34,
        "type": "field"
    },
    "kotlin.text.Builder.<set-bytePrefix>(String)": {
        "size": 487,
        "type": "function"
    },
    "kotlin.text.Builder.bytePrefix": {
        "size": 31,
        "type": "field"
    },
    "kotlin.text.Builder.<set-byteSuffix>(String)": {
        "size": 487,
        "type": "function"
    },
    "kotlin.text.Builder.byteSuffix": {
        "size": 31,
        "type": "field"
    },
    "kotlin.text.Builder.build()": {
        "size": 874,
        "type": "function"
    },
    "kotlin.text.Builder.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.Builder.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.Builder.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.Companion.Default": {
        "size": 55,
        "type": "field"
    },
    "kotlin.text.Companion_getInstance()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.text.Builder.<set-prefix>(String)": {
        "size": 475,
        "type": "function"
    },
    "kotlin.text.Builder.prefix": {
        "size": 27,
        "type": "field"
    },
    "kotlin.text.Builder.<set-suffix>(String)": {
        "size": 475,
        "type": "function"
    },
    "kotlin.text.Builder.suffix": {
        "size": 27,
        "type": "field"
    },
    "kotlin.text.Builder.removeLeadingZeros": {
        "size": 40,
        "type": "field"
    },
    "kotlin.text.BytesHexFormat": {
        "size": 5863,
        "type": "class"
    },
    "kotlin.text.BytesHexFormat.<init>(Int, Int, String, String, String, String)": {
        "size": 440,
        "type": "function"
    },
    "kotlin.text.BytesHexFormat.bytesPerLine": {
        "size": 48,
        "type": "field"
    },
    "kotlin.text.BytesHexFormat.bytesPerGroup": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.BytesHexFormat.groupSeparator": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.BytesHexFormat.byteSeparator": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.BytesHexFormat.bytePrefix": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.BytesHexFormat.byteSuffix": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.BytesHexFormat.toString()": {
        "size": 1573,
        "type": "function"
    },
    "kotlin.text.BytesHexFormat.appendOptionsTo(StringBuilder, String)": {
        "size": 3084,
        "type": "function"
    },
    "kotlin.text.BytesHexFormat.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.BytesHexFormat.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.NumberHexFormat": {
        "size": 3655,
        "type": "class"
    },
    "kotlin.text.NumberHexFormat.<init>(String, String, Boolean)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.text.NumberHexFormat.prefix": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.NumberHexFormat.suffix": {
        "size": 45,
        "type": "field"
    },
    "kotlin.text.NumberHexFormat.removeLeadingZeros": {
        "size": 58,
        "type": "field"
    },
    "kotlin.text.NumberHexFormat.toString()": {
        "size": 1576,
        "type": "function"
    },
    "kotlin.text.NumberHexFormat.appendOptionsTo(StringBuilder, String)": {
        "size": 1347,
        "type": "function"
    },
    "kotlin.text.NumberHexFormat.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.NumberHexFormat.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.Builder.upperCase": {
        "size": 31,
        "type": "field"
    },
    "kotlin.text.Builder.<get-bytes>()": {
        "size": 361,
        "type": "function"
    },
    "kotlin.text.Builder._bytes": {
        "size": 29,
        "type": "field"
    },
    "kotlin.text.Builder.<get-number>()": {
        "size": 365,
        "type": "function"
    },
    "kotlin.text.Builder._number": {
        "size": 30,
        "type": "field"
    },
    "kotlin.text.Companion.UpperCase": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.HexFormat": {
        "size": 5129,
        "type": "class"
    },
    "kotlin.text.HexFormat.<init>(Boolean, BytesHexFormat, NumberHexFormat)": {
        "size": 230,
        "type": "function"
    },
    "kotlin.text.HexFormat.upperCase": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.HexFormat.bytes": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.HexFormat.number": {
        "size": 54,
        "type": "field"
    },
    "kotlin.text.HexFormat.toString()": {
        "size": 4302,
        "type": "function"
    },
    "kotlin.text.HexFormat.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.HexFormat.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.trimIndent()": {
        "size": 109,
        "type": "function"
    },
    "kotlin.text.trimMargin(String)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.text.trimMargin$default(String?, Int, Any?)": {
        "size": 389,
        "type": "function"
    },
    "kotlin.text.replaceIndentByMargin(String, String)": {
        "size": 10869,
        "type": "function"
    },
    "kotlin.text.replaceIndentByMargin$default(String?, String?, Int, Any?)": {
        "size": 636,
        "type": "function"
    },
    "kotlin.text.replaceIndent(String)": {
        "size": 9355,
        "type": "function"
    },
    "kotlin.text.prependIndent(String)": {
        "size": 483,
        "type": "function"
    },
    "kotlin.text.getIndentFunction(String)": {
        "size": 430,
        "type": "function"
    },
    "kotlin.text.indentWidth()": {
        "size": 1915,
        "type": "function"
    },
    "kotlin.text.prependIndent$lambda": {
        "size": 954,
        "type": "class"
    },
    "kotlin.text.prependIndent$lambda.<init>(String)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.text.prependIndent$lambda.invoke(String)": {
        "size": 392,
        "type": "function"
    },
    "kotlin.text.prependIndent$lambda.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "kotlin.text.prependIndent$lambda.$indent": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.getIndentFunction$lambda": {
        "size": 760,
        "type": "class"
    },
    "kotlin.text.getIndentFunction$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.getIndentFunction$lambda.invoke(String)": {
        "size": 208,
        "type": "function"
    },
    "kotlin.text.getIndentFunction$lambda.invoke(P1)": {
        "size": 274,
        "type": "function"
    },
    "kotlin.text.getIndentFunction$lambda.<init>(String)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.text.getIndentFunction$lambda.$indent": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.append(Array<out String?>)": {
        "size": 607,
        "type": "function"
    },
    "kotlin.text.append(Array<out Any?>)": {
        "size": 565,
        "type": "function"
    },
    "kotlin.text.toByteOrNull()": {
        "size": 109,
        "type": "function"
    },
    "kotlin.text.toByteOrNull(Int)": {
        "size": 682,
        "type": "function"
    },
    "kotlin.text.toShortOrNull()": {
        "size": 112,
        "type": "function"
    },
    "kotlin.text.toShortOrNull(Int)": {
        "size": 693,
        "type": "function"
    },
    "kotlin.text.toIntOrNull()": {
        "size": 106,
        "type": "function"
    },
    "kotlin.text.toIntOrNull(Int)": {
        "size": 4227,
        "type": "function"
    },
    "kotlin.text.toLongOrNull()": {
        "size": 109,
        "type": "function"
    },
    "kotlin.text.toLongOrNull(Int)": {
        "size": 5371,
        "type": "function"
    },
    "kotlin.text.numberFormatError(String)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.text.removePrefix(CharSequence)": {
        "size": 407,
        "type": "function"
    },
    "kotlin.text.<get-indices>()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.text.indexOf(String, Int, Boolean)": {
        "size": 537,
        "type": "function"
    },
    "kotlin.text.indexOf$default(String, Int?, Boolean?, Int, Any?)": {
        "size": 775,
        "type": "function"
    },
    "kotlin.text.lastIndexOf(String, Int, Boolean)": {
        "size": 459,
        "type": "function"
    },
    "kotlin.text.lastIndexOf$default(String, Int?, Boolean?, Int, Any?)": {
        "size": 806,
        "type": "function"
    },
    "kotlin.text.<get-lastIndex>()": {
        "size": 112,
        "type": "function"
    },
    "kotlin.text.iterator()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.text.startsWith(CharSequence, Boolean)": {
        "size": 709,
        "type": "function"
    },
    "kotlin.text.startsWith$default(CharSequence, Boolean?, Int, Any?)": {
        "size": 480,
        "type": "function"
    },
    "kotlin.text.indexOf(CharSequence, Int, Int, Boolean, Boolean)": {
        "size": 3139,
        "type": "function"
    },
    "kotlin.text.indexOf$default(CharSequence, Int, Int, Boolean, Boolean?, Int, Any?)": {
        "size": 568,
        "type": "function"
    },
    "kotlin.text.regionMatchesImpl(Int, CharSequence, Int, Int, Boolean)": {
        "size": 1388,
        "type": "function"
    },
    "kotlin.text.contains(CharSequence, Boolean)": {
        "size": 690,
        "type": "function"
    },
    "kotlin.text.contains$default(CharSequence, Boolean?, Int, Any?)": {
        "size": 536,
        "type": "function"
    },
    "kotlin.text.startsWith(Char, Boolean)": {
        "size": 236,
        "type": "function"
    },
    "kotlin.text.startsWith$default(Char, Boolean?, Int, Any?)": {
        "size": 466,
        "type": "function"
    },
    "kotlin.text.endsWith(Char, Boolean)": {
        "size": 257,
        "type": "function"
    },
    "kotlin.text.endsWith$default(Char, Boolean?, Int, Any?)": {
        "size": 462,
        "type": "function"
    },
    "kotlin.text.contains(Char, Boolean)": {
        "size": 341,
        "type": "function"
    },
    "kotlin.text.contains$default(Char, Boolean?, Int, Any?)": {
        "size": 525,
        "type": "function"
    },
    "kotlin.text.split(Array<out String>, Boolean, Int)": {
        "size": 1862,
        "type": "function"
    },
    "kotlin.text.split$default(Array<out String>, Boolean?, Int?, Int, Any?)": {
        "size": 779,
        "type": "function"
    },
    "kotlin.text.substring(IntRange)": {
        "size": 255,
        "type": "function"
    },
    "kotlin.text.substringAfterLast(Char, String)": {
        "size": 461,
        "type": "function"
    },
    "kotlin.text.substringAfterLast$default(Char, String?, Int, Any?)": {
        "size": 458,
        "type": "function"
    },
    "kotlin.text.endsWith(CharSequence, Boolean)": {
        "size": 781,
        "type": "function"
    },
    "kotlin.text.endsWith$default(CharSequence, Boolean?, Int, Any?)": {
        "size": 476,
        "type": "function"
    },
    "kotlin.text.commonPrefixWith(CharSequence, Boolean)": {
        "size": 1386,
        "type": "function"
    },
    "kotlin.text.commonSuffixWith(CharSequence, Boolean)": {
        "size": 1603,
        "type": "function"
    },
    "kotlin.text.replaceRange(Int, Int, CharSequence)": {
        "size": 821,
        "type": "function"
    },
    "kotlin.text.replaceRange(IntRange, CharSequence)": {
        "size": 257,
        "type": "function"
    },
    "kotlin.text.removeRange(Int, Int)": {
        "size": 994,
        "type": "function"
    },
    "kotlin.text.removeRange(IntRange)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.text.substringAfter(Char, String)": {
        "size": 453,
        "type": "function"
    },
    "kotlin.text.substringAfter$default(Char, String?, Int, Any?)": {
        "size": 450,
        "type": "function"
    },
    "kotlin.text.substringBefore(Char, String)": {
        "size": 406,
        "type": "function"
    },
    "kotlin.text.substringBefore$default(Char, String?, Int, Any?)": {
        "size": 452,
        "type": "function"
    },
    "kotlin.text.substringBeforeLast(Char, String)": {
        "size": 414,
        "type": "function"
    },
    "kotlin.text.substringBeforeLast$default(Char, String?, Int, Any?)": {
        "size": 460,
        "type": "function"
    },
    "kotlin.text.substringAfter(String, String)": {
        "size": 473,
        "type": "function"
    },
    "kotlin.text.substringAfter$default(String, String?, Int, Any?)": {
        "size": 452,
        "type": "function"
    },
    "kotlin.text.substringAfterLast(String, String)": {
        "size": 481,
        "type": "function"
    },
    "kotlin.text.substringAfterLast$default(String, String?, Int, Any?)": {
        "size": 460,
        "type": "function"
    },
    "kotlin.text.substringBefore(String, String)": {
        "size": 410,
        "type": "function"
    },
    "kotlin.text.substringBefore$default(String, String?, Int, Any?)": {
        "size": 454,
        "type": "function"
    },
    "kotlin.text.substringBeforeLast(String, String)": {
        "size": 418,
        "type": "function"
    },
    "kotlin.text.substringBeforeLast$default(String, String?, Int, Any?)": {
        "size": 462,
        "type": "function"
    },
    "kotlin.text.replaceAfter(Char, String, String)": {
        "size": 875,
        "type": "function"
    },
    "kotlin.text.replaceAfter$default(Char, String, String?, Int, Any?)": {
        "size": 494,
        "type": "function"
    },
    "kotlin.text.replaceAfterLast(Char, String, String)": {
        "size": 883,
        "type": "function"
    },
    "kotlin.text.replaceAfterLast$default(Char, String, String?, Int, Any?)": {
        "size": 502,
        "type": "function"
    },
    "kotlin.text.replaceBefore(Char, String, String)": {
        "size": 620,
        "type": "function"
    },
    "kotlin.text.replaceBefore$default(Char, String, String?, Int, Any?)": {
        "size": 496,
        "type": "function"
    },
    "kotlin.text.replaceBeforeLast(Char, String, String)": {
        "size": 628,
        "type": "function"
    },
    "kotlin.text.replaceBeforeLast$default(Char, String, String?, Int, Any?)": {
        "size": 504,
        "type": "function"
    },
    "kotlin.text.replaceAfter(String, String, String)": {
        "size": 895,
        "type": "function"
    },
    "kotlin.text.replaceAfter$default(String, String, String?, Int, Any?)": {
        "size": 496,
        "type": "function"
    },
    "kotlin.text.replaceAfterLast(String, String, String)": {
        "size": 903,
        "type": "function"
    },
    "kotlin.text.replaceAfterLast$default(String, String, String?, Int, Any?)": {
        "size": 504,
        "type": "function"
    },
    "kotlin.text.replaceBefore(String, String, String)": {
        "size": 624,
        "type": "function"
    },
    "kotlin.text.replaceBefore$default(String, String, String?, Int, Any?)": {
        "size": 498,
        "type": "function"
    },
    "kotlin.text.replaceBeforeLast(String, String, String)": {
        "size": 632,
        "type": "function"
    },
    "kotlin.text.replaceBeforeLast$default(String, String, String?, Int, Any?)": {
        "size": 506,
        "type": "function"
    },
    "kotlin.text.trimStart()": {
        "size": 1053,
        "type": "function"
    },
    "kotlin.text.trimStart(CharArray)": {
        "size": 1751,
        "type": "function"
    },
    "kotlin.text.trimEnd()": {
        "size": 1035,
        "type": "function"
    },
    "kotlin.text.trimEnd(CharArray)": {
        "size": 1711,
        "type": "function"
    },
    "kotlin.text.trim()": {
        "size": 1552,
        "type": "function"
    },
    "kotlin.text.trim(CharArray)": {
        "size": 1718,
        "type": "function"
    },
    "kotlin.text.padStart(Int, Char)": {
        "size": 1265,
        "type": "function"
    },
    "kotlin.text.padStart$default(Int, Char?, Int, Any?)": {
        "size": 443,
        "type": "function"
    },
    "kotlin.text.padEnd(Int, Char)": {
        "size": 1263,
        "type": "function"
    },
    "kotlin.text.padEnd$default(Int, Char?, Int, Any?)": {
        "size": 439,
        "type": "function"
    },
    "kotlin.text.removeSuffix(CharSequence)": {
        "size": 441,
        "type": "function"
    },
    "kotlin.text.removeSurrounding(CharSequence, CharSequence)": {
        "size": 832,
        "type": "function"
    },
    "kotlin.text.split(CharArray, Boolean, Int)": {
        "size": 1583,
        "type": "function"
    },
    "kotlin.text.split$default(CharArray, Boolean?, Int?, Int, Any?)": {
        "size": 777,
        "type": "function"
    },
    "kotlin.text.lines()": {
        "size": 92,
        "type": "function"
    },
    "kotlin.text.indexOfAny(CharArray, Int, Boolean)": {
        "size": 2194,
        "type": "function"
    },
    "kotlin.text.indexOfAny$default(CharArray, Int?, Boolean?, Int, Any?)": {
        "size": 781,
        "type": "function"
    },
    "kotlin.text.lastIndexOfAny(CharArray, Int, Boolean)": {
        "size": 2161,
        "type": "function"
    },
    "kotlin.text.lastIndexOfAny$default(CharArray, Int?, Boolean?, Int, Any?)": {
        "size": 812,
        "type": "function"
    },
    "kotlin.text.indexOfAny(Collection<String>, Int, Boolean)": {
        "size": 631,
        "type": "function"
    },
    "kotlin.text.indexOfAny$default(Collection<String>, Int?, Boolean?, Int, Any?)": {
        "size": 796,
        "type": "function"
    },
    "kotlin.text.lastIndexOfAny(Collection<String>, Int, Boolean)": {
        "size": 634,
        "type": "function"
    },
    "kotlin.text.lastIndexOfAny$default(Collection<String>, Int?, Boolean?, Int, Any?)": {
        "size": 827,
        "type": "function"
    },
    "kotlin.text.findAnyOf(Collection<String>, Int, Boolean)": {
        "size": 228,
        "type": "function"
    },
    "kotlin.text.findAnyOf$default(Collection<String>, Int?, Boolean?, Int, Any?)": {
        "size": 809,
        "type": "function"
    },
    "kotlin.text.findLastAnyOf(Collection<String>, Int, Boolean)": {
        "size": 231,
        "type": "function"
    },
    "kotlin.text.findLastAnyOf$default(Collection<String>, Int?, Boolean?, Int, Any?)": {
        "size": 840,
        "type": "function"
    },
    "kotlin.text.indexOf(Char, Int, Boolean)": {
        "size": 505,
        "type": "function"
    },
    "kotlin.text.indexOf$default(Char, Int?, Boolean?, Int, Any?)": {
        "size": 767,
        "type": "function"
    },
    "kotlin.text.lastIndexOf(Char, Int, Boolean)": {
        "size": 517,
        "type": "function"
    },
    "kotlin.text.lastIndexOf$default(Char, Int?, Boolean?, Int, Any?)": {
        "size": 798,
        "type": "function"
    },
    "kotlin.text.contentEqualsImpl(CharSequence?)": {
        "size": 1561,
        "type": "function"
    },
    "kotlin.text.contentEqualsIgnoreCaseImpl(CharSequence?)": {
        "size": 1656,
        "type": "function"
    },
    "kotlin.text.requireNonNegativeLimit(Int)": {
        "size": 724,
        "type": "function"
    },
    "kotlin.text.split(String, Boolean, Int)": {
        "size": 2137,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy(Array<out String>, Int, Boolean, Int)": {
        "size": 493,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy$default(Array<out String>, Int?, Boolean?, Int?, Int, Any?)": {
        "size": 1124,
        "type": "function"
    },
    "kotlin.text.hasSurrogatePairAt(Int)": {
        "size": 391,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy(CharArray, Int, Boolean, Int)": {
        "size": 412,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy$default(CharArray, Int?, Boolean?, Int?, Int, Any?)": {
        "size": 1116,
        "type": "function"
    },
    "kotlin.text.lineSequence()": {
        "size": 240,
        "type": "function"
    },
    "kotlin.text.findAnyOf(Collection<String>, Int, Boolean, Boolean)": {
        "size": 5519,
        "type": "function"
    },
    "kotlin.text.<no name provided>.<init>(DelimitedRangesSequence)": {
        "size": 447,
        "type": "function"
    },
    "kotlin.text.<no name provided>.nextState": {
        "size": 27,
        "type": "field"
    },
    "kotlin.text.<no name provided>.currentStartIndex": {
        "size": 35,
        "type": "field"
    },
    "kotlin.text.<no name provided>.nextSearchIndex": {
        "size": 33,
        "type": "field"
    },
    "kotlin.text.<no name provided>.nextItem": {
        "size": 32,
        "type": "field"
    },
    "kotlin.text.<no name provided>.counter": {
        "size": 25,
        "type": "field"
    },
    "kotlin.text.<no name provided>.calcNext()": {
        "size": 3190,
        "type": "function"
    },
    "kotlin.text.<no name provided>.next()": {
        "size": 519,
        "type": "function"
    },
    "kotlin.text.<no name provided>.hasNext()": {
        "size": 355,
        "type": "function"
    },
    "kotlin.text.<no name provided>.this$0": {
        "size": 62,
        "type": "field"
    },
    "kotlin.text.DelimitedRangesSequence": {
        "size": 1169,
        "type": "class"
    },
    "kotlin.text.DelimitedRangesSequence.<init>(CharSequence, Int, Int, @ExtensionFunctionType Function2<CharSequence, @ParameterName(name = \"currentIndex\") Int, Pair<Int, Int>?>)": {
        "size": 365,
        "type": "function"
    },
    "kotlin.text.DelimitedRangesSequence.input": {
        "size": 50,
        "type": "field"
    },
    "kotlin.text.DelimitedRangesSequence.startIndex": {
        "size": 46,
        "type": "field"
    },
    "kotlin.text.DelimitedRangesSequence.limit": {
        "size": 41,
        "type": "field"
    },
    "kotlin.text.DelimitedRangesSequence.getNextMatch": {
        "size": 151,
        "type": "field"
    },
    "kotlin.text.DelimitedRangesSequence.iterator()": {
        "size": 256,
        "type": "function"
    },
    "kotlin.text.DelimitedRangesSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.DelimitedRangesSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.DelimitedRangesSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.splitToSequence(Array<out String>, Boolean, Int)": {
        "size": 499,
        "type": "function"
    },
    "kotlin.text.splitToSequence$default(Array<out String>, Boolean?, Int?, Int, Any?)": {
        "size": 803,
        "type": "function"
    },
    "kotlin.text.subSequence(IntRange)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.text.startsWith(CharSequence, Int, Boolean)": {
        "size": 760,
        "type": "function"
    },
    "kotlin.text.<no name provided>.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.text.<no name provided>.nextChar()": {
        "size": 545,
        "type": "function"
    },
    "kotlin.text.<no name provided>.$this_iterator": {
        "size": 59,
        "type": "field"
    },
    "kotlin.text.rangesDelimitedBy$lambda": {
        "size": 2088,
        "type": "class"
    },
    "kotlin.text.rangesDelimitedBy$lambda.<init>(List<String>, Boolean)": {
        "size": 206,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy$lambda.invoke(CharSequence, Int)": {
        "size": 1003,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy$lambda.invoke(P1, P2)": {
        "size": 517,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy$lambda.$delimitersList": {
        "size": 60,
        "type": "field"
    },
    "kotlin.text.rangesDelimitedBy$lambda.$ignoreCase": {
        "size": 51,
        "type": "field"
    },
    "kotlin.text.rangesDelimitedBy$lambda.<init>(CharArray, Boolean)": {
        "size": 191,
        "type": "function"
    },
    "kotlin.text.rangesDelimitedBy$lambda.$delimiters": {
        "size": 53,
        "type": "field"
    },
    "kotlin.text.splitToSequence$lambda": {
        "size": 843,
        "type": "class"
    },
    "kotlin.text.splitToSequence$lambda.<init>(CharSequence)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.text.splitToSequence$lambda.invoke(IntRange)": {
        "size": 221,
        "type": "function"
    },
    "kotlin.text.splitToSequence$lambda.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "kotlin.text.splitToSequence$lambda.$this_splitToSequence": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.Destructured": {
        "size": 763,
        "type": "class"
    },
    "kotlin.text.Destructured.<init>(MatchResult)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.text.Destructured.match": {
        "size": 49,
        "type": "field"
    },
    "kotlin.text.Destructured.toList()": {
        "size": 372,
        "type": "function"
    },
    "kotlin.text.Destructured.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.Destructured.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.Destructured.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.MatchResult": {
        "size": 487,
        "type": "class"
    },
    "kotlin.text.MatchResult.<get-range>()": {
        "size": 38,
        "type": "function"
    },
    "kotlin.text.MatchResult.<get-value>()": {
        "size": 36,
        "type": "function"
    },
    "kotlin.text.MatchResult.<get-groups>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.MatchResult.<get-groupValues>()": {
        "size": 48,
        "type": "function"
    },
    "kotlin.text.MatchResult.<get-destructured>()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.text.MatchResult.next()": {
        "size": 35,
        "type": "function"
    },
    "kotlin.text.MatchResult.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.MatchResult.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.MatchResult.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection": {
        "size": 556,
        "type": "class"
    },
    "kotlin.text.MatchGroupCollection.get(Int)": {
        "size": 52,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection.<get-size>()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection.isEmpty()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection.contains(MatchGroup?)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection.containsAll(Collection<MatchGroup?>)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.MatchGroupCollection.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.MatchNamedGroupCollection": {
        "size": 536,
        "type": "class"
    },
    "kotlin.text.MatchNamedGroupCollection.get(String)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.text.MatchNamedGroupCollection.isEmpty()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.text.MatchNamedGroupCollection.contains(MatchGroup?)": {
        "size": 83,
        "type": "function"
    },
    "kotlin.text.MatchNamedGroupCollection.containsAll(Collection<MatchGroup?>)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.text.MatchNamedGroupCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.MatchNamedGroupCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.MatchNamedGroupCollection.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.<Duration__<init>-impl>(Long)": {
        "size": 3217,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-rawValue>-impl>(Duration)": {
        "size": 97,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-value>-impl>(Duration)": {
        "size": 350,
        "type": "function"
    },
    "kotlin.time.Duration__isInNanos-impl(Duration)": {
        "size": 285,
        "type": "function"
    },
    "kotlin.time.Duration__isInMillis-impl(Duration)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-storageUnit>-impl>(Duration)": {
        "size": 241,
        "type": "function"
    },
    "kotlin.time.Companion": {
        "size": 4059,
        "type": "class"
    },
    "kotlin.time.Companion.<init>()": {
        "size": 564,
        "type": "function"
    },
    "kotlin.time.Companion.ZERO": {
        "size": 45,
        "type": "field"
    },
    "kotlin.time.Companion.INFINITE": {
        "size": 49,
        "type": "field"
    },
    "kotlin.time.Companion.NEG_INFINITE": {
        "size": 53,
        "type": "field"
    },
    "kotlin.time.Companion.convert(Double, DurationUnit, DurationUnit)": {
        "size": 204,
        "type": "function"
    },
    "kotlin.time.Companion.parse(String)": {
        "size": 804,
        "type": "function"
    },
    "kotlin.time.Companion.parseIsoString(String)": {
        "size": 816,
        "type": "function"
    },
    "kotlin.time.Companion.parseOrNull(String)": {
        "size": 556,
        "type": "function"
    },
    "kotlin.time.Companion.parseIsoStringOrNull(String)": {
        "size": 564,
        "type": "function"
    },
    "kotlin.time.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.time.Companion_getInstance()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.time.Duration__unaryMinus-impl(Duration)": {
        "size": 579,
        "type": "function"
    },
    "kotlin.time.Duration__plus-impl(Duration, Duration)": {
        "size": 1836,
        "type": "function"
    },
    "kotlin.time.Duration__addValuesMixedRanges-impl(Duration, Long, Long)": {
        "size": 1314,
        "type": "function"
    },
    "kotlin.time.Duration__minus-impl(Duration, Duration)": {
        "size": 177,
        "type": "function"
    },
    "kotlin.time.Duration__times-impl(Duration, Int)": {
        "size": 5800,
        "type": "function"
    },
    "kotlin.time.Duration__times-impl(Duration, Double)": {
        "size": 526,
        "type": "function"
    },
    "kotlin.time.Duration__div-impl(Duration, Int)": {
        "size": 2657,
        "type": "function"
    },
    "kotlin.time.Duration__div-impl(Duration, Double)": {
        "size": 622,
        "type": "function"
    },
    "kotlin.time.Duration__div-impl(Duration, Duration)": {
        "size": 443,
        "type": "function"
    },
    "kotlin.time.Duration__truncateTo-impl(Duration, DurationUnit)": {
        "size": 679,
        "type": "function"
    },
    "kotlin.time.Duration__isNegative-impl(Duration)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.time.Duration__isPositive-impl(Duration)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.time.Duration__isInfinite-impl(Duration)": {
        "size": 397,
        "type": "function"
    },
    "kotlin.time.Duration__isFinite-impl(Duration)": {
        "size": 136,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-absoluteValue>-impl>(Duration)": {
        "size": 200,
        "type": "function"
    },
    "kotlin.time.Duration__compareTo-impl(Duration, Duration)": {
        "size": 1491,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-hoursComponent>-impl>(Duration)": {
        "size": 489,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-minutesComponent>-impl>(Duration)": {
        "size": 493,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-secondsComponent>-impl>(Duration)": {
        "size": 493,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-nanosecondsComponent>-impl>(Duration)": {
        "size": 892,
        "type": "function"
    },
    "kotlin.time.Duration__toDouble-impl(Duration, DurationUnit)": {
        "size": 792,
        "type": "function"
    },
    "kotlin.time.Duration__toLong-impl(Duration, DurationUnit)": {
        "size": 756,
        "type": "function"
    },
    "kotlin.time.Duration__toInt-impl(Duration, DurationUnit)": {
        "size": 359,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-inWholeDays>-impl>(Duration)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-inWholeHours>-impl>(Duration)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-inWholeMinutes>-impl>(Duration)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-inWholeSeconds>-impl>(Duration)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-inWholeMilliseconds>-impl>(Duration)": {
        "size": 365,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-inWholeMicroseconds>-impl>(Duration)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.time.<Duration__<get-inWholeNanoseconds>-impl>(Duration)": {
        "size": 1295,
        "type": "function"
    },
    "kotlin.time.Duration__toString-impl(Duration)": {
        "size": 10542,
        "type": "function"
    },
    "kotlin.time.Duration__appendFractional-impl(Duration, StringBuilder, Int, Int, Int, String, Boolean)": {
        "size": 2457,
        "type": "function"
    },
    "kotlin.time.Duration__toString-impl(Duration, DurationUnit, Int)": {
        "size": 1056,
        "type": "function"
    },
    "kotlin.time.Duration__toIsoString-impl(Duration)": {
        "size": 4610,
        "type": "function"
    },
    "kotlin.time.Duration__hashCode-impl(Duration)": {
        "size": 109,
        "type": "function"
    },
    "kotlin.time.Duration__equals-impl(Duration, Any?)": {
        "size": 646,
        "type": "function"
    },
    "kotlin.time.Duration": {
        "size": 1376,
        "type": "class"
    },
    "kotlin.time.Duration.<init>(Long)": {
        "size": 103,
        "type": "function"
    },
    "kotlin.time.Duration.rawValue": {
        "size": 45,
        "type": "field"
    },
    "kotlin.time.Duration.compareTo(Duration)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.time.Duration.compareTo(T)": {
        "size": 297,
        "type": "function"
    },
    "kotlin.time.Duration.toString()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.time.Duration.hashCode()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.time.Duration.equals(Any?)": {
        "size": 195,
        "type": "function"
    },
    "kotlin.time.toDuration(DurationUnit)": {
        "size": 1602,
        "type": "function"
    },
    "kotlin.time.durationOfMillis(Long)": {
        "size": 510,
        "type": "function"
    },
    "kotlin.time.parseDuration(String, Boolean)": {
        "size": 15534,
        "type": "function"
    },
    "kotlin.time.durationOf(Long, Int)": {
        "size": 542,
        "type": "function"
    },
    "kotlin.time.durationOfNanosNormalized(Long)": {
        "size": 595,
        "type": "function"
    },
    "kotlin.time.durationOfMillisNormalized(Long)": {
        "size": 932,
        "type": "function"
    },
    "kotlin.time.nanosToMillis(Long)": {
        "size": 303,
        "type": "function"
    },
    "kotlin.time.millisToNanos(Long)": {
        "size": 311,
        "type": "function"
    },
    "kotlin.time.durationOfNanos(Long)": {
        "size": 247,
        "type": "function"
    },
    "kotlin.time.parseOverLongIsoComponent(String)": {
        "size": 2432,
        "type": "function"
    },
    "kotlin.time.shortName()": {
        "size": 1061,
        "type": "function"
    },
    "kotlin.time.durationUnitByIsoChar(Char, Boolean)": {
        "size": 1079,
        "type": "function"
    },
    "kotlin.time.durationUnitByShortName(String)": {
        "size": 2166,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark": {
        "size": 858,
        "type": "class"
    },
    "kotlin.time.ComparableTimeMark.plus(Duration)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark.minus(Duration)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark.minus(ComparableTimeMark)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark.compareTo(ComparableTimeMark)": {
        "size": 179,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark.hashCode()": {
        "size": 39,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark.elapsedNow()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark.hasPassedNow()": {
        "size": 49,
        "type": "function"
    },
    "kotlin.time.ComparableTimeMark.hasNotPassedNow()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.time.TimeMark": {
        "size": 387,
        "type": "class"
    },
    "kotlin.time.TimeMark.elapsedNow()": {
        "size": 37,
        "type": "function"
    },
    "kotlin.time.TimeMark.hasPassedNow()": {
        "size": 124,
        "type": "function"
    },
    "kotlin.time.TimeMark.hasNotPassedNow()": {
        "size": 100,
        "type": "function"
    },
    "kotlin.time.<ValueTimeMark__<init>-impl>(Double)": {
        "size": 164,
        "type": "function"
    },
    "kotlin.time.<ValueTimeMark__<get-reading>-impl>(ValueTimeMark)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__elapsedNow-impl(ValueTimeMark)": {
        "size": 145,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__plus-impl(ValueTimeMark, Duration)": {
        "size": 196,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__minus-impl(ValueTimeMark, Duration)": {
        "size": 232,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__hasPassedNow-impl(ValueTimeMark)": {
        "size": 190,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__hasNotPassedNow-impl(ValueTimeMark)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__minus-impl(ValueTimeMark, ComparableTimeMark)": {
        "size": 691,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__minus-impl(ValueTimeMark, ValueTimeMark)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__compareTo-impl(ValueTimeMark, ValueTimeMark)": {
        "size": 235,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__toString-impl(ValueTimeMark)": {
        "size": 299,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__hashCode-impl(ValueTimeMark)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark__equals-impl(ValueTimeMark, Any?)": {
        "size": 731,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark": {
        "size": 3520,
        "type": "class"
    },
    "kotlin.time.ValueTimeMark.<init>(Double)": {
        "size": 102,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.reading": {
        "size": 46,
        "type": "field"
    },
    "kotlin.time.ValueTimeMark.elapsedNow()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.plus(Duration)": {
        "size": 225,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.minus(Duration)": {
        "size": 227,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.hasPassedNow()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.hasNotPassedNow()": {
        "size": 193,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.minus(ComparableTimeMark)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.toString()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.hashCode()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.equals(Any?)": {
        "size": 210,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.compareTo(ComparableTimeMark)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.time.ValueTimeMark.compareTo(T)": {
        "size": 565,
        "type": "function"
    },
    "kotlin.time.WithComparableMarks": {
        "size": 345,
        "type": "class"
    },
    "kotlin.time.WithComparableMarks.markNow()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.time.WithComparableMarks.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.WithComparableMarks.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.WithComparableMarks.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.Monotonic": {
        "size": 682,
        "type": "class"
    },
    "kotlin.time.Monotonic.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.time.Monotonic.markNow()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.time.Monotonic.toString()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.time.Monotonic.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.Monotonic.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.Monotonic_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.time.TimeSource": {
        "size": 304,
        "type": "class"
    },
    "kotlin.time.TimeSource.markNow()": {
        "size": 34,
        "type": "function"
    },
    "kotlin.time.TimeSource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.TimeSource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.TimeSource.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.$KPROPERTIES": {
        "size": 83,
        "type": "field"
    },
    "kotlin.time.TestTimeSource": {
        "size": 4513,
        "type": "class"
    },
    "kotlin.time.TestTimeSource.<init>()": {
        "size": 224,
        "type": "function"
    },
    "kotlin.time.TestTimeSource.reading": {
        "size": 26,
        "type": "field"
    },
    "kotlin.time.TestTimeSource.read()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.time.TestTimeSource.plusAssign(Duration)": {
        "size": 3077,
        "type": "function"
    },
    "kotlin.time.TestTimeSource.overflow(Duration)": {
        "size": 464,
        "type": "function"
    },
    "kotlin.time.TestTimeSource.markNow()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.time.TestTimeSource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.TestTimeSource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.TestTimeSource.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.LongTimeMark": {
        "size": 7615,
        "type": "class"
    },
    "kotlin.time.LongTimeMark.<init>(Long, AbstractLongTimeSource, Duration)": {
        "size": 234,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.startedAt": {
        "size": 46,
        "type": "field"
    },
    "kotlin.time.LongTimeMark.timeSource": {
        "size": 65,
        "type": "field"
    },
    "kotlin.time.LongTimeMark.offset": {
        "size": 47,
        "type": "field"
    },
    "kotlin.time.LongTimeMark.elapsedNow()": {
        "size": 332,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.plus(Duration)": {
        "size": 2478,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.minus(ComparableTimeMark)": {
        "size": 1188,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.equals(Any?)": {
        "size": 722,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.hashCode()": {
        "size": 297,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.toString()": {
        "size": 570,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.minus(Duration)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.compareTo(ComparableTimeMark)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.compareTo(T)": {
        "size": 565,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.hasPassedNow()": {
        "size": 49,
        "type": "function"
    },
    "kotlin.time.LongTimeMark.hasNotPassedNow()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource$zero$delegate$lambda": {
        "size": 676,
        "type": "class"
    },
    "kotlin.time.AbstractLongTimeSource$zero$delegate$lambda.<init>(AbstractLongTimeSource)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource$zero$delegate$lambda.invoke()": {
        "size": 280,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource$zero$delegate$lambda.this$0": {
        "size": 61,
        "type": "field"
    },
    "kotlin.time.AbstractLongTimeSource": {
        "size": 1669,
        "type": "class"
    },
    "kotlin.time.AbstractLongTimeSource.<init>(DurationUnit)": {
        "size": 280,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource.unit": {
        "size": 49,
        "type": "field"
    },
    "kotlin.time.AbstractLongTimeSource.read()": {
        "size": 37,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource.<get-zero>()": {
        "size": 407,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource.zero$delegate": {
        "size": 56,
        "type": "field"
    },
    "kotlin.time.AbstractLongTimeSource.adjustedRead()": {
        "size": 116,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource.markNow()": {
        "size": 275,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark": {
        "size": 6091,
        "type": "class"
    },
    "kotlin.time.DoubleTimeMark.<init>(Double, AbstractDoubleTimeSource, Duration)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.startedAt": {
        "size": 48,
        "type": "field"
    },
    "kotlin.time.DoubleTimeMark.timeSource": {
        "size": 67,
        "type": "field"
    },
    "kotlin.time.DoubleTimeMark.offset": {
        "size": 47,
        "type": "field"
    },
    "kotlin.time.DoubleTimeMark.elapsedNow()": {
        "size": 395,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.plus(Duration)": {
        "size": 330,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.minus(ComparableTimeMark)": {
        "size": 1760,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.equals(Any?)": {
        "size": 734,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.hashCode()": {
        "size": 289,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.toString()": {
        "size": 576,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.minus(Duration)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.compareTo(ComparableTimeMark)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.compareTo(T)": {
        "size": 565,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.hasPassedNow()": {
        "size": 49,
        "type": "function"
    },
    "kotlin.time.DoubleTimeMark.hasNotPassedNow()": {
        "size": 52,
        "type": "function"
    },
    "kotlin.time.AbstractDoubleTimeSource": {
        "size": 951,
        "type": "class"
    },
    "kotlin.time.AbstractDoubleTimeSource.<init>(DurationUnit)": {
        "size": 109,
        "type": "function"
    },
    "kotlin.time.AbstractDoubleTimeSource.unit": {
        "size": 49,
        "type": "field"
    },
    "kotlin.time.AbstractDoubleTimeSource.read()": {
        "size": 39,
        "type": "function"
    },
    "kotlin.time.AbstractDoubleTimeSource.markNow()": {
        "size": 273,
        "type": "function"
    },
    "kotlin.time.AbstractDoubleTimeSource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.AbstractDoubleTimeSource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.AbstractDoubleTimeSource.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource$<get-zero>$ref": {
        "size": 743,
        "type": "class"
    },
    "kotlin.time.AbstractLongTimeSource$<get-zero>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource$<get-zero>$ref.invoke(AbstractLongTimeSource)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource$<get-zero>$ref.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "kotlin.time.AbstractLongTimeSource$<get-zero>$ref.<get-name>()": {
        "size": 61,
        "type": "function"
    },
    "kotlin.time.saturatingOriginsDiff(Long, Long, DurationUnit)": {
        "size": 1277,
        "type": "function"
    },
    "kotlin.time.saturatingAdd(Long, DurationUnit, Duration)": {
        "size": 1827,
        "type": "function"
    },
    "kotlin.time.infinityOfSign(Long)": {
        "size": 224,
        "type": "function"
    },
    "kotlin.time.saturatingFiniteDiff(Long, Long, DurationUnit)": {
        "size": 1833,
        "type": "function"
    },
    "kotlin.time.checkInfiniteSumDefined(Long, Duration, Long)": {
        "size": 411,
        "type": "function"
    },
    "kotlin.time.saturatingAddInHalves(Long, DurationUnit, Duration)": {
        "size": 905,
        "type": "function"
    },
    "kotlin.time.TimedValue": {
        "size": 2565,
        "type": "class"
    },
    "kotlin.time.TimedValue.<init>(T, Duration)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.time.TimedValue.value": {
        "size": 39,
        "type": "field"
    },
    "kotlin.time.TimedValue.duration": {
        "size": 49,
        "type": "field"
    },
    "kotlin.time.TimedValue.component1()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.time.TimedValue.component2()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.time.TimedValue.toString()": {
        "size": 493,
        "type": "function"
    },
    "kotlin.time.TimedValue.hashCode()": {
        "size": 443,
        "type": "function"
    },
    "kotlin.time.TimedValue.equals(Any?)": {
        "size": 997,
        "type": "function"
    },
    "kotlin.<get-UNDEFINED_RESULT>()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.UNDEFINED_RESULT": {
        "size": 67,
        "type": "field"
    },
    "kotlin.DeepRecursiveFunction": {
        "size": 594,
        "type": "class"
    },
    "kotlin.DeepRecursiveFunction.<init>(@ExtensionFunctionType SuspendFunction2<DeepRecursiveScope<T, R>, T, R>)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.DeepRecursiveFunction.block": {
        "size": 109,
        "type": "field"
    },
    "kotlin.DeepRecursiveFunction.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.DeepRecursiveFunction.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.DeepRecursiveFunction.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.DeepRecursiveScope": {
        "size": 613,
        "type": "class"
    },
    "kotlin.DeepRecursiveScope.<init>()": {
        "size": 77,
        "type": "function"
    },
    "kotlin.DeepRecursiveScope.callRecursive(T, Continuation<R>)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.DeepRecursiveScope.callRecursive(U, Continuation<S>)": {
        "size": 123,
        "type": "function"
    },
    "kotlin.DeepRecursiveScope.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.DeepRecursiveScope.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.DeepRecursiveScope.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.invoke(T)": {
        "size": 309,
        "type": "function"
    },
    "kotlin.<no name provided>": {
        "size": 1597,
        "type": "class"
    },
    "kotlin.<no name provided>.<init>(EmptyCoroutineContext, DeepRecursiveScopeImpl<T, R>, @ExtensionFunctionType SuspendFunction2<DeepRecursiveScope<*, *>, Any?, Any?>, Continuation<Any?>)": {
        "size": 424,
        "type": "function"
    },
    "kotlin.<no name provided>.<get-context>()": {
        "size": 196,
        "type": "function"
    },
    "kotlin.<no name provided>.resumeWith(Result<Any?>)": {
        "size": 391,
        "type": "function"
    },
    "kotlin.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.<no name provided>.$tmp0_Continuation": {
        "size": 72,
        "type": "field"
    },
    "kotlin.<no name provided>.this$0": {
        "size": 67,
        "type": "field"
    },
    "kotlin.<no name provided>.$currentFunction": {
        "size": 126,
        "type": "field"
    },
    "kotlin.<no name provided>.$cont": {
        "size": 56,
        "type": "field"
    },
    "kotlin.DeepRecursiveScopeImpl": {
        "size": 7891,
        "type": "class"
    },
    "kotlin.DeepRecursiveScopeImpl.<init>(@ExtensionFunctionType SuspendFunction2<DeepRecursiveScope<T, R>, T, R>, T)": {
        "size": 303,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.function": {
        "size": 100,
        "type": "field"
    },
    "kotlin.DeepRecursiveScopeImpl.value": {
        "size": 24,
        "type": "field"
    },
    "kotlin.DeepRecursiveScopeImpl.cont": {
        "size": 38,
        "type": "field"
    },
    "kotlin.DeepRecursiveScopeImpl.result": {
        "size": 33,
        "type": "field"
    },
    "kotlin.DeepRecursiveScopeImpl.<get-context>()": {
        "size": 93,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.resumeWith(Result<R>)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.callRecursive(T, Continuation<R>)": {
        "size": 575,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.callRecursive(U, Continuation<S>)": {
        "size": 1801,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.crossFunctionCompletion(@ExtensionFunctionType SuspendFunction2<DeepRecursiveScope<*, *>, Any?, Any?>, Continuation<Any?>)": {
        "size": 602,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.runCallLoop()": {
        "size": 3423,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.DeepRecursiveScopeImpl.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.properties initialized DeepRecursive.kt": {
        "size": 78,
        "type": "field"
    },
    "kotlin.<init properties DeepRecursive.kt>()": {
        "size": 616,
        "type": "function"
    },
    "kotlin.Companion": {
        "size": 1669,
        "type": "class"
    },
    "kotlin.Companion.<init>()": {
        "size": 605,
        "type": "function"
    },
    "kotlin.Companion.MAX_COMPONENT_VALUE": {
        "size": 53,
        "type": "field"
    },
    "kotlin.Companion.CURRENT": {
        "size": 63,
        "type": "field"
    },
    "kotlin.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.Companion_getInstance()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.KotlinVersion": {
        "size": 5155,
        "type": "class"
    },
    "kotlin.KotlinVersion.<init>(Int, Int, Int)": {
        "size": 287,
        "type": "function"
    },
    "kotlin.KotlinVersion.major": {
        "size": 41,
        "type": "field"
    },
    "kotlin.KotlinVersion.minor": {
        "size": 41,
        "type": "field"
    },
    "kotlin.KotlinVersion.patch": {
        "size": 41,
        "type": "field"
    },
    "kotlin.KotlinVersion.<init>(Int, Int)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.KotlinVersion.version": {
        "size": 43,
        "type": "field"
    },
    "kotlin.KotlinVersion.versionOf(Int, Int, Int)": {
        "size": 1713,
        "type": "function"
    },
    "kotlin.KotlinVersion.toString()": {
        "size": 391,
        "type": "function"
    },
    "kotlin.KotlinVersion.equals(Any?)": {
        "size": 711,
        "type": "function"
    },
    "kotlin.KotlinVersion.hashCode()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.KotlinVersion.compareTo(KotlinVersion)": {
        "size": 224,
        "type": "function"
    },
    "kotlin.KotlinVersion.compareTo(T)": {
        "size": 308,
        "type": "function"
    },
    "kotlin.KotlinVersion.isAtLeast(Int, Int)": {
        "size": 268,
        "type": "function"
    },
    "kotlin.KotlinVersion.isAtLeast(Int, Int, Int)": {
        "size": 467,
        "type": "function"
    },
    "kotlin.KotlinVersionCurrentValue": {
        "size": 392,
        "type": "class"
    },
    "kotlin.KotlinVersionCurrentValue.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.KotlinVersionCurrentValue.get()": {
        "size": 99,
        "type": "function"
    },
    "kotlin.KotlinVersionCurrentValue.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.KotlinVersionCurrentValue.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.KotlinVersionCurrentValue.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.KotlinVersionCurrentValue_instance": {
        "size": 86,
        "type": "field"
    },
    "kotlin.Lazy": {
        "size": 262,
        "type": "class"
    },
    "kotlin.Lazy.<get-value>()": {
        "size": 31,
        "type": "function"
    },
    "kotlin.Lazy.isInitialized()": {
        "size": 39,
        "type": "function"
    },
    "kotlin.Lazy.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Lazy.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Lazy.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.LazyThreadSafetyMode_SYNCHRONIZED_instance": {
        "size": 89,
        "type": "field"
    },
    "kotlin.LazyThreadSafetyMode_PUBLICATION_instance": {
        "size": 88,
        "type": "field"
    },
    "kotlin.LazyThreadSafetyMode_NONE_instance": {
        "size": 81,
        "type": "field"
    },
    "kotlin.LazyThreadSafetyMode_entriesInitialized": {
        "size": 80,
        "type": "field"
    },
    "kotlin.LazyThreadSafetyMode_initEntries()": {
        "size": 474,
        "type": "function"
    },
    "kotlin.LazyThreadSafetyMode": {
        "size": 464,
        "type": "class"
    },
    "kotlin.LazyThreadSafetyMode.<init>(String, Int)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.LazyThreadSafetyMode.compareTo(LazyThreadSafetyMode)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.LazyThreadSafetyMode.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.LazyThreadSafetyMode.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.LazyThreadSafetyMode.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.lazyOf(T)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.InitializedLazyImpl": {
        "size": 756,
        "type": "class"
    },
    "kotlin.InitializedLazyImpl.<init>(T)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.InitializedLazyImpl.<get-value>()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.InitializedLazyImpl.value": {
        "size": 39,
        "type": "field"
    },
    "kotlin.InitializedLazyImpl.isInitialized()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.InitializedLazyImpl.toString()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.InitializedLazyImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.InitializedLazyImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.UnsafeLazyImpl": {
        "size": 1678,
        "type": "class"
    },
    "kotlin.UnsafeLazyImpl.<init>(Function0<T>)": {
        "size": 181,
        "type": "function"
    },
    "kotlin.UnsafeLazyImpl.initializer": {
        "size": 39,
        "type": "field"
    },
    "kotlin.UnsafeLazyImpl._value": {
        "size": 25,
        "type": "field"
    },
    "kotlin.UnsafeLazyImpl.<get-value>()": {
        "size": 664,
        "type": "function"
    },
    "kotlin.UnsafeLazyImpl.isInitialized()": {
        "size": 240,
        "type": "function"
    },
    "kotlin.UnsafeLazyImpl.toString()": {
        "size": 264,
        "type": "function"
    },
    "kotlin.UnsafeLazyImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.UnsafeLazyImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.UNINITIALIZED_VALUE": {
        "size": 280,
        "type": "class"
    },
    "kotlin.UNINITIALIZED_VALUE.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.UNINITIALIZED_VALUE.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.UNINITIALIZED_VALUE.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.UNINITIALIZED_VALUE.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.UNINITIALIZED_VALUE_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.LazyThreadSafetyMode_NONE_getInstance()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.rotateLeft(Int)": {
        "size": 599,
        "type": "function"
    },
    "kotlin.rotateRight(Int)": {
        "size": 511,
        "type": "function"
    },
    "kotlin.<Result__<init>-impl>(Any?)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.<Result__<get-value>-impl>(Result<T>)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.<Result__<get-isSuccess>-impl>(Result<T>)": {
        "size": 275,
        "type": "function"
    },
    "kotlin.<Result__<get-isFailure>-impl>(Result<T>)": {
        "size": 269,
        "type": "function"
    },
    "kotlin.Result__exceptionOrNull-impl(Result<T>)": {
        "size": 465,
        "type": "function"
    },
    "kotlin.Result__toString-impl(Result<T>)": {
        "size": 739,
        "type": "function"
    },
    "kotlin.Failure": {
        "size": 1248,
        "type": "class"
    },
    "kotlin.Failure.<init>(Throwable)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.Failure.exception": {
        "size": 61,
        "type": "field"
    },
    "kotlin.Failure.equals(Any?)": {
        "size": 445,
        "type": "function"
    },
    "kotlin.Failure.hashCode()": {
        "size": 194,
        "type": "function"
    },
    "kotlin.Failure.toString()": {
        "size": 304,
        "type": "function"
    },
    "kotlin.Result__hashCode-impl(Result<T>)": {
        "size": 218,
        "type": "function"
    },
    "kotlin.Result__equals-impl(Result<T>, Any?)": {
        "size": 665,
        "type": "function"
    },
    "kotlin.Result": {
        "size": 807,
        "type": "class"
    },
    "kotlin.Result.<init>(Any?)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.Result.value": {
        "size": 42,
        "type": "field"
    },
    "kotlin.Result.toString()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.Result.hashCode()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.Result.equals(Any?)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.createFailure(Throwable)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.throwOnFailure()": {
        "size": 393,
        "type": "function"
    },
    "kotlin.NotImplementedError": {
        "size": 856,
        "type": "class"
    },
    "kotlin.NotImplementedError.<init>(String)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.NotImplementedError.<init>(String?, Int, DefaultConstructorMarker?)": {
        "size": 371,
        "type": "function"
    },
    "kotlin.NotImplementedError.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.NotImplementedError.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.NotImplementedError.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.NotImplementedError.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.NotImplementedError.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.NotImplementedError.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Pair": {
        "size": 2374,
        "type": "class"
    },
    "kotlin.Pair.<init>(A, B)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.Pair.first": {
        "size": 39,
        "type": "field"
    },
    "kotlin.Pair.second": {
        "size": 40,
        "type": "field"
    },
    "kotlin.Pair.toString()": {
        "size": 372,
        "type": "function"
    },
    "kotlin.Pair.component1()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.Pair.component2()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.Pair.hashCode()": {
        "size": 533,
        "type": "function"
    },
    "kotlin.Pair.equals(Any?)": {
        "size": 921,
        "type": "function"
    },
    "kotlin.to(B)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.toList()": {
        "size": 132,
        "type": "function"
    },
    "kotlin.Triple": {
        "size": 3051,
        "type": "class"
    },
    "kotlin.Triple.<init>(A, B, C)": {
        "size": 176,
        "type": "function"
    },
    "kotlin.Triple.first": {
        "size": 39,
        "type": "field"
    },
    "kotlin.Triple.second": {
        "size": 40,
        "type": "field"
    },
    "kotlin.Triple.third": {
        "size": 39,
        "type": "field"
    },
    "kotlin.Triple.toString()": {
        "size": 454,
        "type": "function"
    },
    "kotlin.Triple.component1()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.Triple.component2()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.Triple.component3()": {
        "size": 57,
        "type": "function"
    },
    "kotlin.Triple.hashCode()": {
        "size": 780,
        "type": "function"
    },
    "kotlin.Triple.equals(Any?)": {
        "size": 1087,
        "type": "function"
    },
    "kotlin.<UByte__<init>-impl>(Byte)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.<UByte__<get-data>-impl>(UByte)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.Companion.MIN_VALUE": {
        "size": 62,
        "type": "field"
    },
    "kotlin.Companion.MAX_VALUE": {
        "size": 65,
        "type": "field"
    },
    "kotlin.Companion.SIZE_BYTES": {
        "size": 42,
        "type": "field"
    },
    "kotlin.Companion.SIZE_BITS": {
        "size": 42,
        "type": "field"
    },
    "kotlin.UByte__compareTo-impl(UByte, UByte)": {
        "size": 835,
        "type": "function"
    },
    "kotlin.UByte__toString-impl(UByte)": {
        "size": 268,
        "type": "function"
    },
    "kotlin.UByte__hashCode-impl(UByte)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.UByte__equals-impl(UByte, Any?)": {
        "size": 620,
        "type": "function"
    },
    "kotlin.UByte": {
        "size": 1427,
        "type": "class"
    },
    "kotlin.UByte.<init>(Byte)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.UByte.data": {
        "size": 41,
        "type": "field"
    },
    "kotlin.UByte.compareTo(UByte)": {
        "size": 250,
        "type": "function"
    },
    "kotlin.UByte.compareTo(T)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.UByte.toString()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.UByte.hashCode()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.UByte.equals(Any?)": {
        "size": 186,
        "type": "function"
    },
    "kotlin.<UByteArray__<init>-impl>(ByteArray)": {
        "size": 172,
        "type": "function"
    },
    "kotlin.<UByteArray__<get-storage>-impl>(UByteArray)": {
        "size": 105,
        "type": "function"
    },
    "kotlin.<UByteArray__<init>-impl>(Int)": {
        "size": 174,
        "type": "function"
    },
    "kotlin.UByteArray__get-impl(UByteArray, Int)": {
        "size": 362,
        "type": "function"
    },
    "kotlin.UByteArray__set-impl(UByteArray, Int, UByte)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.<UByteArray__<get-size>-impl>(UByteArray)": {
        "size": 133,
        "type": "function"
    },
    "kotlin.UByteArray__iterator-impl(UByteArray)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.Iterator": {
        "size": 1731,
        "type": "class"
    },
    "kotlin.Iterator.<init>(ByteArray)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.Iterator.array": {
        "size": 48,
        "type": "field"
    },
    "kotlin.Iterator.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.Iterator.hasNext()": {
        "size": 201,
        "type": "function"
    },
    "kotlin.Iterator.next()": {
        "size": 951,
        "type": "function"
    },
    "kotlin.Iterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Iterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Iterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.UByteArray__contains-impl(UByteArray, UByte)": {
        "size": 508,
        "type": "function"
    },
    "kotlin.UByteArray__containsAll-impl(UByteArray, Collection<UByte>)": {
        "size": 1647,
        "type": "function"
    },
    "kotlin.UByteArray__isEmpty-impl(UByteArray)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.UByteArray__toString-impl(UByteArray)": {
        "size": 308,
        "type": "function"
    },
    "kotlin.UByteArray__hashCode-impl(UByteArray)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.UByteArray__equals-impl(UByteArray, Any?)": {
        "size": 704,
        "type": "function"
    },
    "kotlin.UByteArray": {
        "size": 2405,
        "type": "class"
    },
    "kotlin.UByteArray.<init>(ByteArray)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.UByteArray.storage": {
        "size": 49,
        "type": "field"
    },
    "kotlin.UByteArray.<get-size>()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.UByteArray.iterator()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.UByteArray.contains(UByte)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.UByteArray.contains(@UnsafeVariance E)": {
        "size": 508,
        "type": "function"
    },
    "kotlin.UByteArray.containsAll(Collection<UByte>)": {
        "size": 224,
        "type": "function"
    },
    "kotlin.UByteArray.isEmpty()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.UByteArray.toString()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.UByteArray.hashCode()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.UByteArray.equals(Any?)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.<UInt__<init>-impl>(Int)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.<UInt__<get-data>-impl>(UInt)": {
        "size": 81,
        "type": "function"
    },
    "kotlin.UInt__compareTo-impl(UInt, UInt)": {
        "size": 242,
        "type": "function"
    },
    "kotlin.UInt__toInt-impl(UInt)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.UInt__toUByte-impl(UInt)": {
        "size": 349,
        "type": "function"
    },
    "kotlin.UInt__toUShort-impl(UInt)": {
        "size": 355,
        "type": "function"
    },
    "kotlin.UInt__toUInt-impl(UInt)": {
        "size": 80,
        "type": "function"
    },
    "kotlin.UInt__toULong-impl(UInt)": {
        "size": 215,
        "type": "function"
    },
    "kotlin.UInt__toString-impl(UInt)": {
        "size": 275,
        "type": "function"
    },
    "kotlin.UInt__hashCode-impl(UInt)": {
        "size": 96,
        "type": "function"
    },
    "kotlin.UInt__equals-impl(UInt, Any?)": {
        "size": 614,
        "type": "function"
    },
    "kotlin.UInt": {
        "size": 1408,
        "type": "class"
    },
    "kotlin.UInt.<init>(Int)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.UInt.data": {
        "size": 40,
        "type": "field"
    },
    "kotlin.UInt.compareTo(UInt)": {
        "size": 246,
        "type": "function"
    },
    "kotlin.UInt.compareTo(T)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.UInt.toString()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.UInt.hashCode()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.UInt.equals(Any?)": {
        "size": 183,
        "type": "function"
    },
    "kotlin.toUInt()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.<UIntArray__<init>-impl>(IntArray)": {
        "size": 168,
        "type": "function"
    },
    "kotlin.<UIntArray__<get-storage>-impl>(UIntArray)": {
        "size": 102,
        "type": "function"
    },
    "kotlin.<UIntArray__<init>-impl>(Int)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.UIntArray__get-impl(UIntArray, Int)": {
        "size": 354,
        "type": "function"
    },
    "kotlin.UIntArray__set-impl(UIntArray, Int, UInt)": {
        "size": 274,
        "type": "function"
    },
    "kotlin.<UIntArray__<get-size>-impl>(UIntArray)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.UIntArray__iterator-impl(UIntArray)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.Iterator.<init>(IntArray)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.UIntArray__contains-impl(UIntArray, UInt)": {
        "size": 501,
        "type": "function"
    },
    "kotlin.UIntArray__containsAll-impl(UIntArray, Collection<UInt>)": {
        "size": 1637,
        "type": "function"
    },
    "kotlin.UIntArray__isEmpty-impl(UIntArray)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.UIntArray__toString-impl(UIntArray)": {
        "size": 305,
        "type": "function"
    },
    "kotlin.UIntArray__hashCode-impl(UIntArray)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.UIntArray__equals-impl(UIntArray, Any?)": {
        "size": 697,
        "type": "function"
    },
    "kotlin.UIntArray": {
        "size": 2371,
        "type": "class"
    },
    "kotlin.UIntArray.<init>(IntArray)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.UIntArray.storage": {
        "size": 48,
        "type": "field"
    },
    "kotlin.UIntArray.<get-size>()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.UIntArray.iterator()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.UIntArray.contains(UInt)": {
        "size": 208,
        "type": "function"
    },
    "kotlin.UIntArray.contains(@UnsafeVariance E)": {
        "size": 505,
        "type": "function"
    },
    "kotlin.UIntArray.containsAll(Collection<UInt>)": {
        "size": 220,
        "type": "function"
    },
    "kotlin.UIntArray.isEmpty()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.UIntArray.toString()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.UIntArray.hashCode()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.UIntArray.equals(Any?)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.ranges.UIntRange": {
        "size": 5613,
        "type": "class"
    },
    "kotlin.ranges.UIntRange.<init>(UInt, UInt)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.<get-start>()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.<get-endInclusive>()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.<get-endExclusive>()": {
        "size": 808,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.contains(UInt)": {
        "size": 861,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.contains(T)": {
        "size": 221,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.isEmpty()": {
        "size": 531,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.equals(Any?)": {
        "size": 800,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.hashCode()": {
        "size": 732,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.toString()": {
        "size": 372,
        "type": "function"
    },
    "kotlin.ranges.UIntRange.iterator()": {
        "size": 61,
        "type": "function"
    },
    "kotlin.ranges.Companion.fromClosedRange(UInt, UInt, Int)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.ranges.UIntProgression": {
        "size": 5896,
        "type": "class"
    },
    "kotlin.ranges.UIntProgression.<init>(UInt, UInt, Int)": {
        "size": 758,
        "type": "function"
    },
    "kotlin.ranges.UIntProgression.first": {
        "size": 42,
        "type": "field"
    },
    "kotlin.ranges.UIntProgression.last": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.UIntProgression.step": {
        "size": 40,
        "type": "field"
    },
    "kotlin.ranges.UIntProgression.iterator()": {
        "size": 252,
        "type": "function"
    },
    "kotlin.ranges.UIntProgression.isEmpty()": {
        "size": 1073,
        "type": "function"
    },
    "kotlin.ranges.UIntProgression.equals(Any?)": {
        "size": 1055,
        "type": "function"
    },
    "kotlin.ranges.UIntProgression.hashCode()": {
        "size": 1025,
        "type": "function"
    },
    "kotlin.ranges.UIntProgression.toString()": {
        "size": 1156,
        "type": "function"
    },
    "kotlin.ranges.UIntProgressionIterator": {
        "size": 2954,
        "type": "class"
    },
    "kotlin.ranges.UIntProgressionIterator.<init>(UInt, UInt, Int)": {
        "size": 897,
        "type": "function"
    },
    "kotlin.ranges.UIntProgressionIterator.finalElement": {
        "size": 49,
        "type": "field"
    },
    "kotlin.ranges.UIntProgressionIterator.hasNext": {
        "size": 29,
        "type": "field"
    },
    "kotlin.ranges.UIntProgressionIterator.step": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.UIntProgressionIterator.next": {
        "size": 23,
        "type": "field"
    },
    "kotlin.ranges.UIntProgressionIterator.hasNext()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.ranges.UIntProgressionIterator.next()": {
        "size": 1257,
        "type": "function"
    },
    "kotlin.ranges.UIntProgressionIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ranges.UIntProgressionIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.UIntProgressionIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.<ULong__<init>-impl>(Long)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.<ULong__<get-data>-impl>(ULong)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.ULong__compareTo-impl(ULong, ULong)": {
        "size": 248,
        "type": "function"
    },
    "kotlin.ULong__toLong-impl(ULong)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.ULong__toString-impl(ULong)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.ULong__hashCode-impl(ULong)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.ULong__equals-impl(ULong, Any?)": {
        "size": 620,
        "type": "function"
    },
    "kotlin.ULong": {
        "size": 1427,
        "type": "class"
    },
    "kotlin.ULong.<init>(Long)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.ULong.data": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ULong.compareTo(ULong)": {
        "size": 250,
        "type": "function"
    },
    "kotlin.ULong.compareTo(T)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.ULong.toString()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.ULong.hashCode()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.ULong.equals(Any?)": {
        "size": 186,
        "type": "function"
    },
    "kotlin.toULong()": {
        "size": 192,
        "type": "function"
    },
    "kotlin.<ULongArray__<init>-impl>(LongArray)": {
        "size": 172,
        "type": "function"
    },
    "kotlin.<ULongArray__<get-storage>-impl>(ULongArray)": {
        "size": 105,
        "type": "function"
    },
    "kotlin.<ULongArray__<init>-impl>(Int)": {
        "size": 174,
        "type": "function"
    },
    "kotlin.ULongArray__get-impl(ULongArray, Int)": {
        "size": 362,
        "type": "function"
    },
    "kotlin.ULongArray__set-impl(ULongArray, Int, ULong)": {
        "size": 279,
        "type": "function"
    },
    "kotlin.<ULongArray__<get-size>-impl>(ULongArray)": {
        "size": 133,
        "type": "function"
    },
    "kotlin.ULongArray__iterator-impl(ULongArray)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.Iterator.<init>(LongArray)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.ULongArray__contains-impl(ULongArray, ULong)": {
        "size": 508,
        "type": "function"
    },
    "kotlin.ULongArray__containsAll-impl(ULongArray, Collection<ULong>)": {
        "size": 1647,
        "type": "function"
    },
    "kotlin.ULongArray__isEmpty-impl(ULongArray)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.ULongArray__toString-impl(ULongArray)": {
        "size": 308,
        "type": "function"
    },
    "kotlin.ULongArray__hashCode-impl(ULongArray)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.ULongArray__equals-impl(ULongArray, Any?)": {
        "size": 704,
        "type": "function"
    },
    "kotlin.ULongArray": {
        "size": 2405,
        "type": "class"
    },
    "kotlin.ULongArray.<init>(LongArray)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.ULongArray.storage": {
        "size": 49,
        "type": "field"
    },
    "kotlin.ULongArray.<get-size>()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.ULongArray.iterator()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.ULongArray.contains(ULong)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.ULongArray.contains(@UnsafeVariance E)": {
        "size": 508,
        "type": "function"
    },
    "kotlin.ULongArray.containsAll(Collection<ULong>)": {
        "size": 224,
        "type": "function"
    },
    "kotlin.ULongArray.isEmpty()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.ULongArray.toString()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.ULongArray.hashCode()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.ULongArray.equals(Any?)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.ranges.ULongRange": {
        "size": 8808,
        "type": "class"
    },
    "kotlin.ranges.ULongRange.<init>(ULong, ULong)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.<get-start>()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.<get-endInclusive>()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.<get-endExclusive>()": {
        "size": 1280,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.contains(ULong)": {
        "size": 872,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.contains(T)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.isEmpty()": {
        "size": 538,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.equals(Any?)": {
        "size": 810,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.hashCode()": {
        "size": 3257,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.toString()": {
        "size": 376,
        "type": "function"
    },
    "kotlin.ranges.ULongRange.iterator()": {
        "size": 62,
        "type": "function"
    },
    "kotlin.ranges.Companion.fromClosedRange(ULong, ULong, Long)": {
        "size": 175,
        "type": "function"
    },
    "kotlin.ranges.ULongProgression": {
        "size": 8696,
        "type": "class"
    },
    "kotlin.ranges.ULongProgression.<init>(ULong, ULong, Long)": {
        "size": 697,
        "type": "function"
    },
    "kotlin.ranges.ULongProgression.first": {
        "size": 43,
        "type": "field"
    },
    "kotlin.ranges.ULongProgression.last": {
        "size": 42,
        "type": "field"
    },
    "kotlin.ranges.ULongProgression.step": {
        "size": 41,
        "type": "field"
    },
    "kotlin.ranges.ULongProgression.iterator()": {
        "size": 256,
        "type": "function"
    },
    "kotlin.ranges.ULongProgression.isEmpty()": {
        "size": 1111,
        "type": "function"
    },
    "kotlin.ranges.ULongProgression.equals(Any?)": {
        "size": 1067,
        "type": "function"
    },
    "kotlin.ranges.ULongProgression.hashCode()": {
        "size": 3680,
        "type": "function"
    },
    "kotlin.ranges.ULongProgression.toString()": {
        "size": 1191,
        "type": "function"
    },
    "kotlin.ranges.ULongProgressionIterator": {
        "size": 3011,
        "type": "class"
    },
    "kotlin.ranges.ULongProgressionIterator.<init>(ULong, ULong, Long)": {
        "size": 933,
        "type": "function"
    },
    "kotlin.ranges.ULongProgressionIterator.finalElement": {
        "size": 50,
        "type": "field"
    },
    "kotlin.ranges.ULongProgressionIterator.hasNext": {
        "size": 29,
        "type": "field"
    },
    "kotlin.ranges.ULongProgressionIterator.step": {
        "size": 42,
        "type": "field"
    },
    "kotlin.ranges.ULongProgressionIterator.next": {
        "size": 24,
        "type": "field"
    },
    "kotlin.ranges.ULongProgressionIterator.hasNext()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.ranges.ULongProgressionIterator.next()": {
        "size": 1270,
        "type": "function"
    },
    "kotlin.ranges.ULongProgressionIterator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ranges.ULongProgressionIterator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ranges.ULongProgressionIterator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.internal.getProgressionLastElement(UInt, UInt, Int)": {
        "size": 2209,
        "type": "function"
    },
    "kotlin.internal.getProgressionLastElement(ULong, ULong, Long)": {
        "size": 2288,
        "type": "function"
    },
    "kotlin.internal.differenceModulo(UInt, UInt, UInt)": {
        "size": 1344,
        "type": "function"
    },
    "kotlin.internal.differenceModulo(ULong, ULong, ULong)": {
        "size": 1368,
        "type": "function"
    },
    "kotlin.<UShort__<init>-impl>(Short)": {
        "size": 173,
        "type": "function"
    },
    "kotlin.<UShort__<get-data>-impl>(UShort)": {
        "size": 87,
        "type": "function"
    },
    "kotlin.UShort__compareTo-impl(UShort, UShort)": {
        "size": 846,
        "type": "function"
    },
    "kotlin.UShort__toString-impl(UShort)": {
        "size": 274,
        "type": "function"
    },
    "kotlin.UShort__hashCode-impl(UShort)": {
        "size": 102,
        "type": "function"
    },
    "kotlin.UShort__equals-impl(UShort, Any?)": {
        "size": 626,
        "type": "function"
    },
    "kotlin.UShort": {
        "size": 1446,
        "type": "class"
    },
    "kotlin.UShort.<init>(Short)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.UShort.data": {
        "size": 42,
        "type": "field"
    },
    "kotlin.UShort.compareTo(UShort)": {
        "size": 254,
        "type": "function"
    },
    "kotlin.UShort.compareTo(T)": {
        "size": 293,
        "type": "function"
    },
    "kotlin.UShort.toString()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.UShort.hashCode()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.UShort.equals(Any?)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.<UShortArray__<init>-impl>(ShortArray)": {
        "size": 176,
        "type": "function"
    },
    "kotlin.<UShortArray__<get-storage>-impl>(UShortArray)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.<UShortArray__<init>-impl>(Int)": {
        "size": 179,
        "type": "function"
    },
    "kotlin.UShortArray__get-impl(UShortArray, Int)": {
        "size": 370,
        "type": "function"
    },
    "kotlin.UShortArray__set-impl(UShortArray, Int, UShort)": {
        "size": 284,
        "type": "function"
    },
    "kotlin.<UShortArray__<get-size>-impl>(UShortArray)": {
        "size": 136,
        "type": "function"
    },
    "kotlin.UShortArray__iterator-impl(UShortArray)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.Iterator.<init>(ShortArray)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.UShortArray__contains-impl(UShortArray, UShort)": {
        "size": 515,
        "type": "function"
    },
    "kotlin.UShortArray__containsAll-impl(UShortArray, Collection<UShort>)": {
        "size": 1657,
        "type": "function"
    },
    "kotlin.UShortArray__isEmpty-impl(UShortArray)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.UShortArray__toString-impl(UShortArray)": {
        "size": 311,
        "type": "function"
    },
    "kotlin.UShortArray__hashCode-impl(UShortArray)": {
        "size": 103,
        "type": "function"
    },
    "kotlin.UShortArray__equals-impl(UShortArray, Any?)": {
        "size": 711,
        "type": "function"
    },
    "kotlin.UShortArray": {
        "size": 2439,
        "type": "class"
    },
    "kotlin.UShortArray.<init>(ShortArray)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.UShortArray.storage": {
        "size": 50,
        "type": "field"
    },
    "kotlin.UShortArray.<get-size>()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.UShortArray.iterator()": {
        "size": 191,
        "type": "function"
    },
    "kotlin.UShortArray.contains(UShort)": {
        "size": 216,
        "type": "function"
    },
    "kotlin.UShortArray.contains(@UnsafeVariance E)": {
        "size": 511,
        "type": "function"
    },
    "kotlin.UShortArray.containsAll(Collection<UShort>)": {
        "size": 228,
        "type": "function"
    },
    "kotlin.UShortArray.isEmpty()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.UShortArray.toString()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.UShortArray.hashCode()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.UShortArray.equals(Any?)": {
        "size": 204,
        "type": "function"
    },
    "kotlin.text.toUByte()": {
        "size": 371,
        "type": "function"
    },
    "kotlin.text.toUByteOrNull()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.toUByte(Int)": {
        "size": 394,
        "type": "function"
    },
    "kotlin.text.toUByteOrNull(Int)": {
        "size": 1723,
        "type": "function"
    },
    "kotlin.text.toUShort()": {
        "size": 377,
        "type": "function"
    },
    "kotlin.text.toUShortOrNull()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.text.toUShort(Int)": {
        "size": 400,
        "type": "function"
    },
    "kotlin.text.toUShortOrNull(Int)": {
        "size": 1736,
        "type": "function"
    },
    "kotlin.text.toUInt()": {
        "size": 365,
        "type": "function"
    },
    "kotlin.text.toUIntOrNull()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.text.toUInt(Int)": {
        "size": 388,
        "type": "function"
    },
    "kotlin.text.toUIntOrNull(Int)": {
        "size": 5117,
        "type": "function"
    },
    "kotlin.text.toULong()": {
        "size": 371,
        "type": "function"
    },
    "kotlin.text.toULongOrNull()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.text.toULong(Int)": {
        "size": 394,
        "type": "function"
    },
    "kotlin.text.toULongOrNull(Int)": {
        "size": 5732,
        "type": "function"
    },
    "kotlin.text.toString(Int)": {
        "size": 2203,
        "type": "function"
    },
    "kotlin.uintCompare(Int, Int)": {
        "size": 578,
        "type": "function"
    },
    "kotlin.uintDivide(UInt, UInt)": {
        "size": 759,
        "type": "function"
    },
    "kotlin.uintRemainder(UInt, UInt)": {
        "size": 762,
        "type": "function"
    },
    "kotlin.uintToDouble(Int)": {
        "size": 574,
        "type": "function"
    },
    "kotlin.ulongCompare(Long, Long)": {
        "size": 605,
        "type": "function"
    },
    "kotlin.ulongDivide(ULong, ULong)": {
        "size": 2420,
        "type": "function"
    },
    "kotlin.ulongRemainder(ULong, ULong)": {
        "size": 2385,
        "type": "function"
    },
    "kotlin.ulongToDouble(Long)": {
        "size": 931,
        "type": "function"
    },
    "kotlin.ulongToString(Long)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.ulongToString(Long, Int)": {
        "size": 2035,
        "type": "function"
    },
    "kotlin.doubleToUInt(Double)": {
        "size": 2841,
        "type": "function"
    },
    "kotlin.doubleToULong(Double)": {
        "size": 2036,
        "type": "function"
    },
    "kotlin.Any": {
        "size": 1248,
        "type": "class"
    },
    "kotlin.Any.<init>()": {
        "size": 118,
        "type": "function"
    },
    "kotlin.Any.typeInfo": {
        "size": 26,
        "type": "field"
    },
    "kotlin.Any.equals(Any?)": {
        "size": 96,
        "type": "function"
    },
    "kotlin.Any._hashCode": {
        "size": 27,
        "type": "field"
    },
    "kotlin.Any.hashCode()": {
        "size": 65,
        "type": "function"
    },
    "kotlin.Any.toString()": {
        "size": 814,
        "type": "function"
    },
    "kotlin.identityHashCode()": {
        "size": 334,
        "type": "function"
    },
    "kotlin.Array": {
        "size": 999,
        "type": "class"
    },
    "kotlin.Array.<init>(Int)": {
        "size": 147,
        "type": "function"
    },
    "kotlin.Array.storage": {
        "size": 52,
        "type": "field"
    },
    "kotlin.Array.<init>(WasmAnyArray)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.Array.get(Int)": {
        "size": 177,
        "type": "function"
    },
    "kotlin.Array.set(Int, T)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.Array.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.Array.iterator()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.Array.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Array.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Array.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.arrayIterator(Array<T>)": {
        "size": 164,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(Array<T>)": {
        "size": 139,
        "type": "function"
    },
    "kotlin.<no name provided>.index": {
        "size": 23,
        "type": "field"
    },
    "kotlin.<no name provided>.hasNext()": {
        "size": 253,
        "type": "function"
    },
    "kotlin.<no name provided>.next()": {
        "size": 774,
        "type": "function"
    },
    "kotlin.<no name provided>.$array": {
        "size": 51,
        "type": "field"
    },
    "kotlin.ByteArray": {
        "size": 939,
        "type": "class"
    },
    "kotlin.ByteArray.<init>(Int)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.ByteArray.storage": {
        "size": 53,
        "type": "field"
    },
    "kotlin.ByteArray.<init>(WasmByteArray)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.ByteArray.get(Int)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.ByteArray.set(Int, Byte)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.ByteArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.ByteArray.iterator()": {
        "size": 86,
        "type": "function"
    },
    "kotlin.ByteArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ByteArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ByteArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.IntArray": {
        "size": 931,
        "type": "class"
    },
    "kotlin.IntArray.<init>(Int)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.IntArray.storage": {
        "size": 52,
        "type": "field"
    },
    "kotlin.IntArray.<init>(WasmIntArray)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.IntArray.get(Int)": {
        "size": 141,
        "type": "function"
    },
    "kotlin.IntArray.set(Int, Int)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.IntArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.IntArray.iterator()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.IntArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.IntArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.IntArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.byteArrayIterator(ByteArray)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.intArrayIterator(IntArray)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.ShortArray": {
        "size": 947,
        "type": "class"
    },
    "kotlin.ShortArray.<init>(Int)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.ShortArray.storage": {
        "size": 54,
        "type": "field"
    },
    "kotlin.ShortArray.<init>(WasmShortArray)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.ShortArray.get(Int)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.ShortArray.set(Int, Short)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.ShortArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.ShortArray.iterator()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.ShortArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ShortArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ShortArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.LongArray": {
        "size": 939,
        "type": "class"
    },
    "kotlin.LongArray.<init>(Int)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.LongArray.storage": {
        "size": 53,
        "type": "field"
    },
    "kotlin.LongArray.<init>(WasmLongArray)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.LongArray.get(Int)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.LongArray.set(Int, Long)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.LongArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.LongArray.iterator()": {
        "size": 86,
        "type": "function"
    },
    "kotlin.LongArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.LongArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.LongArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.DoubleArray": {
        "size": 955,
        "type": "class"
    },
    "kotlin.DoubleArray.<init>(Int)": {
        "size": 127,
        "type": "function"
    },
    "kotlin.DoubleArray.storage": {
        "size": 55,
        "type": "field"
    },
    "kotlin.DoubleArray.<init>(WasmDoubleArray)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.DoubleArray.get(Int)": {
        "size": 144,
        "type": "function"
    },
    "kotlin.DoubleArray.set(Int, Double)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.DoubleArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.DoubleArray.iterator()": {
        "size": 90,
        "type": "function"
    },
    "kotlin.DoubleArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.DoubleArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.DoubleArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.CharArray": {
        "size": 939,
        "type": "class"
    },
    "kotlin.CharArray.<init>(Int)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.CharArray.storage": {
        "size": 53,
        "type": "field"
    },
    "kotlin.CharArray.<init>(WasmCharArray)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.CharArray.get(Int)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.CharArray.set(Int, Char)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.CharArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.CharArray.iterator()": {
        "size": 86,
        "type": "function"
    },
    "kotlin.CharArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.CharArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.CharArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.shortArrayIterator(ShortArray)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.longArrayIterator(LongArray)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.doubleArrayIterator(DoubleArray)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.charArrayIterator(CharArray)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.FloatArray": {
        "size": 947,
        "type": "class"
    },
    "kotlin.FloatArray.<init>(Int)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.FloatArray.storage": {
        "size": 54,
        "type": "field"
    },
    "kotlin.FloatArray.<init>(WasmFloatArray)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.FloatArray.get(Int)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.FloatArray.set(Int, Float)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.FloatArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.FloatArray.iterator()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.FloatArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.FloatArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.FloatArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.BooleanArray": {
        "size": 1097,
        "type": "class"
    },
    "kotlin.BooleanArray.<init>(Int)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.BooleanArray.storage": {
        "size": 53,
        "type": "field"
    },
    "kotlin.BooleanArray.<init>(WasmByteArray)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.BooleanArray.get(Int)": {
        "size": 222,
        "type": "function"
    },
    "kotlin.BooleanArray.set(Int, Boolean)": {
        "size": 226,
        "type": "function"
    },
    "kotlin.BooleanArray.<get-size>()": {
        "size": 58,
        "type": "function"
    },
    "kotlin.BooleanArray.iterator()": {
        "size": 92,
        "type": "function"
    },
    "kotlin.BooleanArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.BooleanArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.BooleanArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.floatArrayIterator(FloatArray)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.booleanArrayIterator(BooleanArray)": {
        "size": 168,
        "type": "function"
    },
    "kotlin.reinterpretAsByte()": {
        "size": 105,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(ByteArray)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.<no name provided>.nextByte()": {
        "size": 763,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(IntArray)": {
        "size": 147,
        "type": "function"
    },
    "kotlin.<no name provided>.nextInt()": {
        "size": 761,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(ShortArray)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.<no name provided>.nextShort()": {
        "size": 765,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(LongArray)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.<no name provided>.nextLong()": {
        "size": 763,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(DoubleArray)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.<no name provided>.nextDouble()": {
        "size": 767,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(CharArray)": {
        "size": 149,
        "type": "function"
    },
    "kotlin.<no name provided>.nextChar()": {
        "size": 763,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(FloatArray)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.<no name provided>.nextFloat()": {
        "size": 765,
        "type": "function"
    },
    "kotlin.<no name provided>.<init>(BooleanArray)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.<no name provided>.nextBoolean()": {
        "size": 769,
        "type": "function"
    },
    "kotlin.Boolean__not-impl(Boolean)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.Boolean__or-impl(Boolean, Boolean)": {
        "size": 164,
        "type": "function"
    },
    "kotlin.Boolean__xor-impl(Boolean, Boolean)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.Boolean__compareTo-impl(Boolean, Boolean)": {
        "size": 213,
        "type": "function"
    },
    "kotlin.Boolean__toString-impl(Boolean)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.Boolean__hashCode-impl(Boolean)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.Boolean__equals-impl(Boolean, Any?)": {
        "size": 459,
        "type": "function"
    },
    "kotlin.Boolean__toInt-impl(Boolean)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.Boolean": {
        "size": 1346,
        "type": "class"
    },
    "kotlin.Boolean.<init>(Boolean)": {
        "size": 96,
        "type": "function"
    },
    "kotlin.Boolean.value": {
        "size": 45,
        "type": "field"
    },
    "kotlin.Boolean.compareTo(Boolean)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.Boolean.compareTo(T)": {
        "size": 295,
        "type": "function"
    },
    "kotlin.Boolean.toString()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.Boolean.hashCode()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.Boolean.equals(Any?)": {
        "size": 218,
        "type": "function"
    },
    "kotlin.Char__compareTo-impl(Char, Char)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.Char__equals-impl(Char, Any?)": {
        "size": 386,
        "type": "function"
    },
    "kotlin.Char__plus-impl(Char, Int)": {
        "size": 204,
        "type": "function"
    },
    "kotlin.Char__rangeTo-impl(Char, Char)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.Char__rangeUntil-impl(Char, Char)": {
        "size": 203,
        "type": "function"
    },
    "kotlin.Char__toInt-impl(Char)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.Char__toString-impl(Char)": {
        "size": 318,
        "type": "function"
    },
    "kotlin.Char__hashCode-impl(Char)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.Companion.MIN_HIGH_SURROGATE": {
        "size": 58,
        "type": "field"
    },
    "kotlin.Companion.MAX_HIGH_SURROGATE": {
        "size": 58,
        "type": "field"
    },
    "kotlin.Companion.MIN_LOW_SURROGATE": {
        "size": 57,
        "type": "field"
    },
    "kotlin.Companion.MAX_LOW_SURROGATE": {
        "size": 57,
        "type": "field"
    },
    "kotlin.Companion.MIN_SURROGATE": {
        "size": 53,
        "type": "field"
    },
    "kotlin.Companion.MAX_SURROGATE": {
        "size": 53,
        "type": "field"
    },
    "kotlin.Companion.MIN_SUPPLEMENTARY_CODE_POINT": {
        "size": 73,
        "type": "field"
    },
    "kotlin.Companion.MIN_CODE_POINT": {
        "size": 55,
        "type": "field"
    },
    "kotlin.Companion.MAX_CODE_POINT": {
        "size": 61,
        "type": "field"
    },
    "kotlin.Companion.MIN_RADIX": {
        "size": 50,
        "type": "field"
    },
    "kotlin.Companion.MAX_RADIX": {
        "size": 51,
        "type": "field"
    },
    "kotlin.Char": {
        "size": 1330,
        "type": "class"
    },
    "kotlin.Char.<init>(Char)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.Char.value": {
        "size": 42,
        "type": "field"
    },
    "kotlin.Char.compareTo(Char)": {
        "size": 211,
        "type": "function"
    },
    "kotlin.Char.compareTo(T)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.Char.equals(Any?)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.Char.toString()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.Char.hashCode()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.Enum": {
        "size": 1378,
        "type": "class"
    },
    "kotlin.Enum.<init>(String, Int)": {
        "size": 147,
        "type": "function"
    },
    "kotlin.Enum.name": {
        "size": 43,
        "type": "field"
    },
    "kotlin.Enum.ordinal": {
        "size": 43,
        "type": "field"
    },
    "kotlin.Enum.compareTo(E)": {
        "size": 452,
        "type": "function"
    },
    "kotlin.Enum.compareTo(T)": {
        "size": 318,
        "type": "function"
    },
    "kotlin.Enum.toString()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.Enum.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Enum.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.toString()": {
        "size": 375,
        "type": "function"
    },
    "kotlin.arrayOf(Array<out T>)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.arrayOfNulls(Int)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.plus(Any?)": {
        "size": 247,
        "type": "function"
    },
    "kotlin.Byte__compareTo-impl(Byte, Byte)": {
        "size": 205,
        "type": "function"
    },
    "kotlin.Byte__rangeTo-impl(Byte, Byte)": {
        "size": 180,
        "type": "function"
    },
    "kotlin.Byte__rangeUntil-impl(Byte, Byte)": {
        "size": 202,
        "type": "function"
    },
    "kotlin.Byte__toInt-impl(Byte)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.Byte__toLong-impl(Byte)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.Byte__toDouble-impl(Byte)": {
        "size": 145,
        "type": "function"
    },
    "kotlin.Byte__toString-impl(Byte)": {
        "size": 145,
        "type": "function"
    },
    "kotlin.Byte__equals-impl(Byte, Any?)": {
        "size": 389,
        "type": "function"
    },
    "kotlin.Byte__hashCode-impl(Byte)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.Byte__reinterpretAsInt-impl(Byte)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.Byte": {
        "size": 1485,
        "type": "class"
    },
    "kotlin.Byte.<init>(Byte)": {
        "size": 96,
        "type": "function"
    },
    "kotlin.Byte.value": {
        "size": 42,
        "type": "field"
    },
    "kotlin.Byte.compareTo(Byte)": {
        "size": 218,
        "type": "function"
    },
    "kotlin.Byte.compareTo(T)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.Byte.toInt()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.Byte.toString()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.Byte.equals(Any?)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.Byte.hashCode()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.Int__compareTo-impl(Int, Int)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.Int__plus-impl(Int, Int)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.Int__minus-impl(Int, Int)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.Int__times-impl(Int, Int)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.Int__div-impl(Int, Int)": {
        "size": 392,
        "type": "function"
    },
    "kotlin.Int__rem-impl(Int, Int)": {
        "size": 185,
        "type": "function"
    },
    "kotlin.Int__dec-impl(Int)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.Int__rangeTo-impl(Int, Int)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.Int__rangeTo-impl(Int, Long)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.Int__rangeUntil-impl(Int, Int)": {
        "size": 199,
        "type": "function"
    },
    "kotlin.Int__rangeUntil-impl(Int, Long)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.Int__shl-impl(Int, Int)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.Int__shr-impl(Int, Int)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.Int__ushr-impl(Int, Int)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.Int__and-impl(Int, Int)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.Int__or-impl(Int, Int)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.Int__xor-impl(Int, Int)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.Int__toByte-impl(Int)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.Int__toChar-impl(Int)": {
        "size": 204,
        "type": "function"
    },
    "kotlin.Int__toShort-impl(Int)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.Int__toInt-impl(Int)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.Int__toLong-impl(Int)": {
        "size": 112,
        "type": "function"
    },
    "kotlin.Int__toFloat-impl(Int)": {
        "size": 115,
        "type": "function"
    },
    "kotlin.Int__toDouble-impl(Int)": {
        "size": 117,
        "type": "function"
    },
    "kotlin.Int__toString-impl(Int)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.Int__equals-impl(Int, Any?)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.Int__hashCode-impl(Int)": {
        "size": 60,
        "type": "function"
    },
    "kotlin.Int__reinterpretAsBoolean-impl(Int)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.Int__reinterpretAsByte-impl(Int)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.Int__reinterpretAsShort-impl(Int)": {
        "size": 134,
        "type": "function"
    },
    "kotlin.Int__reinterpretAsChar-impl(Int)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.Int": {
        "size": 1470,
        "type": "class"
    },
    "kotlin.Int.<init>(Int)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.Int.value": {
        "size": 41,
        "type": "field"
    },
    "kotlin.Int.compareTo(Int)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.Int.compareTo(T)": {
        "size": 287,
        "type": "function"
    },
    "kotlin.Int.toInt()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.Int.toString()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.Int.equals(Any?)": {
        "size": 206,
        "type": "function"
    },
    "kotlin.Int.hashCode()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.Long__compareTo-impl(Long, Long)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.Long__plus-impl(Long, Long)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.Long__minus-impl(Long, Long)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.Long__times-impl(Long, Long)": {
        "size": 159,
        "type": "function"
    },
    "kotlin.Long__div-impl(Long, Long)": {
        "size": 417,
        "type": "function"
    },
    "kotlin.Long__rem-impl(Long, Long)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.Long__rangeTo-impl(Long, Long)": {
        "size": 130,
        "type": "function"
    },
    "kotlin.Long__rangeUntil-impl(Long, Long)": {
        "size": 203,
        "type": "function"
    },
    "kotlin.Long__and-impl(Long, Long)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.Long__or-impl(Long, Long)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.Long__xor-impl(Long, Long)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.Long__toInt-impl(Long)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.Long__toFloat-impl(Long)": {
        "size": 117,
        "type": "function"
    },
    "kotlin.Long__toDouble-impl(Long)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.Long__toString-impl(Long)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.Long__equals-impl(Long, Any?)": {
        "size": 337,
        "type": "function"
    },
    "kotlin.Long__hashCode-impl(Long)": {
        "size": 258,
        "type": "function"
    },
    "kotlin.Long": {
        "size": 1485,
        "type": "class"
    },
    "kotlin.Long.<init>(Long)": {
        "size": 96,
        "type": "function"
    },
    "kotlin.Long.value": {
        "size": 42,
        "type": "field"
    },
    "kotlin.Long.compareTo(Long)": {
        "size": 218,
        "type": "function"
    },
    "kotlin.Long.compareTo(T)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.Long.toInt()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.Long.toString()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.Long.equals(Any?)": {
        "size": 209,
        "type": "function"
    },
    "kotlin.Long.hashCode()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.Short__compareTo-impl(Short, Short)": {
        "size": 467,
        "type": "function"
    },
    "kotlin.Short__rangeTo-impl(Short, Short)": {
        "size": 185,
        "type": "function"
    },
    "kotlin.Short__rangeUntil-impl(Short, Short)": {
        "size": 205,
        "type": "function"
    },
    "kotlin.Short__toInt-impl(Short)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.Short__toLong-impl(Short)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.Short__toDouble-impl(Short)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.Short__toString-impl(Short)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.Short__equals-impl(Short, Any?)": {
        "size": 395,
        "type": "function"
    },
    "kotlin.Short__hashCode-impl(Short)": {
        "size": 91,
        "type": "function"
    },
    "kotlin.Short__reinterpretAsInt-impl(Short)": {
        "size": 134,
        "type": "function"
    },
    "kotlin.Short": {
        "size": 1507,
        "type": "class"
    },
    "kotlin.Short.<init>(Short)": {
        "size": 97,
        "type": "function"
    },
    "kotlin.Short.value": {
        "size": 43,
        "type": "field"
    },
    "kotlin.Short.compareTo(Short)": {
        "size": 222,
        "type": "function"
    },
    "kotlin.Short.compareTo(T)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.Short.toInt()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.Short.toString()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.Short.equals(Any?)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.Short.hashCode()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.Companion.POSITIVE_INFINITY": {
        "size": 59,
        "type": "field"
    },
    "kotlin.Companion.NEGATIVE_INFINITY": {
        "size": 60,
        "type": "field"
    },
    "kotlin.Companion.NaN": {
        "size": 40,
        "type": "field"
    },
    "kotlin.Float__compareTo-impl(Float, Float)": {
        "size": 435,
        "type": "function"
    },
    "kotlin.Float__plus-impl(Float, Float)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.Float__minus-impl(Float, Float)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.Float__times-impl(Float, Float)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.Float__div-impl(Float, Float)": {
        "size": 161,
        "type": "function"
    },
    "kotlin.Float__rem-impl(Float, Float)": {
        "size": 287,
        "type": "function"
    },
    "kotlin.Float__unaryMinus-impl(Float)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.Float__toInt-impl(Float)": {
        "size": 117,
        "type": "function"
    },
    "kotlin.Float__toLong-impl(Float)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.Float__toDouble-impl(Float)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.Float__toString-impl(Float)": {
        "size": 137,
        "type": "function"
    },
    "kotlin.Float__equals-impl(Float, Any?)": {
        "size": 556,
        "type": "function"
    },
    "kotlin.Float__hashCode-impl(Float)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.Float": {
        "size": 1500,
        "type": "class"
    },
    "kotlin.Float.<init>(Float)": {
        "size": 97,
        "type": "function"
    },
    "kotlin.Float.value": {
        "size": 43,
        "type": "field"
    },
    "kotlin.Float.compareTo(Float)": {
        "size": 215,
        "type": "function"
    },
    "kotlin.Float.compareTo(T)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.Float.toInt()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.Float.toString()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.Float.equals(Any?)": {
        "size": 212,
        "type": "function"
    },
    "kotlin.Float.hashCode()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.Double__compareTo-impl(Double, Double)": {
        "size": 440,
        "type": "function"
    },
    "kotlin.Double__plus-impl(Double, Double)": {
        "size": 166,
        "type": "function"
    },
    "kotlin.Double__minus-impl(Double, Double)": {
        "size": 167,
        "type": "function"
    },
    "kotlin.Double__times-impl(Double, Double)": {
        "size": 167,
        "type": "function"
    },
    "kotlin.Double__div-impl(Double, Double)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.Double__rem-impl(Double, Double)": {
        "size": 294,
        "type": "function"
    },
    "kotlin.Double__unaryMinus-impl(Double)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.Double__toInt-impl(Double)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.Double__toLong-impl(Double)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.Double__toFloat-impl(Double)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.Double__toString-impl(Double)": {
        "size": 109,
        "type": "function"
    },
    "kotlin.Double__equals-impl(Double, Any?)": {
        "size": 363,
        "type": "function"
    },
    "kotlin.Double__hashCode-impl(Double)": {
        "size": 104,
        "type": "function"
    },
    "kotlin.Double": {
        "size": 1522,
        "type": "class"
    },
    "kotlin.Double.<init>(Double)": {
        "size": 98,
        "type": "function"
    },
    "kotlin.Double.value": {
        "size": 44,
        "type": "field"
    },
    "kotlin.Double.compareTo(Double)": {
        "size": 219,
        "type": "function"
    },
    "kotlin.Double.compareTo(T)": {
        "size": 293,
        "type": "function"
    },
    "kotlin.Double.toInt()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.Double.toString()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.Double.equals(Any?)": {
        "size": 215,
        "type": "function"
    },
    "kotlin.Double.hashCode()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.String": {
        "size": 13671,
        "type": "class"
    },
    "kotlin.String.<init>(String?, Int, WasmCharArray)": {
        "size": 252,
        "type": "function"
    },
    "kotlin.String.leftIfInSum": {
        "size": 33,
        "type": "field"
    },
    "kotlin.String.<get-length>()": {
        "size": 134,
        "type": "function"
    },
    "kotlin.String.length": {
        "size": 42,
        "type": "field"
    },
    "kotlin.String._chars": {
        "size": 34,
        "type": "field"
    },
    "kotlin.String.plus(Any?)": {
        "size": 558,
        "type": "function"
    },
    "kotlin.String.get(Int)": {
        "size": 573,
        "type": "function"
    },
    "kotlin.String.foldChars()": {
        "size": 1909,
        "type": "function"
    },
    "kotlin.String.subSequence(Int, Int)": {
        "size": 1485,
        "type": "function"
    },
    "kotlin.String.compareTo(String)": {
        "size": 2463,
        "type": "function"
    },
    "kotlin.String.compareTo(T)": {
        "size": 294,
        "type": "function"
    },
    "kotlin.String.equals(Any?)": {
        "size": 3151,
        "type": "function"
    },
    "kotlin.String.toString()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.String.hashCode()": {
        "size": 1737,
        "type": "function"
    },
    "kotlin.stringLiteral(Int, Int, Int)": {
        "size": 585,
        "type": "function"
    },
    "kotlin.Throwable": {
        "size": 2196,
        "type": "class"
    },
    "kotlin.Throwable.<init>(String?, Throwable?)": {
        "size": 287,
        "type": "function"
    },
    "kotlin.Throwable.<get-message>()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.Throwable.message": {
        "size": 47,
        "type": "field"
    },
    "kotlin.Throwable.<get-cause>()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.Throwable.cause": {
        "size": 48,
        "type": "field"
    },
    "kotlin.Throwable.<init>(String?)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.Throwable.<init>(Throwable?)": {
        "size": 260,
        "type": "function"
    },
    "kotlin.Throwable.<init>()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.Throwable.jsStack": {
        "size": 45,
        "type": "field"
    },
    "kotlin.Throwable._stack": {
        "size": 28,
        "type": "field"
    },
    "kotlin.Throwable.<get-stack>()": {
        "size": 356,
        "type": "function"
    },
    "kotlin.Throwable.suppressedExceptionsList": {
        "size": 62,
        "type": "field"
    },
    "kotlin.Throwable.toString()": {
        "size": 371,
        "type": "function"
    },
    "kotlin.Throwable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Throwable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.captureStackTrace()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.captureStackTrace__externalAdapter()": {
        "size": 278,
        "type": "function"
    },
    "kotlin.wasm.internal.returnIfSuspended(Any?, Continuation<T>)": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.DefaultConstructorMarker": {
        "size": 46,
        "type": "class"
    },
    "kotlin.wasm.internal.isNotFirstWasmExportCall": {
        "size": 73,
        "type": "field"
    },
    "kotlin.wasm.internal.throwAsJsException(Throwable)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.wasm.internal.throwJsError(JsString?, JsString?, JsAny)": {
        "size": 335,
        "type": "function"
    },
    "kotlin.wasm.internal.throwJsError__externalAdapter(String?, String?, JsAny)": {
        "size": 601,
        "type": "function"
    },
    "kotlin.wasm.internal._jsEmptyString": {
        "size": 64,
        "type": "field"
    },
    "kotlin.wasm.internal.jsToKotlinStringAdapter(JsAny)": {
        "size": 2972,
        "type": "function"
    },
    "kotlin.wasm.internal.stringLength(JsAny)": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.jsExportStringToWasm(JsAny, Int, Int, Int)": {
        "size": 454,
        "type": "function"
    },
    "kotlin.wasm.internal.kotlinToJsStringAdapter(String?)": {
        "size": 3525,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-jsEmptyString>()": {
        "size": 333,
        "type": "function"
    },
    "kotlin.wasm.internal.importStringFromWasm(Int, Int, JsAny?)": {
        "size": 331,
        "type": "function"
    },
    "kotlin.wasm.internal.importStringFromWasm__externalAdapter(Int, Int, JsAny?)": {
        "size": 380,
        "type": "function"
    },
    "kotlin.wasm.internal.getJsEmptyString()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.wasm.internal.getJsEmptyString__externalAdapter()": {
        "size": 279,
        "type": "function"
    },
    "kotlin.wasm.internal.kotlinToJsAnyAdapter(Any?)": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.anyToExternRef(Any)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.wasm.internal.JsExternalBox": {
        "size": 1290,
        "type": "class"
    },
    "kotlin.wasm.internal.JsExternalBox.<init>(JsAny)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.wasm.internal.JsExternalBox.ref": {
        "size": 41,
        "type": "field"
    },
    "kotlin.wasm.internal.JsExternalBox.toString()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.JsExternalBox.equals(Any?)": {
        "size": 463,
        "type": "function"
    },
    "kotlin.wasm.internal.JsExternalBox.hashCode()": {
        "size": 365,
        "type": "function"
    },
    "kotlin.wasm.internal.asWasmExternRef()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.externrefToString(JsAny)": {
        "size": 89,
        "type": "function"
    },
    "kotlin.wasm.internal.externrefToString__externalAdapter(JsAny)": {
        "size": 264,
        "type": "function"
    },
    "kotlin.wasm.internal.externrefEquals(JsAny, JsAny)": {
        "size": 105,
        "type": "function"
    },
    "kotlin.wasm.internal.externrefHashCode(JsAny)": {
        "size": 1354,
        "type": "function"
    },
    "kotlin.wasm.internal.jsCheckIsNullOrUndefinedAdapter(JsAny?)": {
        "size": 459,
        "type": "function"
    },
    "kotlin.wasm.internal.isNullish(JsAny?)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.wasm.internal.jsToKotlinAnyAdapter(JsAny?)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.externRefToAny(JsAny)": {
        "size": 257,
        "type": "function"
    },
    "kotlin.wasm.internal.tryGetOrSetExternrefBox_$external_fun(JsAny, JsReference<JsExternalBox>)": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.tryGetOrSetExternrefBox_$external_fun__externalAdapter(JsAny, JsReference<JsExternalBox>)": {
        "size": 268,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty0Impl": {
        "size": 2527,
        "type": "class"
    },
    "kotlin.wasm.internal.KProperty0Impl.<init>(String, KType, Function0<R>)": {
        "size": 208,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty0Impl.<get-name>()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty0Impl.name": {
        "size": 43,
        "type": "field"
    },
    "kotlin.wasm.internal.KProperty0Impl.returnType": {
        "size": 48,
        "type": "field"
    },
    "kotlin.wasm.internal.KProperty0Impl.getter": {
        "size": 51,
        "type": "field"
    },
    "kotlin.wasm.internal.KProperty0Impl.get()": {
        "size": 205,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty0Impl.invoke()": {
        "size": 217,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty0Impl.equals(Any?)": {
        "size": 711,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty0Impl.hashCode()": {
        "size": 320,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty0Impl.toString()": {
        "size": 363,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty1Impl": {
        "size": 2639,
        "type": "class"
    },
    "kotlin.wasm.internal.KProperty1Impl.<init>(String, KType, Function1<T, R>)": {
        "size": 211,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty1Impl.<get-name>()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty1Impl.name": {
        "size": 43,
        "type": "field"
    },
    "kotlin.wasm.internal.KProperty1Impl.returnType": {
        "size": 48,
        "type": "field"
    },
    "kotlin.wasm.internal.KProperty1Impl.getter": {
        "size": 54,
        "type": "field"
    },
    "kotlin.wasm.internal.KProperty1Impl.get(T)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty1Impl.invoke(T)": {
        "size": 238,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty1Impl.equals(Any?)": {
        "size": 729,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty1Impl.hashCode()": {
        "size": 329,
        "type": "function"
    },
    "kotlin.wasm.internal.KProperty1Impl.toString()": {
        "size": 369,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl": {
        "size": 2698,
        "type": "class"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.<init>(String, KType, Function0<R>, Function1<R, Unit>)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.setter": {
        "size": 57,
        "type": "field"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.set(R)": {
        "size": 263,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.equals(Any?)": {
        "size": 916,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.hashCode()": {
        "size": 492,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.toString()": {
        "size": 377,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.<get-name>()": {
        "size": 46,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.get()": {
        "size": 34,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty0Impl.invoke()": {
        "size": 46,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl": {
        "size": 2818,
        "type": "class"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.<init>(String, KType, Function1<T, R>, Function2<T, R, Unit>)": {
        "size": 252,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.setter": {
        "size": 60,
        "type": "field"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.set(T, R)": {
        "size": 300,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.equals(Any?)": {
        "size": 937,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.hashCode()": {
        "size": 504,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.toString()": {
        "size": 383,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.<get-name>()": {
        "size": 46,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.get(T)": {
        "size": 45,
        "type": "function"
    },
    "kotlin.wasm.internal.KMutableProperty1Impl.invoke(T)": {
        "size": 51,
        "type": "function"
    },
    "kotlin.wasm.internal.<set-_K>(Int)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-_K>()": {
        "size": 85,
        "type": "function"
    },
    "kotlin.wasm.internal._K": {
        "size": 39,
        "type": "field"
    },
    "kotlin.wasm.internal.<set-_exp>(Int)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-_exp>()": {
        "size": 89,
        "type": "function"
    },
    "kotlin.wasm.internal._exp": {
        "size": 41,
        "type": "field"
    },
    "kotlin.wasm.internal.<set-_frc_minus>(Long)": {
        "size": 112,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-_frc_minus>()": {
        "size": 102,
        "type": "function"
    },
    "kotlin.wasm.internal._frc_minus": {
        "size": 48,
        "type": "field"
    },
    "kotlin.wasm.internal.<set-_frc_plus>(Long)": {
        "size": 110,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-_frc_plus>()": {
        "size": 100,
        "type": "function"
    },
    "kotlin.wasm.internal._frc_plus": {
        "size": 47,
        "type": "field"
    },
    "kotlin.wasm.internal.<set-_frc_pow>(Long)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-_frc_pow>()": {
        "size": 98,
        "type": "function"
    },
    "kotlin.wasm.internal._frc_pow": {
        "size": 46,
        "type": "field"
    },
    "kotlin.wasm.internal.<set-_exp_pow>(Int)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-_exp_pow>()": {
        "size": 97,
        "type": "function"
    },
    "kotlin.wasm.internal._exp_pow": {
        "size": 45,
        "type": "field"
    },
    "kotlin.wasm.internal.<get-EXP_POWERS>()": {
        "size": 108,
        "type": "function"
    },
    "kotlin.wasm.internal.EXP_POWERS": {
        "size": 60,
        "type": "field"
    },
    "kotlin.wasm.internal.<get-FRC_POWERS>()": {
        "size": 107,
        "type": "function"
    },
    "kotlin.wasm.internal.FRC_POWERS": {
        "size": 59,
        "type": "field"
    },
    "kotlin.wasm.internal.itoa32(Int, Int)": {
        "size": 1750,
        "type": "function"
    },
    "kotlin.wasm.internal.itoa64(Long, Int)": {
        "size": 2455,
        "type": "function"
    },
    "kotlin.wasm.internal.dtoa(Double)": {
        "size": 825,
        "type": "function"
    },
    "kotlin.wasm.internal.decimalCount32(Int)": {
        "size": 1115,
        "type": "function"
    },
    "kotlin.wasm.internal.utoaDecSimple(WasmCharArray, Int, Int)": {
        "size": 910,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes_PLUS_instance": {
        "size": 59,
        "type": "field"
    },
    "kotlin.wasm.internal.CharCodes_MINUS_instance": {
        "size": 60,
        "type": "field"
    },
    "kotlin.wasm.internal.CharCodes_DOT_instance": {
        "size": 58,
        "type": "field"
    },
    "kotlin.wasm.internal.CharCodes__0_instance": {
        "size": 57,
        "type": "field"
    },
    "kotlin.wasm.internal.CharCodes_e_instance": {
        "size": 56,
        "type": "field"
    },
    "kotlin.wasm.internal.CharCodes_entriesInitialized": {
        "size": 69,
        "type": "field"
    },
    "kotlin.wasm.internal.CharCodes_initEntries()": {
        "size": 525,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes": {
        "size": 507,
        "type": "class"
    },
    "kotlin.wasm.internal.CharCodes.<init>(String, Int, Int)": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes.code": {
        "size": 40,
        "type": "field"
    },
    "kotlin.wasm.internal.CharCodes.compareTo(CharCodes)": {
        "size": 67,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.decimalCount64High(Long)": {
        "size": 1214,
        "type": "function"
    },
    "kotlin.wasm.internal.utoaDecSimple64(WasmCharArray, Long, Int)": {
        "size": 1402,
        "type": "function"
    },
    "kotlin.wasm.internal.dtoaCore(WasmCharArray, Double)": {
        "size": 804,
        "type": "function"
    },
    "kotlin.wasm.internal.copyInto(WasmCharArray, Int, Int, Int)": {
        "size": 1793,
        "type": "function"
    },
    "kotlin.wasm.internal.digitToChar(Int)": {
        "size": 275,
        "type": "function"
    },
    "kotlin.wasm.internal.grisu2(Double, WasmCharArray, Int)": {
        "size": 2458,
        "type": "function"
    },
    "kotlin.wasm.internal.prettify(BufferWithOffset, Int, Int)": {
        "size": 4472,
        "type": "function"
    },
    "kotlin.wasm.internal.BufferWithOffset": {
        "size": 1055,
        "type": "class"
    },
    "kotlin.wasm.internal.BufferWithOffset.<init>(WasmCharArray, Int)": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.BufferWithOffset.buf": {
        "size": 49,
        "type": "field"
    },
    "kotlin.wasm.internal.BufferWithOffset.off": {
        "size": 39,
        "type": "field"
    },
    "kotlin.wasm.internal.BufferWithOffset.set(Int, Char)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.wasm.internal.BufferWithOffset.memoryCopy(Int, Int, Int)": {
        "size": 295,
        "type": "function"
    },
    "kotlin.wasm.internal.BufferWithOffset.offsetABitMore(Int)": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.BufferWithOffset.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.BufferWithOffset.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.BufferWithOffset.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.toLong()": {
        "size": 131,
        "type": "function"
    },
    "kotlin.wasm.internal.normalizedBoundaries(Long, Int)": {
        "size": 1930,
        "type": "function"
    },
    "kotlin.wasm.internal.getCachedPower(Int)": {
        "size": 1317,
        "type": "function"
    },
    "kotlin.wasm.internal.umul64f(Long, Long)": {
        "size": 1782,
        "type": "function"
    },
    "kotlin.wasm.internal.umul64e(Int, Int)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.genDigits(WasmCharArray, Long, Long, Int, Long, Int)": {
        "size": 8052,
        "type": "function"
    },
    "kotlin.wasm.internal.genExponent(BufferWithOffset, Int)": {
        "size": 1492,
        "type": "function"
    },
    "kotlin.wasm.internal.grisuRound(WasmCharArray, Int, Long, Long, Long, Long)": {
        "size": 1260,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes_PLUS_getInstance()": {
        "size": 109,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes_MINUS_getInstance()": {
        "size": 111,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes_DOT_getInstance()": {
        "size": 107,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes__0_getInstance()": {
        "size": 105,
        "type": "function"
    },
    "kotlin.wasm.internal.CharCodes_e_getInstance()": {
        "size": 103,
        "type": "function"
    },
    "kotlin.wasm.internal.properties initialized Number2String.kt": {
        "size": 78,
        "type": "field"
    },
    "kotlin.wasm.internal.<init properties Number2String.kt>()": {
        "size": 15686,
        "type": "function"
    },
    "kotlin.wasm.internal.stringPool": {
        "size": 64,
        "type": "field"
    },
    "kotlin.wasm.internal.unsafeRawMemoryToWasmCharArray(Int, Int, Int, WasmCharArray)": {
        "size": 783,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeAnyIntoVoid(Any?)": {
        "size": 115,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeBooleanIntoVoid(Boolean)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeByteIntoVoid(Byte)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeShortIntoVoid(Short)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeCharIntoVoid(Char)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeIntIntoVoid(Int)": {
        "size": 114,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeLongIntoVoid(Long)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeFloatIntoVoid(Float)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.wasm.internal.consumeDoubleIntoVoid(Double)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.wasm.internal.nullableEquals(Any?, Any?)": {
        "size": 237,
        "type": "function"
    },
    "kotlin.wasm.internal.unsafeNotNull(Any?)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.wasm.internal.unsafeWasmCharArrayToRawMemory(WasmCharArray, Int, Int, Int)": {
        "size": 688,
        "type": "function"
    },
    "kotlin.wasm.internal.rangeCheck(Int, Int)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.wasm.internal.THROW_NPE()": {
        "size": 70,
        "type": "function"
    },
    "kotlin.wasm.internal.THROW_CCE()": {
        "size": 68,
        "type": "function"
    },
    "kotlin.wasm.internal.throwNoBranchMatchedException()": {
        "size": 98,
        "type": "function"
    },
    "kotlin.wasm.internal.throwUninitializedPropertyAccessException(String)": {
        "size": 358,
        "type": "function"
    },
    "kotlin.wasm.internal.getPackageName(Int)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.getSimpleName(Int)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.getString(Int, Int, Int, Int)": {
        "size": 453,
        "type": "function"
    },
    "kotlin.wasm.internal.TypeInfoData": {
        "size": 563,
        "type": "class"
    },
    "kotlin.wasm.internal.TypeInfoData.<init>(Int, String, String)": {
        "size": 215,
        "type": "function"
    },
    "kotlin.wasm.internal.TypeInfoData.typeId": {
        "size": 42,
        "type": "field"
    },
    "kotlin.wasm.internal.TypeInfoData.packageName": {
        "size": 50,
        "type": "field"
    },
    "kotlin.wasm.internal.TypeInfoData.typeName": {
        "size": 47,
        "type": "field"
    },
    "kotlin.wasm.internal.TypeInfoData.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.TypeInfoData.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.TypeInfoData.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.getSuperTypeId(Int)": {
        "size": 132,
        "type": "function"
    },
    "kotlin.wasm.internal.<get-isInterfaceType>()": {
        "size": 114,
        "type": "function"
    },
    "kotlin.wasm.internal.isInterfaceById(Any, Int)": {
        "size": 894,
        "type": "function"
    },
    "kotlin.wasm.internal.getTypeInfoTypeDataByPtr(Int)": {
        "size": 307,
        "type": "function"
    },
    "kotlin.wasm.internal.wasm_i32_compareTo(Int, Int)": {
        "size": 229,
        "type": "function"
    },
    "kotlin.wasm.internal.wasm_i64_compareTo(Long, Long)": {
        "size": 231,
        "type": "function"
    },
    "kotlin.collections.fill(Int, Int, Int)": {
        "size": 888,
        "type": "function"
    },
    "kotlin.collections.fill$default(Int, Int?, Int?, Int, Any?)": {
        "size": 830,
        "type": "function"
    },
    "kotlin.collections.copyInto(CharArray, Int, Int, Int)": {
        "size": 1115,
        "type": "function"
    },
    "kotlin.collections.copyInto$default(CharArray, Int?, Int?, Int?, Int, Any?)": {
        "size": 1215,
        "type": "function"
    },
    "kotlin.collections.fill(Char, Int, Int)": {
        "size": 890,
        "type": "function"
    },
    "kotlin.collections.copyOf(Int)": {
        "size": 114,
        "type": "function"
    },
    "kotlin.collections.copyOfUninitializedElements(Int)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.collections.copyOfUninitializedElements(Int, Int)": {
        "size": 1525,
        "type": "function"
    },
    "kotlin.collections.fill(T, Int, Int)": {
        "size": 897,
        "type": "function"
    },
    "kotlin.collections.fill$default(T, Int?, Int?, Int, Any?)": {
        "size": 842,
        "type": "function"
    },
    "kotlin.collections.contentEquals(Array<out T>?)": {
        "size": 1152,
        "type": "function"
    },
    "kotlin.collections.contentEquals(IntArray?)": {
        "size": 1126,
        "type": "function"
    },
    "kotlin.collections.contentEquals(LongArray?)": {
        "size": 1128,
        "type": "function"
    },
    "kotlin.collections.contentEquals(ShortArray?)": {
        "size": 1184,
        "type": "function"
    },
    "kotlin.collections.contentEquals(ByteArray?)": {
        "size": 1180,
        "type": "function"
    },
    "kotlin.collections.contentEquals(DoubleArray?)": {
        "size": 1497,
        "type": "function"
    },
    "kotlin.collections.contentEquals(FloatArray?)": {
        "size": 1493,
        "type": "function"
    },
    "kotlin.collections.contentEquals(CharArray?)": {
        "size": 1128,
        "type": "function"
    },
    "kotlin.collections.contentEquals(BooleanArray?)": {
        "size": 1134,
        "type": "function"
    },
    "kotlin.collections.contentDeepEquals(Array<out T>?)": {
        "size": 175,
        "type": "function"
    },
    "kotlin.collections.asList()": {
        "size": 199,
        "type": "function"
    },
    "kotlin.collections.contentDeepToString()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.collections.contentDeepHashCode()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.collections.plus(Collection<T>)": {
        "size": 754,
        "type": "function"
    },
    "kotlin.collections.plus(Int)": {
        "size": 268,
        "type": "function"
    },
    "kotlin.collections.plus(Collection<Int>)": {
        "size": 777,
        "type": "function"
    },
    "kotlin.collections.plus(IntArray)": {
        "size": 535,
        "type": "function"
    },
    "kotlin.collections.plus(LongArray)": {
        "size": 539,
        "type": "function"
    },
    "kotlin.collections.copyOfRange(Int, Int)": {
        "size": 268,
        "type": "function"
    },
    "kotlin.collections.copyInto(Array<T>, Int, Int, Int)": {
        "size": 1124,
        "type": "function"
    },
    "kotlin.collections.copyInto$default(Array<T>, Int?, Int?, Int?, Int, Any?)": {
        "size": 1230,
        "type": "function"
    },
    "kotlin.collections.copyInto(IntArray, Int, Int, Int)": {
        "size": 1109,
        "type": "function"
    },
    "kotlin.collections.copyInto$default(IntArray, Int?, Int?, Int?, Int, Any?)": {
        "size": 1212,
        "type": "function"
    },
    "kotlin.collections.copyInto(LongArray, Int, Int, Int)": {
        "size": 1115,
        "type": "function"
    },
    "kotlin.collections.copyInto$default(LongArray, Int?, Int?, Int?, Int, Any?)": {
        "size": 1215,
        "type": "function"
    },
    "kotlin.collections.copyInto(ByteArray, Int, Int, Int)": {
        "size": 1115,
        "type": "function"
    },
    "kotlin.collections.copyInto$default(ByteArray, Int?, Int?, Int?, Int, Any?)": {
        "size": 1215,
        "type": "function"
    },
    "kotlin.collections.sortWith(Comparator<in T>, Int, Int)": {
        "size": 379,
        "type": "function"
    },
    "kotlin.collections.fill(Boolean, Int, Int)": {
        "size": 896,
        "type": "function"
    },
    "kotlin.collections.fill(Byte, Int, Int)": {
        "size": 890,
        "type": "function"
    },
    "kotlin.collections.fill(Float, Int, Int)": {
        "size": 892,
        "type": "function"
    },
    "kotlin.collections.fill(Double, Int, Int)": {
        "size": 894,
        "type": "function"
    },
    "kotlin.collections.fill(Short, Int, Int)": {
        "size": 892,
        "type": "function"
    },
    "kotlin.collections.fill(Long, Int, Int)": {
        "size": 890,
        "type": "function"
    },
    "kotlin.collections.plus(ByteArray)": {
        "size": 539,
        "type": "function"
    },
    "kotlin.collections.plus(Byte)": {
        "size": 272,
        "type": "function"
    },
    "kotlin.collections.copyInto(BooleanArray, Int, Int, Int)": {
        "size": 1124,
        "type": "function"
    },
    "kotlin.collections.copyInto(ShortArray, Int, Int, Int)": {
        "size": 1121,
        "type": "function"
    },
    "kotlin.collections.copyInto(FloatArray, Int, Int, Int)": {
        "size": 1121,
        "type": "function"
    },
    "kotlin.collections.copyInto(DoubleArray, Int, Int, Int)": {
        "size": 1127,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(T)": {
        "size": 220,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.get(Int)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(T)": {
        "size": 205,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(T)": {
        "size": 213,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.listIterator()": {
        "size": 63,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.listIterator(Int)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.subList(Int, Int)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<T>)": {
        "size": 71,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.$this_asList": {
        "size": 57,
        "type": "field"
    },
    "kotlin.collections.<no name provided>.<init>(CharArray)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(Char)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(@UnsafeVariance E)": {
        "size": 514,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(Char)": {
        "size": 199,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(@UnsafeVariance E)": {
        "size": 496,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(Char)": {
        "size": 207,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(@UnsafeVariance E)": {
        "size": 504,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<Char>)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(Int)": {
        "size": 213,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(Int)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(Int)": {
        "size": 206,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<Int>)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(LongArray)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(Long)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(Long)": {
        "size": 199,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(Long)": {
        "size": 207,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<Long>)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(DoubleArray)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(Double)": {
        "size": 961,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(Double)": {
        "size": 1378,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(Double)": {
        "size": 1351,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<Double>)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(ByteArray)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(Byte)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(Byte)": {
        "size": 199,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(Byte)": {
        "size": 207,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<Byte>)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(BooleanArray)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(Boolean)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(Boolean)": {
        "size": 202,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(Boolean)": {
        "size": 210,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<Boolean>)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(FloatArray)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(Float)": {
        "size": 958,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(Float)": {
        "size": 1376,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(Float)": {
        "size": 1349,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<Float>)": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.<get-rangeStart>()": {
        "size": 111,
        "type": "function"
    },
    "kotlin.text.rangeStart": {
        "size": 58,
        "type": "field"
    },
    "kotlin.text.<get-rangeCategory>()": {
        "size": 114,
        "type": "function"
    },
    "kotlin.text.rangeCategory": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.getCategoryValue()": {
        "size": 628,
        "type": "function"
    },
    "kotlin.text.categoryValueFrom(Int, Int)": {
        "size": 774,
        "type": "function"
    },
    "kotlin.text.properties initialized _CharCategories.kt": {
        "size": 80,
        "type": "field"
    },
    "kotlin.text.<init properties _CharCategories.kt>()": {
        "size": 14487,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Int, IntArray)": {
        "size": 820,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Long, LongArray)": {
        "size": 827,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Double, Double)": {
        "size": 208,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Double, Double, Double)": {
        "size": 652,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Double, DoubleArray)": {
        "size": 884,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Int, IntArray)": {
        "size": 820,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Long, LongArray)": {
        "size": 827,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Double, Double)": {
        "size": 275,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Double, Double, Double)": {
        "size": 860,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Double, DoubleArray)": {
        "size": 993,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Float, Float)": {
        "size": 271,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Float, Float, Float)": {
        "size": 853,
        "type": "function"
    },
    "kotlin.comparisons.minOf(Float, FloatArray)": {
        "size": 985,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Float, Float)": {
        "size": 204,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Float, Float, Float)": {
        "size": 645,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(Float, FloatArray)": {
        "size": 876,
        "type": "function"
    },
    "kotlin.comparisons.minOf(T, T)": {
        "size": 172,
        "type": "function"
    },
    "kotlin.comparisons.maxOf(T, T)": {
        "size": 172,
        "type": "function"
    },
    "kotlin.text.binarySearchRange(IntArray, Int)": {
        "size": 945,
        "type": "function"
    },
    "kotlin.text.isDigitImpl()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.text.digitToIntImpl()": {
        "size": 458,
        "type": "function"
    },
    "kotlin.text.properties initialized _DigitChars.kt": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.<init properties _DigitChars.kt>()": {
        "size": 568,
        "type": "function"
    },
    "kotlin.text.<get-rangeLength>()": {
        "size": 113,
        "type": "function"
    },
    "kotlin.text.rangeLength": {
        "size": 59,
        "type": "field"
    },
    "kotlin.text.isLetterImpl()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.text.isUpperCaseImpl()": {
        "size": 316,
        "type": "function"
    },
    "kotlin.text.isLowerCaseImpl()": {
        "size": 316,
        "type": "function"
    },
    "kotlin.text.getLetterType()": {
        "size": 2530,
        "type": "function"
    },
    "kotlin.text.properties initialized _LetterChars.kt": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.<init properties _LetterChars.kt>()": {
        "size": 4659,
        "type": "function"
    },
    "kotlin.text.lowercaseCharImpl()": {
        "size": 259,
        "type": "function"
    },
    "kotlin.text.lowercaseCodePoint()": {
        "size": 568,
        "type": "function"
    },
    "kotlin.text.properties initialized _LowercaseMappings.kt": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.<init properties _LowercaseMappings.kt>()": {
        "size": 2870,
        "type": "function"
    },
    "kotlin.text.lowercaseImpl()": {
        "size": 2021,
        "type": "function"
    },
    "kotlin.text.<get-keys>()": {
        "size": 108,
        "type": "function"
    },
    "kotlin.text.keys": {
        "size": 52,
        "type": "field"
    },
    "kotlin.text.<get-values>()": {
        "size": 117,
        "type": "function"
    },
    "kotlin.text.values": {
        "size": 59,
        "type": "field"
    },
    "kotlin.text.uppercaseImpl()": {
        "size": 1810,
        "type": "function"
    },
    "kotlin.text.oneToManyUppercase()": {
        "size": 628,
        "type": "function"
    },
    "kotlin.text.properties initialized _OneToManyUppercaseMappings.kt": {
        "size": 92,
        "type": "field"
    },
    "kotlin.text.<init properties _OneToManyUppercaseMappings.kt>()": {
        "size": 1729,
        "type": "function"
    },
    "kotlin.text.<get-otherLowerStart>()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.text.otherLowerStart": {
        "size": 63,
        "type": "field"
    },
    "kotlin.text.<get-otherLowerLength>()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.otherLowerLength": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.isOtherLowercase()": {
        "size": 411,
        "type": "function"
    },
    "kotlin.text.properties initialized _OtherLowercaseChars.kt": {
        "size": 85,
        "type": "field"
    },
    "kotlin.text.<init properties _OtherLowercaseChars.kt>()": {
        "size": 665,
        "type": "function"
    },
    "kotlin.text.isOtherUppercase()": {
        "size": 236,
        "type": "function"
    },
    "kotlin.text.<get-casedStart>()": {
        "size": 109,
        "type": "function"
    },
    "kotlin.text.casedStart": {
        "size": 58,
        "type": "field"
    },
    "kotlin.text.<get-casedEnd>()": {
        "size": 105,
        "type": "function"
    },
    "kotlin.text.casedEnd": {
        "size": 56,
        "type": "field"
    },
    "kotlin.text.<get-caseIgnorableStart>()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.text.caseIgnorableStart": {
        "size": 66,
        "type": "field"
    },
    "kotlin.text.<get-caseIgnorableEnd>()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.text.caseIgnorableEnd": {
        "size": 64,
        "type": "field"
    },
    "kotlin.text.isFinalSigmaAt(Int)": {
        "size": 1765,
        "type": "function"
    },
    "kotlin.text.codePointBefore(Int)": {
        "size": 661,
        "type": "function"
    },
    "kotlin.text.isCaseIgnorable()": {
        "size": 1550,
        "type": "function"
    },
    "kotlin.text.isCased()": {
        "size": 1368,
        "type": "function"
    },
    "kotlin.text.properties initialized _StringLowercase.kt": {
        "size": 81,
        "type": "field"
    },
    "kotlin.text.<init properties _StringLowercase.kt>()": {
        "size": 3289,
        "type": "function"
    },
    "kotlin.text.codePointAt(Int)": {
        "size": 628,
        "type": "function"
    },
    "kotlin.text.charCount()": {
        "size": 415,
        "type": "function"
    },
    "kotlin.text.appendCodePoint(Int)": {
        "size": 1702,
        "type": "function"
    },
    "kotlin.text.titlecaseCharImpl()": {
        "size": 806,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(UByteArray)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(UByte)": {
        "size": 241,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(UByte)": {
        "size": 446,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(UByte)": {
        "size": 454,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<UByte>)": {
        "size": 75,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(UShortArray)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(UShort)": {
        "size": 243,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(UShort)": {
        "size": 449,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(UShort)": {
        "size": 457,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<UShort>)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(UIntArray)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(UInt)": {
        "size": 239,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(UInt)": {
        "size": 443,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(UInt)": {
        "size": 451,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<UInt>)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.<init>(ULongArray)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.contains(ULong)": {
        "size": 241,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.indexOf(ULong)": {
        "size": 446,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.lastIndexOf(ULong)": {
        "size": 454,
        "type": "function"
    },
    "kotlin.collections.<no name provided>.containsAll(Collection<ULong>)": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.uppercaseCharImpl()": {
        "size": 259,
        "type": "function"
    },
    "kotlin.text.uppercaseCodePoint()": {
        "size": 570,
        "type": "function"
    },
    "kotlin.text.equalDistanceMapping(Int, Int, Int)": {
        "size": 719,
        "type": "function"
    },
    "kotlin.text.properties initialized _UppercaseMappings.kt": {
        "size": 83,
        "type": "field"
    },
    "kotlin.text.<init properties _UppercaseMappings.kt>()": {
        "size": 3129,
        "type": "function"
    },
    "kotlin.text.isWhitespaceImpl()": {
        "size": 1157,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmAnyArray": {
        "size": 681,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmAnyArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmAnyArray.get(Int)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmAnyArray.set(Int, Any?)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmAnyArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmAnyArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmAnyArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmAnyArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmByteArray": {
        "size": 686,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmByteArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmByteArray.get(Int)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmByteArray.set(Int, Byte)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmByteArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmByteArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmByteArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmByteArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmIntArray": {
        "size": 680,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmIntArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmIntArray.get(Int)": {
        "size": 98,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmIntArray.set(Int, Int)": {
        "size": 105,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmIntArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmIntArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmIntArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmIntArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmCharArray": {
        "size": 686,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmCharArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmCharArray.get(Int)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmCharArray.set(Int, Char)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmCharArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmCharArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmCharArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmCharArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmShortArray": {
        "size": 690,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmShortArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmShortArray.get(Int)": {
        "size": 102,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmShortArray.set(Int, Short)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmShortArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmShortArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmShortArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmShortArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmLongArray": {
        "size": 684,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmLongArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmLongArray.get(Int)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmLongArray.set(Int, Long)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmLongArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmLongArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmLongArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmLongArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmDoubleArray": {
        "size": 692,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmDoubleArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmDoubleArray.get(Int)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmDoubleArray.set(Int, Double)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmDoubleArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmDoubleArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmDoubleArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmDoubleArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmFloatArray": {
        "size": 688,
        "type": "class"
    },
    "kotlin.wasm.internal.WasmFloatArray.<init>(Int)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmFloatArray.get(Int)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmFloatArray.set(Int, Float)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmFloatArray.len()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmFloatArray.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmFloatArray.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.WasmFloatArray.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.assert(Boolean)": {
        "size": 144,
        "type": "function"
    },
    "kotlin.assert(Boolean, Function0<Any>)": {
        "size": 232,
        "type": "function"
    },
    "kotlin.assert$lambda": {
        "size": 278,
        "type": "class"
    },
    "kotlin.assert$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.assert$lambda.invoke()": {
        "size": 69,
        "type": "function"
    },
    "kotlin.Comparator": {
        "size": 235,
        "type": "class"
    },
    "kotlin.Comparator.compare(T, T)": {
        "size": 39,
        "type": "function"
    },
    "kotlin.Comparator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Comparator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Comparator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.js.toThrowableOrNull()": {
        "size": 551,
        "type": "function"
    },
    "kotlin.js.jsCatch(JsAny)": {
        "size": 190,
        "type": "function"
    },
    "kotlin.js.jsCatch__externalAdapter(Function0<Unit>)": {
        "size": 181,
        "type": "function"
    },
    "kotlin.js.__callFunction_(()->Unit)(structref)": {
        "size": 955,
        "type": "function"
    },
    "kotlin.js.__convertKotlinClosureToJsClosure_(()->Unit)(structref)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.js.jsThrow(JsAny)": {
        "size": 68,
        "type": "function"
    },
    "kotlin.js.toThrowableOrNull$lambda": {
        "size": 980,
        "type": "class"
    },
    "kotlin.js.toThrowableOrNull$lambda.<init>(JsAny, $closureBox$)": {
        "size": 216,
        "type": "function"
    },
    "kotlin.js.toThrowableOrNull$lambda.invoke()": {
        "size": 426,
        "type": "function"
    },
    "kotlin.js.toThrowableOrNull$lambda.$this_toThrowableOrNull": {
        "size": 61,
        "type": "field"
    },
    "kotlin.js.toThrowableOrNull$lambda.$result": {
        "size": 52,
        "type": "field"
    },
    "kotlin.IllegalArgumentException": {
        "size": 949,
        "type": "class"
    },
    "kotlin.IllegalArgumentException.<init>()": {
        "size": 86,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.<init>(String?)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.<init>(String?, Throwable?)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.<init>(Throwable?)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.IllegalArgumentException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException": {
        "size": 667,
        "type": "class"
    },
    "kotlin.IndexOutOfBoundsException.<init>()": {
        "size": 87,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.<init>(String?)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.IndexOutOfBoundsException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.NoSuchElementException": {
        "size": 658,
        "type": "class"
    },
    "kotlin.NoSuchElementException.<init>()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.NoSuchElementException.<init>(String?)": {
        "size": 117,
        "type": "function"
    },
    "kotlin.NoSuchElementException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.NoSuchElementException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.NoSuchElementException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.NoSuchElementException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.NoSuchElementException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.NoSuchElementException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.NoSuchElementException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.AssertionError": {
        "size": 1292,
        "type": "class"
    },
    "kotlin.AssertionError.<init>()": {
        "size": 65,
        "type": "function"
    },
    "kotlin.AssertionError.<init>(String?)": {
        "size": 98,
        "type": "function"
    },
    "kotlin.AssertionError.<init>(Any?)": {
        "size": 483,
        "type": "function"
    },
    "kotlin.AssertionError.<init>(String?, Throwable?)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.AssertionError.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.AssertionError.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.AssertionError.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.AssertionError.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.AssertionError.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.AssertionError.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.AssertionError.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.RuntimeException": {
        "size": 874,
        "type": "class"
    },
    "kotlin.RuntimeException.<init>()": {
        "size": 71,
        "type": "function"
    },
    "kotlin.RuntimeException.<init>(String?)": {
        "size": 104,
        "type": "function"
    },
    "kotlin.RuntimeException.<init>(String?, Throwable?)": {
        "size": 138,
        "type": "function"
    },
    "kotlin.RuntimeException.<init>(Throwable?)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.RuntimeException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.RuntimeException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.RuntimeException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.RuntimeException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.RuntimeException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.RuntimeException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.RuntimeException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.Error": {
        "size": 819,
        "type": "class"
    },
    "kotlin.Error.<init>()": {
        "size": 60,
        "type": "function"
    },
    "kotlin.Error.<init>(String?)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.Error.<init>(String?, Throwable?)": {
        "size": 127,
        "type": "function"
    },
    "kotlin.Error.<init>(Throwable?)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.Error.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.Error.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.Error.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.Error.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.Error.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Error.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Error.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.Exception": {
        "size": 839,
        "type": "class"
    },
    "kotlin.Exception.<init>()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.Exception.<init>(String?)": {
        "size": 97,
        "type": "function"
    },
    "kotlin.Exception.<init>(String?, Throwable?)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.Exception.<init>(Throwable?)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.Exception.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.Exception.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.Exception.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.Exception.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.Exception.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Exception.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Exception.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.IllegalStateException": {
        "size": 934,
        "type": "class"
    },
    "kotlin.IllegalStateException.<init>()": {
        "size": 83,
        "type": "function"
    },
    "kotlin.IllegalStateException.<init>(String?)": {
        "size": 116,
        "type": "function"
    },
    "kotlin.IllegalStateException.<init>(String?, Throwable?)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.IllegalStateException.<init>(Throwable?)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.IllegalStateException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.IllegalStateException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.IllegalStateException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.IllegalStateException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.IllegalStateException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.IllegalStateException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.IllegalStateException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.OutOfMemoryError": {
        "size": 499,
        "type": "class"
    },
    "kotlin.OutOfMemoryError.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.OutOfMemoryError.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.OutOfMemoryError.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.OutOfMemoryError.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.OutOfMemoryError.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.OutOfMemoryError.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.OutOfMemoryError.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.OutOfMemoryError.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException": {
        "size": 974,
        "type": "class"
    },
    "kotlin.UnsupportedOperationException.<init>()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.<init>(String?)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.<init>(String?, Throwable?)": {
        "size": 158,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.<init>(Throwable?)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.UnsupportedOperationException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.ArithmeticException": {
        "size": 679,
        "type": "class"
    },
    "kotlin.ArithmeticException.<init>()": {
        "size": 81,
        "type": "function"
    },
    "kotlin.ArithmeticException.<init>(String?)": {
        "size": 114,
        "type": "function"
    },
    "kotlin.ArithmeticException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.ArithmeticException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.ArithmeticException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.ArithmeticException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ArithmeticException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ArithmeticException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ArithmeticException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.NumberFormatException": {
        "size": 679,
        "type": "class"
    },
    "kotlin.NumberFormatException.<init>()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.NumberFormatException.<init>(String?)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.NumberFormatException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.NumberFormatException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.NumberFormatException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.NumberFormatException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.NumberFormatException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.NumberFormatException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.NumberFormatException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.NullPointerException": {
        "size": 652,
        "type": "class"
    },
    "kotlin.NullPointerException.<init>()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.NullPointerException.<init>(String?)": {
        "size": 115,
        "type": "function"
    },
    "kotlin.NullPointerException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.NullPointerException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.NullPointerException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.NullPointerException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.NullPointerException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.NullPointerException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.NullPointerException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.ClassCastException": {
        "size": 646,
        "type": "class"
    },
    "kotlin.ClassCastException.<init>()": {
        "size": 80,
        "type": "function"
    },
    "kotlin.ClassCastException.<init>(String?)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.ClassCastException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.ClassCastException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.ClassCastException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.ClassCastException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ClassCastException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ClassCastException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ClassCastException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException": {
        "size": 984,
        "type": "class"
    },
    "kotlin.ConcurrentModificationException.<init>()": {
        "size": 93,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.<init>(String?)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.<init>(String?, Throwable?)": {
        "size": 160,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.<init>(Throwable?)": {
        "size": 123,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ConcurrentModificationException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException": {
        "size": 1023,
        "type": "class"
    },
    "kotlin.NoWhenBranchMatchedException.<init>()": {
        "size": 90,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.<init>(String?)": {
        "size": 123,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.<init>(String?, Throwable?)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.<init>(Throwable?)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.NoWhenBranchMatchedException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException": {
        "size": 1063,
        "type": "class"
    },
    "kotlin.UninitializedPropertyAccessException.<init>()": {
        "size": 98,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.<init>(String?)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.<init>(String?, Throwable?)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.<init>(Throwable?)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.UninitializedPropertyAccessException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.lazy(Function0<T>)": {
        "size": 115,
        "type": "function"
    },
    "kotlin.lazy(LazyThreadSafetyMode, Function0<T>)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.toBits()": {
        "size": 199,
        "type": "function"
    },
    "kotlin.isFinite()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.isNaN()": {
        "size": 105,
        "type": "function"
    },
    "kotlin.countLeadingZeroBits()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.fromBits(Long)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.toRawBits()": {
        "size": 110,
        "type": "function"
    },
    "kotlin.isInfinite()": {
        "size": 258,
        "type": "function"
    },
    "kotlin.fromBits(Int)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.countOneBits()": {
        "size": 102,
        "type": "function"
    },
    "kotlin.countTrailingZeroBits()": {
        "size": 108,
        "type": "function"
    },
    "kotlin.takeHighestOneBit()": {
        "size": 458,
        "type": "function"
    },
    "kotlin.takeLowestOneBit()": {
        "size": 210,
        "type": "function"
    },
    "kotlin.sequences.ConstrainedOnceSequence": {
        "size": 925,
        "type": "class"
    },
    "kotlin.sequences.ConstrainedOnceSequence.<init>(Sequence<T>)": {
        "size": 123,
        "type": "function"
    },
    "kotlin.sequences.ConstrainedOnceSequence.sequenceRef": {
        "size": 38,
        "type": "field"
    },
    "kotlin.sequences.ConstrainedOnceSequence.iterator()": {
        "size": 504,
        "type": "function"
    },
    "kotlin.sequences.ConstrainedOnceSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.sequences.ConstrainedOnceSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.sequences.ConstrainedOnceSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.collections.copyToArrayImpl(Collection<*>, Array<T>)": {
        "size": 1038,
        "type": "function"
    },
    "kotlin.collections.copyToArray(Collection<T>)": {
        "size": 425,
        "type": "function"
    },
    "kotlin.collections.replaceAll(Function1<T, T>)": {
        "size": 319,
        "type": "function"
    },
    "kotlin.collections.resetAt(Int)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.collections.resetRange(Int, Int)": {
        "size": 349,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl": {
        "size": 9533,
        "type": "class"
    },
    "kotlin.coroutines.CoroutineImpl.<init>(Continuation<Any?>?)": {
        "size": 577,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.resultContinuation": {
        "size": 70,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl.state": {
        "size": 23,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl.exceptionState": {
        "size": 32,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl.result": {
        "size": 25,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl.exception": {
        "size": 34,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl.finallyPath": {
        "size": 37,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl._context": {
        "size": 58,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl.<get-context>()": {
        "size": 294,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.intercepted_": {
        "size": 46,
        "type": "field"
    },
    "kotlin.coroutines.CoroutineImpl.intercepted()": {
        "size": 1431,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.resumeWith(Result<Any?>)": {
        "size": 5175,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.releaseIntercepted()": {
        "size": 950,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.doResume()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.CoroutineImpl.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.CompletedContinuation": {
        "size": 789,
        "type": "class"
    },
    "kotlin.coroutines.CompletedContinuation.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.coroutines.CompletedContinuation.<get-context>()": {
        "size": 210,
        "type": "function"
    },
    "kotlin.coroutines.CompletedContinuation.resumeWith(Result<Any?>)": {
        "size": 202,
        "type": "function"
    },
    "kotlin.coroutines.CompletedContinuation.toString()": {
        "size": 86,
        "type": "function"
    },
    "kotlin.coroutines.CompletedContinuation.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.CompletedContinuation.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.CompletedContinuation_instance": {
        "size": 78,
        "type": "field"
    },
    "kotlin.coroutines.SafeContinuation": {
        "size": 2577,
        "type": "class"
    },
    "kotlin.coroutines.SafeContinuation.<init>(Continuation<T>, Any?)": {
        "size": 189,
        "type": "function"
    },
    "kotlin.coroutines.SafeContinuation.delegate": {
        "size": 56,
        "type": "field"
    },
    "kotlin.coroutines.SafeContinuation.<init>(Continuation<T>)": {
        "size": 179,
        "type": "function"
    },
    "kotlin.coroutines.SafeContinuation.<get-context>()": {
        "size": 246,
        "type": "function"
    },
    "kotlin.coroutines.SafeContinuation.result": {
        "size": 25,
        "type": "field"
    },
    "kotlin.coroutines.SafeContinuation.resumeWith(Result<T>)": {
        "size": 850,
        "type": "function"
    },
    "kotlin.coroutines.SafeContinuation.getOrThrow()": {
        "size": 640,
        "type": "function"
    },
    "kotlin.coroutines.SafeContinuation.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.SafeContinuation.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.SafeContinuation.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.intercepted()": {
        "size": 594,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.createCoroutineUnintercepted(Continuation<T>)": {
        "size": 395,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.createCoroutineUnintercepted(R, Continuation<T>)": {
        "size": 466,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.createSimpleCoroutineFromSuspendFunction(Continuation<T>)": {
        "size": 267,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>": {
        "size": 2518,
        "type": "class"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.<init>(Continuation<T>, SuspendFunction0<T>)": {
        "size": 320,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.doResume()": {
        "size": 1422,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.$completion": {
        "size": 59,
        "type": "field"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.$this_createCoroutineUnintercepted": {
        "size": 112,
        "type": "field"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.<init>(Continuation<T>, @ExtensionFunctionType SuspendFunction1<R, T>, R)": {
        "size": 392,
        "type": "function"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.$receiver": {
        "size": 43,
        "type": "field"
    },
    "kotlin.coroutines.intrinsics.<no name provided>.<init>(Continuation<T>)": {
        "size": 145,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException": {
        "size": 989,
        "type": "class"
    },
    "kotlin.coroutines.cancellation.CancellationException.<init>()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.<init>(String?)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.<init>(String?, Throwable?)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.<init>(Throwable?)": {
        "size": 118,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.cancellation.CancellationException.<init>()[synthetic]": {
        "size": 58,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction0": {
        "size": 282,
        "type": "class"
    },
    "kotlin.coroutines.SuspendFunction0.invoke(Continuation<R>)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction0.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction1": {
        "size": 304,
        "type": "class"
    },
    "kotlin.coroutines.SuspendFunction1.invoke(P1, Continuation<R>)": {
        "size": 74,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction1.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction1.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction1.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction2": {
        "size": 326,
        "type": "class"
    },
    "kotlin.coroutines.SuspendFunction2.invoke(P1, P2, Continuation<R>)": {
        "size": 82,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction2.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction2.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.coroutines.SuspendFunction2.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.Function1": {
        "size": 218,
        "type": "class"
    },
    "kotlin.Function1.invoke(P1)": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Function1.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Function1.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Function2": {
        "size": 240,
        "type": "class"
    },
    "kotlin.Function2.invoke(P1, P2)": {
        "size": 49,
        "type": "function"
    },
    "kotlin.Function2.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Function2.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Function0": {
        "size": 198,
        "type": "class"
    },
    "kotlin.Function0.invoke()": {
        "size": 35,
        "type": "function"
    },
    "kotlin.Function0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.Function0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.Function4": {
        "size": 176,
        "type": "class"
    },
    "kotlin.Function4.invoke(P1, P2, P3, P4)": {
        "size": 65,
        "type": "function"
    },
    "kotlin.Function5": {
        "size": 198,
        "type": "class"
    },
    "kotlin.Function5.invoke(P1, P2, P3, P4, P5)": {
        "size": 73,
        "type": "function"
    },
    "kotlin.Function3": {
        "size": 154,
        "type": "class"
    },
    "kotlin.Function3.invoke(P1, P2, P3)": {
        "size": 57,
        "type": "function"
    },
    "kotlin.reflect.KFunction2": {
        "size": 83,
        "type": "class"
    },
    "kotlin.reflect.KFunction1": {
        "size": 69,
        "type": "class"
    },
    "kotlin.reflect.KFunction5": {
        "size": 125,
        "type": "class"
    },
    "kotlin.reflect.KFunction3": {
        "size": 97,
        "type": "class"
    },
    "kotlin.reflect.KFunction4": {
        "size": 111,
        "type": "class"
    },
    "kotlin.reflect.KFunction0": {
        "size": 55,
        "type": "class"
    },
    "kotlin.io.Serializable": {
        "size": 191,
        "type": "class"
    },
    "kotlin.io.Serializable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.io.Serializable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.io.Serializable.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.io.println(Any?)": {
        "size": 248,
        "type": "function"
    },
    "kotlin.io.printlnImpl(JsString?)": {
        "size": 96,
        "type": "function"
    },
    "kotlin.io.printlnImpl__externalAdapter(String?)": {
        "size": 246,
        "type": "function"
    },
    "kotlin.js.JsAny": {
        "size": 85,
        "type": "class"
    },
    "kotlin.js.JsAny.toString()": {
        "size": 53,
        "type": "function"
    },
    "kotlin.js.toJsReference()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.js.then_$external_fun(Promise<T>, JsAny?)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.js.then_$external_fun__externalAdapter(Promise<T>, Function1<T, S>?)": {
        "size": 539,
        "type": "function"
    },
    "kotlin.js.__callFunction_((Js?)->Js?)(structref, JsAny?)": {
        "size": 1126,
        "type": "function"
    },
    "kotlin.js.__convertKotlinClosureToJsClosure_((Js?)->Js?)(structref)": {
        "size": 164,
        "type": "function"
    },
    "kotlin.js.then_$external_fun(Promise<T>, JsAny?, JsAny?)": {
        "size": 156,
        "type": "function"
    },
    "kotlin.js.then_$external_fun__externalAdapter(Promise<T>, Function1<T, S>?, Function1<JsAny, S>?)": {
        "size": 775,
        "type": "function"
    },
    "kotlin.js.__callFunction_((Js)->Js?)(structref, JsAny?)": {
        "size": 1336,
        "type": "function"
    },
    "kotlin.js.__convertKotlinClosureToJsClosure_((Js)->Js?)(structref)": {
        "size": 162,
        "type": "function"
    },
    "kotlin.js.catch_$external_fun(Promise<T>, JsAny)": {
        "size": 128,
        "type": "function"
    },
    "kotlin.js.catch_$external_fun__externalAdapter(Promise<T>, Function1<JsAny, S>)": {
        "size": 418,
        "type": "function"
    },
    "kotlin.js.finally_$external_fun(Promise<T>, JsAny)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.js.finally_$external_fun__externalAdapter(Promise<T>, Function0<Unit>)": {
        "size": 414,
        "type": "function"
    },
    "kotlin.js.reject_$external_fun(Companion, JsAny)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.js.reject_$external_fun__externalAdapter(Companion, JsAny)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.js.Companion_$external_object_getInstance()": {
        "size": 94,
        "type": "function"
    },
    "kotlin.js.Companion_$external_object_getInstance__externalAdapter()": {
        "size": 316,
        "type": "function"
    },
    "kotlin.js.Promise_$external_class_instanceof(JsAny?)": {
        "size": 114,
        "type": "function"
    },
    "kotlin.js.Promise_$external_class_instanceof__externalAdapter(Any)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_acos(Double)": {
        "size": 5474,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_acosh(Double)": {
        "size": 1421,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_asin(Double)": {
        "size": 4872,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_atan2(Double, Double)": {
        "size": 8138,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_atanh(Double)": {
        "size": 2796,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_cosh(Double)": {
        "size": 2201,
        "type": "function"
    },
    "kotlin.math.fdlibm.<get-halF>()": {
        "size": 89,
        "type": "function"
    },
    "kotlin.math.fdlibm.halF": {
        "size": 55,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-ln2HI>()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.math.fdlibm.ln2HI": {
        "size": 56,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-ln2LO>()": {
        "size": 91,
        "type": "function"
    },
    "kotlin.math.fdlibm.ln2LO": {
        "size": 56,
        "type": "field"
    },
    "kotlin.math.fdlibm.__ieee754_exp(Double)": {
        "size": 8136,
        "type": "function"
    },
    "kotlin.math.fdlibm.properties initialized e_exp.kt": {
        "size": 70,
        "type": "field"
    },
    "kotlin.math.fdlibm.<init properties e_exp.kt>()": {
        "size": 615,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_hypot(Double, Double)": {
        "size": 6271,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_log(Double)": {
        "size": 5473,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_log10(Double)": {
        "size": 3936,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_log2(Double)": {
        "size": 3781,
        "type": "function"
    },
    "kotlin.math.fdlibm.<get-bp>()": {
        "size": 85,
        "type": "function"
    },
    "kotlin.math.fdlibm.bp": {
        "size": 53,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-dp_h>()": {
        "size": 89,
        "type": "function"
    },
    "kotlin.math.fdlibm.dp_h": {
        "size": 55,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-dp_l>()": {
        "size": 89,
        "type": "function"
    },
    "kotlin.math.fdlibm.dp_l": {
        "size": 55,
        "type": "field"
    },
    "kotlin.math.fdlibm.__ieee754_pow(Double, Double)": {
        "size": 21941,
        "type": "function"
    },
    "kotlin.math.fdlibm.properties initialized e_pow.kt": {
        "size": 70,
        "type": "field"
    },
    "kotlin.math.fdlibm.<init properties e_pow.kt>()": {
        "size": 572,
        "type": "function"
    },
    "kotlin.math.fdlibm.<get-two_over_pi>()": {
        "size": 105,
        "type": "function"
    },
    "kotlin.math.fdlibm.two_over_pi": {
        "size": 59,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-npio2_hw>()": {
        "size": 99,
        "type": "function"
    },
    "kotlin.math.fdlibm.npio2_hw": {
        "size": 56,
        "type": "field"
    },
    "kotlin.math.fdlibm.__ieee754_rem_pio2(Double, DoubleArray)": {
        "size": 8232,
        "type": "function"
    },
    "kotlin.math.fdlibm.properties initialized e_rem_pio2.kt": {
        "size": 75,
        "type": "field"
    },
    "kotlin.math.fdlibm.<init properties e_rem_pio2.kt>()": {
        "size": 1437,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_sinh(Double)": {
        "size": 2778,
        "type": "function"
    },
    "kotlin.math.fdlibm.__kernel_cos(Double, Double)": {
        "size": 2453,
        "type": "function"
    },
    "kotlin.math.fdlibm.<get-init_jk>()": {
        "size": 97,
        "type": "function"
    },
    "kotlin.math.fdlibm.init_jk": {
        "size": 55,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-PIo2>()": {
        "size": 94,
        "type": "function"
    },
    "kotlin.math.fdlibm.PIo2": {
        "size": 55,
        "type": "field"
    },
    "kotlin.math.fdlibm.__kernel_rem_pio2(DoubleArray, DoubleArray, Int, Int, Int, IntArray)": {
        "size": 17625,
        "type": "function"
    },
    "kotlin.math.fdlibm.properties initialized k_rem_pio2.kt": {
        "size": 75,
        "type": "field"
    },
    "kotlin.math.fdlibm.<init properties k_rem_pio2.kt>()": {
        "size": 626,
        "type": "function"
    },
    "kotlin.math.fdlibm.__kernel_sin(Double, Double, Int)": {
        "size": 1455,
        "type": "function"
    },
    "kotlin.math.fdlibm.<get-xxx>()": {
        "size": 87,
        "type": "function"
    },
    "kotlin.math.fdlibm.xxx": {
        "size": 54,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-one>()": {
        "size": 82,
        "type": "function"
    },
    "kotlin.math.fdlibm.one": {
        "size": 49,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-pio4>()": {
        "size": 84,
        "type": "function"
    },
    "kotlin.math.fdlibm.pio4": {
        "size": 50,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-pio4lo>()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.math.fdlibm.pio4lo": {
        "size": 52,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-T>()": {
        "size": 83,
        "type": "function"
    },
    "kotlin.math.fdlibm.T": {
        "size": 52,
        "type": "field"
    },
    "kotlin.math.fdlibm.__kernel_tan(Double, Double, Int)": {
        "size": 5809,
        "type": "function"
    },
    "kotlin.math.fdlibm.properties initialized k_tan.kt": {
        "size": 70,
        "type": "field"
    },
    "kotlin.math.fdlibm.<init properties k_tan.kt>()": {
        "size": 789,
        "type": "function"
    },
    "kotlin.math.fdlibm.asinh(Double)": {
        "size": 1640,
        "type": "function"
    },
    "kotlin.math.fdlibm.<get-atanhi>()": {
        "size": 94,
        "type": "function"
    },
    "kotlin.math.fdlibm.atanhi": {
        "size": 57,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-atanlo>()": {
        "size": 94,
        "type": "function"
    },
    "kotlin.math.fdlibm.atanlo": {
        "size": 57,
        "type": "field"
    },
    "kotlin.math.fdlibm.<get-aT>()": {
        "size": 86,
        "type": "function"
    },
    "kotlin.math.fdlibm.aT": {
        "size": 53,
        "type": "field"
    },
    "kotlin.math.fdlibm.atan(Double)": {
        "size": 4646,
        "type": "function"
    },
    "kotlin.math.fdlibm.properties initialized s_atan.kt": {
        "size": 71,
        "type": "field"
    },
    "kotlin.math.fdlibm.<init properties s_atan.kt>()": {
        "size": 928,
        "type": "function"
    },
    "kotlin.math.fdlibm.__ieee754_cbrt(Double)": {
        "size": 2923,
        "type": "function"
    },
    "kotlin.math.fdlibm.cos(Double)": {
        "size": 1088,
        "type": "function"
    },
    "kotlin.math.fdlibm.expm1(Double)": {
        "size": 11785,
        "type": "function"
    },
    "kotlin.math.fdlibm.fabs(Double)": {
        "size": 269,
        "type": "function"
    },
    "kotlin.math.fdlibm.log1p(Double)": {
        "size": 8385,
        "type": "function"
    },
    "kotlin.math.fdlibm.nextafter(Double, Double)": {
        "size": 7957,
        "type": "function"
    },
    "kotlin.math.fdlibm.<get-TWO52>()": {
        "size": 92,
        "type": "function"
    },
    "kotlin.math.fdlibm.TWO52": {
        "size": 56,
        "type": "field"
    },
    "kotlin.math.fdlibm.rint(Double)": {
        "size": 13892,
        "type": "function"
    },
    "kotlin.math.fdlibm.properties initialized s_rint.kt": {
        "size": 71,
        "type": "field"
    },
    "kotlin.math.fdlibm.<init properties s_rint.kt>()": {
        "size": 365,
        "type": "function"
    },
    "kotlin.math.fdlibm.scalbn(Double, Int)": {
        "size": 2208,
        "type": "function"
    },
    "kotlin.math.fdlibm.sin(Double)": {
        "size": 1096,
        "type": "function"
    },
    "kotlin.math.fdlibm.tan(Double)": {
        "size": 661,
        "type": "function"
    },
    "kotlin.math.fdlibm.tanh(Double)": {
        "size": 1766,
        "type": "function"
    },
    "kotlin.math.fdlibm.__HI(Double)": {
        "size": 316,
        "type": "function"
    },
    "kotlin.math.fdlibm.__LO(Double)": {
        "size": 133,
        "type": "function"
    },
    "kotlin.math.fdlibm.doubleSetWord(Double, Int, Int)": {
        "size": 474,
        "type": "function"
    },
    "kotlin.math.fdlibm.doubleSetWord$default(Double?, Int?, Int?, Int, Any?)": {
        "size": 1035,
        "type": "function"
    },
    "kotlin.math.fdlibm.__LOu(Double)": {
        "size": 341,
        "type": "function"
    },
    "kotlin.math.fdlibm.negate()": {
        "size": 815,
        "type": "function"
    },
    "kotlin.math.fdlibm.__HIu(Double)": {
        "size": 578,
        "type": "function"
    },
    "kotlin.math.abs(Long)": {
        "size": 278,
        "type": "function"
    },
    "kotlin.math.nextDown()": {
        "size": 888,
        "type": "function"
    },
    "kotlin.math.pow(Int)": {
        "size": 194,
        "type": "function"
    },
    "kotlin.math.pow(Double)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.math.pow(Float)": {
        "size": 198,
        "type": "function"
    },
    "kotlin.math.nextUp()": {
        "size": 852,
        "type": "function"
    },
    "kotlin.math.<get-sign>()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.math.abs(Double)": {
        "size": 91,
        "type": "function"
    },
    "kotlin.math.abs(Float)": {
        "size": 89,
        "type": "function"
    },
    "kotlin.math.<get-absoluteValue>()": {
        "size": 80,
        "type": "function"
    },
    "kotlin.math.sin(Double)": {
        "size": 82,
        "type": "function"
    },
    "kotlin.math.asin(Double)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.math.cos(Double)": {
        "size": 82,
        "type": "function"
    },
    "kotlin.math.acos(Double)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.math.tan(Double)": {
        "size": 82,
        "type": "function"
    },
    "kotlin.math.atan(Double)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.math.atan2(Double, Double)": {
        "size": 114,
        "type": "function"
    },
    "kotlin.math.sinh(Double)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.math.cosh(Double)": {
        "size": 94,
        "type": "function"
    },
    "kotlin.math.tanh(Double)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.math.asinh(Double)": {
        "size": 86,
        "type": "function"
    },
    "kotlin.math.acosh(Double)": {
        "size": 96,
        "type": "function"
    },
    "kotlin.math.atanh(Double)": {
        "size": 97,
        "type": "function"
    },
    "kotlin.math.cbrt(Double)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.math.<get-ulp>()": {
        "size": 579,
        "type": "function"
    },
    "kotlin.math.hypot(Double, Double)": {
        "size": 114,
        "type": "function"
    },
    "kotlin.math.sqrt(Double)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.math.exp(Double)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.math.expm1(Double)": {
        "size": 87,
        "type": "function"
    },
    "kotlin.math.log(Double, Double)": {
        "size": 724,
        "type": "function"
    },
    "kotlin.math.ln(Double)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.math.log10(Double)": {
        "size": 97,
        "type": "function"
    },
    "kotlin.math.log2(Double)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.math.ln1p(Double)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.math.ceil(Double)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.math.floor(Double)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.math.truncate(Double)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.math.round(Double)": {
        "size": 86,
        "type": "function"
    },
    "kotlin.math.roundToLong()": {
        "size": 687,
        "type": "function"
    },
    "kotlin.math.roundToInt()": {
        "size": 642,
        "type": "function"
    },
    "kotlin.math.sign(Double)": {
        "size": 246,
        "type": "function"
    },
    "kotlin.math.withSign(Double)": {
        "size": 126,
        "type": "function"
    },
    "kotlin.math.withSign(Int)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.math.nextTowards(Double)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.math.sin(Float)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.math.asin(Float)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.math.cos(Float)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.math.acos(Float)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.math.tan(Float)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.math.atan(Float)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.math.atan2(Float, Float)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.math.sinh(Float)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.math.cosh(Float)": {
        "size": 152,
        "type": "function"
    },
    "kotlin.math.tanh(Float)": {
        "size": 142,
        "type": "function"
    },
    "kotlin.math.asinh(Float)": {
        "size": 144,
        "type": "function"
    },
    "kotlin.math.acosh(Float)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.math.atanh(Float)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.math.cbrt(Float)": {
        "size": 215,
        "type": "function"
    },
    "kotlin.math.hypot(Float, Float)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.math.sqrt(Float)": {
        "size": 91,
        "type": "function"
    },
    "kotlin.math.exp(Float)": {
        "size": 151,
        "type": "function"
    },
    "kotlin.math.expm1(Float)": {
        "size": 145,
        "type": "function"
    },
    "kotlin.math.log(Float, Float)": {
        "size": 382,
        "type": "function"
    },
    "kotlin.math.ln(Float)": {
        "size": 150,
        "type": "function"
    },
    "kotlin.math.log10(Float)": {
        "size": 155,
        "type": "function"
    },
    "kotlin.math.log2(Float)": {
        "size": 153,
        "type": "function"
    },
    "kotlin.math.ln1p(Float)": {
        "size": 143,
        "type": "function"
    },
    "kotlin.math.ceil(Float)": {
        "size": 91,
        "type": "function"
    },
    "kotlin.math.floor(Float)": {
        "size": 93,
        "type": "function"
    },
    "kotlin.math.truncate(Float)": {
        "size": 99,
        "type": "function"
    },
    "kotlin.math.round(Float)": {
        "size": 144,
        "type": "function"
    },
    "kotlin.math.sign(Float)": {
        "size": 249,
        "type": "function"
    },
    "kotlin.math.withSign(Float)": {
        "size": 123,
        "type": "function"
    },
    "kotlin.math.abs(Int)": {
        "size": 248,
        "type": "function"
    },
    "kotlin.random.doubleFromParts(Int, Int)": {
        "size": 1217,
        "type": "function"
    },
    "kotlin.random.defaultPlatformRandom()": {
        "size": 88,
        "type": "function"
    },
    "kotlin.random.initialSeed()": {
        "size": 95,
        "type": "function"
    },
    "kotlin.reflect.KCallable": {
        "size": 76,
        "type": "class"
    },
    "kotlin.reflect.KCallable.<get-name>()": {
        "size": 35,
        "type": "function"
    },
    "kotlin.reflect.KClass": {
        "size": 324,
        "type": "class"
    },
    "kotlin.reflect.KClass.<get-simpleName>()": {
        "size": 42,
        "type": "function"
    },
    "kotlin.reflect.KClass.isInstance(Any?)": {
        "size": 77,
        "type": "function"
    },
    "kotlin.reflect.KClass.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.reflect.KClass.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.reflect.KClass.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl": {
        "size": 718,
        "type": "class"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl.<init>()": {
        "size": 110,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl.<get-simpleName>()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl.simpleName": {
        "size": 49,
        "type": "field"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl.isInstance(Any?)": {
        "size": 66,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.NothingKClassImpl_instance": {
        "size": 70,
        "type": "field"
    },
    "kotlin.reflect.wasm.internal.KClassImpl": {
        "size": 3163,
        "type": "class"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.<init>(TypeInfoData)": {
        "size": 735,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.typeData": {
        "size": 53,
        "type": "field"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.<get-simpleName>()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.qualifiedName": {
        "size": 52,
        "type": "field"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.checkSuperTypeInstance(Any)": {
        "size": 334,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.isInstance(Any?)": {
        "size": 660,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.equals(Any?)": {
        "size": 526,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.hashCode()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.reflect.wasm.internal.KClassImpl.toString()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.reflect.<get-qualifiedOrSimpleName>()": {
        "size": 102,
        "type": "function"
    },
    "kotlin.reflect.KFunction": {
        "size": 67,
        "type": "class"
    },
    "kotlin.reflect.KProperty1": {
        "size": 237,
        "type": "class"
    },
    "kotlin.reflect.KProperty1.get(T)": {
        "size": 34,
        "type": "function"
    },
    "kotlin.reflect.KProperty1.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KProperty1.invoke(T)": {
        "size": 60,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty1": {
        "size": 311,
        "type": "class"
    },
    "kotlin.reflect.KMutableProperty1.set(T, R)": {
        "size": 41,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty1.get(T)": {
        "size": 54,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty1.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty1.invoke(T)": {
        "size": 60,
        "type": "function"
    },
    "kotlin.reflect.KProperty": {
        "size": 111,
        "type": "class"
    },
    "kotlin.reflect.KProperty.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KProperty0": {
        "size": 208,
        "type": "class"
    },
    "kotlin.reflect.KProperty0.get()": {
        "size": 23,
        "type": "function"
    },
    "kotlin.reflect.KProperty0.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KProperty0.invoke()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty0": {
        "size": 269,
        "type": "class"
    },
    "kotlin.reflect.KMutableProperty0.set(R)": {
        "size": 28,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty0.get()": {
        "size": 43,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty0.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty0.invoke()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KMutableProperty": {
        "size": 114,
        "type": "class"
    },
    "kotlin.reflect.KMutableProperty.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "kotlin.reflect.KType": {
        "size": 175,
        "type": "class"
    },
    "kotlin.reflect.KType.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.reflect.KType.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.reflect.KType.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.KTypeImpl": {
        "size": 3756,
        "type": "class"
    },
    "kotlin.wasm.internal.KTypeImpl.<init>(KClassifier?, List<KTypeProjection>, Boolean)": {
        "size": 270,
        "type": "function"
    },
    "kotlin.wasm.internal.KTypeImpl.classifier": {
        "size": 55,
        "type": "field"
    },
    "kotlin.wasm.internal.KTypeImpl.arguments": {
        "size": 63,
        "type": "field"
    },
    "kotlin.wasm.internal.KTypeImpl.isMarkedNullable": {
        "size": 56,
        "type": "field"
    },
    "kotlin.wasm.internal.KTypeImpl.equals(Any?)": {
        "size": 798,
        "type": "function"
    },
    "kotlin.wasm.internal.KTypeImpl.hashCode()": {
        "size": 1052,
        "type": "function"
    },
    "kotlin.wasm.internal.KTypeImpl.toString()": {
        "size": 1232,
        "type": "function"
    },
    "kotlin.wasm.internal.PrimitiveClasses": {
        "size": 6163,
        "type": "class"
    },
    "kotlin.wasm.internal.PrimitiveClasses.<init>()": {
        "size": 4297,
        "type": "function"
    },
    "kotlin.wasm.internal.PrimitiveClasses.nothingClass": {
        "size": 62,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.anyClass": {
        "size": 52,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.<get-numberClass>()": {
        "size": 74,
        "type": "function"
    },
    "kotlin.wasm.internal.PrimitiveClasses.numberClass": {
        "size": 58,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.longClass": {
        "size": 54,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.booleanClass": {
        "size": 60,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.byteClass": {
        "size": 54,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.shortClass": {
        "size": 56,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.<get-intClass>()": {
        "size": 65,
        "type": "function"
    },
    "kotlin.wasm.internal.PrimitiveClasses.intClass": {
        "size": 52,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.floatClass": {
        "size": 56,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.doubleClass": {
        "size": 58,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.arrayClass": {
        "size": 59,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.stringClass": {
        "size": 58,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.throwableClass": {
        "size": 64,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.booleanArrayClass": {
        "size": 70,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.charArrayClass": {
        "size": 64,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.byteArrayClass": {
        "size": 64,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.shortArrayClass": {
        "size": 66,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.intArrayClass": {
        "size": 62,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.longArrayClass": {
        "size": 64,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.floatArrayClass": {
        "size": 66,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.doubleArrayClass": {
        "size": 68,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.PrimitiveClasses.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.PrimitiveClasses.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.PrimitiveClasses_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.wasm.internal.PrimitiveClasses_getInstance()": {
        "size": 215,
        "type": "function"
    },
    "kotlin.wasm.internal.createKType(KClassifier, Array<KTypeProjection>, Boolean)": {
        "size": 254,
        "type": "function"
    },
    "kotlin.wasm.internal.getKClass(TypeInfoData)": {
        "size": 125,
        "type": "function"
    },
    "kotlin.wasm.internal.getKClassFromExpression(T)": {
        "size": 2656,
        "type": "function"
    },
    "kotlin.text.isLowSurrogate()": {
        "size": 215,
        "type": "function"
    },
    "kotlin.text.isHighSurrogate()": {
        "size": 216,
        "type": "function"
    },
    "kotlin.text.toChars(Int)": {
        "size": 1260,
        "type": "function"
    },
    "kotlin.text.isISOControl()": {
        "size": 273,
        "type": "function"
    },
    "kotlin.text.digitOf(Char, Int)": {
        "size": 2927,
        "type": "function"
    },
    "kotlin.text.toCodePoint(Char, Char)": {
        "size": 736,
        "type": "function"
    },
    "kotlin.text.isSupplementaryCodePoint(Int)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.text.isSurrogatePair(Char, Char)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.text.CharacterCodingException": {
        "size": 579,
        "type": "class"
    },
    "kotlin.text.CharacterCodingException.<init>(String?)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.text.CharacterCodingException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "kotlin.text.CharacterCodingException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "kotlin.text.CharacterCodingException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "kotlin.text.CharacterCodingException.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.CharacterCodingException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.CharacterCodingException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.<get-s_Pow10MantissaTable>()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.s_Pow10MantissaTable": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.<get-s_Pow10ExponentTable>()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.s_Pow10ExponentTable": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.<get-s_Pow10By16MantissaTable>()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.s_Pow10By16MantissaTable": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.<get-s_Pow10By16ExponentTable>()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.text.s_Pow10By16ExponentTable": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.numberToDouble(Boolean, Int, String)": {
        "size": 30817,
        "type": "function"
    },
    "kotlin.text.digitsToInt(String, Int, Int)": {
        "size": 2867,
        "type": "function"
    },
    "kotlin.text.mul32x32To64(UInt, UInt)": {
        "size": 961,
        "type": "function"
    },
    "kotlin.text.mul64Lossy(ULong, ULong)": {
        "size": 9007,
        "type": "function"
    },
    "kotlin.text.properties initialized FloatingPointConverter.kt": {
        "size": 87,
        "type": "field"
    },
    "kotlin.text.<init properties FloatingPointConverter.kt>()": {
        "size": 2659,
        "type": "function"
    },
    "kotlin.text.parseDouble(String)": {
        "size": 3551,
        "type": "function"
    },
    "kotlin.text.parseDouble$parseUnsignificants($closureBox$, String)": {
        "size": 977,
        "type": "function"
    },
    "kotlin.text.parseDouble$parseNumber($closureBox$, String, StringBuilder)": {
        "size": 823,
        "type": "function"
    },
    "kotlin.text.parseDouble$parseSign($closureBox$, String)": {
        "size": 795,
        "type": "function"
    },
    "kotlin.text.parseDouble$parseE($closureBox$, String)": {
        "size": 768,
        "type": "function"
    },
    "kotlin.text.parseDouble$parseDot($closureBox$, String)": {
        "size": 700,
        "type": "function"
    },
    "kotlin.text.parseDouble$tryParseWord(String, $closureBox$, String)": {
        "size": 1243,
        "type": "function"
    },
    "kotlin.text.insertInt(CharArray, Int, Int)": {
        "size": 327,
        "type": "function"
    },
    "kotlin.text.unsafeStringFromCharArray(CharArray, Int, Int)": {
        "size": 680,
        "type": "function"
    },
    "kotlin.text.insertString(CharArray, Int, String, Int, Int)": {
        "size": 1030,
        "type": "function"
    },
    "kotlin.text.toInt(Int)": {
        "size": 285,
        "type": "function"
    },
    "kotlin.text.toBoolean()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.text.toByte()": {
        "size": 268,
        "type": "function"
    },
    "kotlin.text.toByte(Int)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.text.toShort()": {
        "size": 274,
        "type": "function"
    },
    "kotlin.text.toShort(Int)": {
        "size": 297,
        "type": "function"
    },
    "kotlin.text.toLong()": {
        "size": 268,
        "type": "function"
    },
    "kotlin.text.toLong(Int)": {
        "size": 291,
        "type": "function"
    },
    "kotlin.text.toDouble()": {
        "size": 73,
        "type": "function"
    },
    "kotlin.text.toDoubleOrNull()": {
        "size": 515,
        "type": "function"
    },
    "kotlin.text.toFloat()": {
        "size": 85,
        "type": "function"
    },
    "kotlin.text.toFloatOrNull()": {
        "size": 626,
        "type": "function"
    },
    "kotlin.text.toString$getChar()": {
        "size": 1129,
        "type": "function"
    },
    "kotlin.text.<get-STRING_CASE_INSENSITIVE_ORDER>()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.text.STRING_CASE_INSENSITIVE_ORDER": {
        "size": 87,
        "type": "field"
    },
    "kotlin.text.concatToString(Int, Int)": {
        "size": 1052,
        "type": "function"
    },
    "kotlin.text.concatToString$default(Int?, Int?, Int, Any?)": {
        "size": 897,
        "type": "function"
    },
    "kotlin.text.compareTo(String, Boolean)": {
        "size": 2230,
        "type": "function"
    },
    "kotlin.text.toCharArray()": {
        "size": 1044,
        "type": "function"
    },
    "kotlin.text.substring(Int)": {
        "size": 327,
        "type": "function"
    },
    "kotlin.text.nativeIndexOf(String, Int)": {
        "size": 954,
        "type": "function"
    },
    "kotlin.text.nativeLastIndexOf(String, Int)": {
        "size": 917,
        "type": "function"
    },
    "kotlin.text.startsWith(String, Boolean)": {
        "size": 301,
        "type": "function"
    },
    "kotlin.text.startsWith$default(String, Boolean?, Int, Any?)": {
        "size": 530,
        "type": "function"
    },
    "kotlin.text.regionMatches(Int, String, Int, Int, Boolean)": {
        "size": 395,
        "type": "function"
    },
    "kotlin.text.regionMatches$default(Int, String, Int, Int, Boolean?, Int, Any?)": {
        "size": 681,
        "type": "function"
    },
    "kotlin.text.repeat(Int)": {
        "size": 3633,
        "type": "function"
    },
    "kotlin.text.substring(Int, Int)": {
        "size": 336,
        "type": "function"
    },
    "kotlin.text.encodeToByteArray()": {
        "size": 283,
        "type": "function"
    },
    "kotlin.text.encodeToByteArray(Int, Int, Boolean)": {
        "size": 538,
        "type": "function"
    },
    "kotlin.text.encodeToByteArray$default(Int?, Int?, Boolean?, Int, Any?)": {
        "size": 1281,
        "type": "function"
    },
    "kotlin.text.concatToString()": {
        "size": 863,
        "type": "function"
    },
    "kotlin.text.decodeToString()": {
        "size": 284,
        "type": "function"
    },
    "kotlin.text.decodeToString(Int, Int, Boolean)": {
        "size": 539,
        "type": "function"
    },
    "kotlin.text.decodeToString$default(Int?, Int?, Boolean?, Int, Any?)": {
        "size": 1280,
        "type": "function"
    },
    "kotlin.text.String(CharArray, Int, Int)": {
        "size": 1277,
        "type": "function"
    },
    "kotlin.text.String(CharArray)": {
        "size": 350,
        "type": "function"
    },
    "kotlin.text.toCharArray(Int, Int)": {
        "size": 1411,
        "type": "function"
    },
    "kotlin.text.toCharArray$default(Int?, Int?, Int, Any?)": {
        "size": 886,
        "type": "function"
    },
    "kotlin.text.isBlank()": {
        "size": 1231,
        "type": "function"
    },
    "kotlin.text.regionMatches(Int, CharSequence, Int, Int, Boolean)": {
        "size": 315,
        "type": "function"
    },
    "kotlin.text.regionMatches$default(Int, CharSequence, Int, Int, Boolean?, Int, Any?)": {
        "size": 601,
        "type": "function"
    },
    "kotlin.text.endsWith(String, Boolean)": {
        "size": 361,
        "type": "function"
    },
    "kotlin.text.endsWith$default(String, Boolean?, Int, Any?)": {
        "size": 526,
        "type": "function"
    },
    "kotlin.text.capitalize()": {
        "size": 1144,
        "type": "function"
    },
    "kotlin.text.decapitalize()": {
        "size": 1105,
        "type": "function"
    },
    "kotlin.text.equals(String?, Boolean)": {
        "size": 1359,
        "type": "function"
    },
    "kotlin.text.<get-CASE_INSENSITIVE_ORDER>()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.text.replace(Char, Char, Boolean)": {
        "size": 2012,
        "type": "function"
    },
    "kotlin.text.replace$default(Char, Char, Boolean?, Int, Any?)": {
        "size": 558,
        "type": "function"
    },
    "kotlin.text.replace(String, String, Boolean)": {
        "size": 1881,
        "type": "function"
    },
    "kotlin.text.replace$default(String, String, Boolean?, Int, Any?)": {
        "size": 568,
        "type": "function"
    },
    "kotlin.text.replaceFirst(Char, Char, Boolean)": {
        "size": 978,
        "type": "function"
    },
    "kotlin.text.replaceFirst$default(Char, Char, Boolean?, Int, Any?)": {
        "size": 568,
        "type": "function"
    },
    "kotlin.text.replaceFirst(String, String, Boolean)": {
        "size": 885,
        "type": "function"
    },
    "kotlin.text.replaceFirst$default(String, String, Boolean?, Int, Any?)": {
        "size": 578,
        "type": "function"
    },
    "kotlin.text.contentEquals(CharSequence?)": {
        "size": 190,
        "type": "function"
    },
    "kotlin.text.contentEquals(CharSequence?, Boolean)": {
        "size": 296,
        "type": "function"
    },
    "kotlin.text.nativeIndexOf(Char, Int)": {
        "size": 814,
        "type": "function"
    },
    "kotlin.text.nativeLastIndexOf(Char, Int)": {
        "size": 777,
        "type": "function"
    },
    "kotlin.text.startsWith(String, Int, Boolean)": {
        "size": 327,
        "type": "function"
    },
    "kotlin.text.startsWith$default(String, Int, Boolean?, Int, Any?)": {
        "size": 572,
        "type": "function"
    },
    "kotlin.text.sam$kotlin_Comparator$0": {
        "size": 721,
        "type": "class"
    },
    "kotlin.text.sam$kotlin_Comparator$0.function": {
        "size": 61,
        "type": "field"
    },
    "kotlin.text.sam$kotlin_Comparator$0.<init>(Function2<P1, P2, R>)": {
        "size": 133,
        "type": "function"
    },
    "kotlin.text.sam$kotlin_Comparator$0.compare(T, T)": {
        "size": 288,
        "type": "function"
    },
    "kotlin.text.sam$kotlin_Comparator$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.text.sam$kotlin_Comparator$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.text.sam$kotlin_Comparator$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.STRING_CASE_INSENSITIVE_ORDER$lambda": {
        "size": 890,
        "type": "class"
    },
    "kotlin.text.STRING_CASE_INSENSITIVE_ORDER$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.text.STRING_CASE_INSENSITIVE_ORDER$lambda.invoke(String, String)": {
        "size": 112,
        "type": "function"
    },
    "kotlin.text.STRING_CASE_INSENSITIVE_ORDER$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "kotlin.text.properties initialized StringsWasm.kt": {
        "size": 76,
        "type": "field"
    },
    "kotlin.text.<init properties StringsWasm.kt>()": {
        "size": 541,
        "type": "function"
    },
    "kotlin.native.Companion": {
        "size": 613,
        "type": "class"
    },
    "kotlin.native.Companion.<init>()": {
        "size": 191,
        "type": "function"
    },
    "kotlin.native.Companion.ELEMENT_SIZE": {
        "size": 53,
        "type": "field"
    },
    "kotlin.native.Companion.MAX_BIT_OFFSET": {
        "size": 55,
        "type": "field"
    },
    "kotlin.native.Companion.ALL_TRUE": {
        "size": 51,
        "type": "field"
    },
    "kotlin.native.Companion.ALL_FALSE": {
        "size": 51,
        "type": "field"
    },
    "kotlin.native.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.native.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.native.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.native.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.native.BitSet": {
        "size": 24385,
        "type": "class"
    },
    "kotlin.native.BitSet.<init>(Int)": {
        "size": 177,
        "type": "function"
    },
    "kotlin.native.BitSet.<init>(Int?, Int, DefaultConstructorMarker?)": {
        "size": 420,
        "type": "function"
    },
    "kotlin.native.BitSet.bits": {
        "size": 28,
        "type": "field"
    },
    "kotlin.native.BitSet.<get-lastIndex>()": {
        "size": 98,
        "type": "function"
    },
    "kotlin.native.BitSet.<get-isEmpty>()": {
        "size": 1008,
        "type": "function"
    },
    "kotlin.native.BitSet.size": {
        "size": 22,
        "type": "field"
    },
    "kotlin.native.BitSet.<get-elementIndex>()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.native.BitSet.<get-bitOffset>()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.native.BitSet.<get-asBitCoordinates>()": {
        "size": 230,
        "type": "function"
    },
    "kotlin.native.BitSet.<get-asMask>()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.native.BitSet.<get-asMaskBefore>()": {
        "size": 114,
        "type": "function"
    },
    "kotlin.native.BitSet.<get-asMaskAfter>()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.native.BitSet.getMaskBetween(Int, Int)": {
        "size": 1018,
        "type": "function"
    },
    "kotlin.native.BitSet.bitToElementSize(Int)": {
        "size": 263,
        "type": "function"
    },
    "kotlin.native.BitSet.bitIndex(Int, Int)": {
        "size": 211,
        "type": "function"
    },
    "kotlin.native.BitSet.clearUnusedTail()": {
        "size": 1291,
        "type": "function"
    },
    "kotlin.native.BitSet.setBitsWithMask(Int, Long, Boolean)": {
        "size": 696,
        "type": "function"
    },
    "kotlin.native.BitSet.ensureCapacity(Int)": {
        "size": 764,
        "type": "function"
    },
    "kotlin.native.BitSet.set(Int, Boolean)": {
        "size": 457,
        "type": "function"
    },
    "kotlin.native.BitSet.set(Int, Int, Boolean)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.native.BitSet.set$default(Int, Int, Boolean?, Int, Any?)": {
        "size": 426,
        "type": "function"
    },
    "kotlin.native.BitSet.set(IntRange, Boolean)": {
        "size": 2672,
        "type": "function"
    },
    "kotlin.native.BitSet.set$default(IntRange, Boolean?, Int, Any?)": {
        "size": 416,
        "type": "function"
    },
    "kotlin.native.BitSet.nextBit(Int, Boolean)": {
        "size": 3701,
        "type": "function"
    },
    "kotlin.native.BitSet.nextSetBit(Int)": {
        "size": 107,
        "type": "function"
    },
    "kotlin.native.BitSet.nextClearBit(Int)": {
        "size": 110,
        "type": "function"
    },
    "kotlin.native.BitSet.get(Int)": {
        "size": 684,
        "type": "function"
    },
    "kotlin.native.BitSet.and(BitSet)": {
        "size": 1443,
        "type": "function"
    },
    "kotlin.native.BitSet.or(BitSet)": {
        "size": 1440,
        "type": "function"
    },
    "kotlin.native.BitSet.xor(BitSet)": {
        "size": 1443,
        "type": "function"
    },
    "kotlin.native.BitSet.andNot(BitSet)": {
        "size": 1271,
        "type": "function"
    },
    "kotlin.native.BitSet.intersects(BitSet)": {
        "size": 1600,
        "type": "function"
    },
    "kotlin.native.BitSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.native.BitSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.native.BitSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.text.regex.<get-canonicalClassesKeys>()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.text.regex.canonicalClassesKeys": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.regex.<get-canonicalClassesValues>()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.text.regex.canonicalClassesValues": {
        "size": 70,
        "type": "field"
    },
    "kotlin.text.regex.<get-singleDecompositions>()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.text.regex.singleDecompositions": {
        "size": 68,
        "type": "field"
    },
    "kotlin.text.regex.<get-decompositionKeys>()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.text.regex.decompositionKeys": {
        "size": 65,
        "type": "field"
    },
    "kotlin.text.regex.getCanonicalClassInternal(Int)": {
        "size": 140,
        "type": "function"
    },
    "kotlin.text.regex.hasSingleCodepointDecompositionInternal(Int)": {
        "size": 386,
        "type": "function"
    },
    "kotlin.text.regex.decomposeString(IntArray, Int, IntArray)": {
        "size": 1985,
        "type": "function"
    },
    "kotlin.text.regex.decomposeCodePoint(Int, IntArray, Int)": {
        "size": 726,
        "type": "function"
    },
    "kotlin.text.regex.getCanonicalClass(Int)": {
        "size": 466,
        "type": "function"
    },
    "kotlin.text.regex.binarySearchRange(IntArray, Int)": {
        "size": 953,
        "type": "function"
    },
    "kotlin.text.regex.getDecomposition(Int)": {
        "size": 478,
        "type": "function"
    },
    "kotlin.text.regex.properties initialized DecompositionHelpers.kt": {
        "size": 85,
        "type": "field"
    },
    "kotlin.text.regex.<init properties DecompositionHelpers.kt>()": {
        "size": 24921,
        "type": "function"
    },
    "kotlin.text.regex.<get-decompositionValues>()": {
        "size": 130,
        "type": "function"
    },
    "kotlin.text.regex.decompositionValues": {
        "size": 67,
        "type": "field"
    },
    "kotlin.text.regex.<get-decompositionValueIndex>()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.text.regex.decompositionValueIndex": {
        "size": 73,
        "type": "field"
    },
    "kotlin.text.regex.getDecompositionByIndex(Int)": {
        "size": 734,
        "type": "function"
    },
    "kotlin.text.regex.properties initialized DecompositionValues.kt": {
        "size": 84,
        "type": "field"
    },
    "kotlin.text.regex.<init properties DecompositionValues.kt>()": {
        "size": 33422,
        "type": "function"
    },
    "kotlin.text.<get-REPLACEMENT_BYTE_SEQUENCE>()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.text.REPLACEMENT_BYTE_SEQUENCE": {
        "size": 74,
        "type": "field"
    },
    "kotlin.text.encodeUtf8(String, Int, Int, Boolean)": {
        "size": 8438,
        "type": "function"
    },
    "kotlin.text.decodeUtf8(ByteArray, Int, Int, Boolean)": {
        "size": 5420,
        "type": "function"
    },
    "kotlin.text.codePointFromSurrogate(String, Int, Int, Int, Boolean)": {
        "size": 1134,
        "type": "function"
    },
    "kotlin.text.codePointFrom2(ByteArray, Int, Int, Int, Boolean)": {
        "size": 840,
        "type": "function"
    },
    "kotlin.text.codePointFrom3(ByteArray, Int, Int, Int, Boolean)": {
        "size": 1982,
        "type": "function"
    },
    "kotlin.text.codePointFrom4(ByteArray, Int, Int, Int, Boolean)": {
        "size": 2741,
        "type": "function"
    },
    "kotlin.text.malformed(Int, Int, Boolean)": {
        "size": 445,
        "type": "function"
    },
    "kotlin.text.properties initialized utf8Encoding.kt": {
        "size": 77,
        "type": "field"
    },
    "kotlin.text.<init properties utf8Encoding.kt>()": {
        "size": 577,
        "type": "function"
    },
    "kotlin.<get-suppressedExceptions>()": {
        "size": 287,
        "type": "function"
    },
    "kotlin.addSuppressed(Throwable)": {
        "size": 646,
        "type": "function"
    },
    "kotlin.stackTraceToString()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder": {
        "size": 13294,
        "type": "class"
    },
    "kotlin.ExceptionTraceBuilder.<init>()": {
        "size": 290,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.target": {
        "size": 52,
        "type": "field"
    },
    "kotlin.ExceptionTraceBuilder.visited": {
        "size": 62,
        "type": "field"
    },
    "kotlin.ExceptionTraceBuilder.topStack": {
        "size": 29,
        "type": "field"
    },
    "kotlin.ExceptionTraceBuilder.topStackStart": {
        "size": 31,
        "type": "field"
    },
    "kotlin.ExceptionTraceBuilder.buildFor(Throwable)": {
        "size": 148,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.hasSeen(Throwable)": {
        "size": 935,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.dumpFullTrace(String, String)": {
        "size": 562,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.dumpSelfTrace(String, String)": {
        "size": 7833,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.dropCommonFrames(String, Int)": {
        "size": 2469,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.ExceptionTraceBuilder.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.formatToExactDecimals(Double, Int)": {
        "size": 1199,
        "type": "function"
    },
    "kotlin.time.toFixed(Double, Int)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.time.toFixed__externalAdapter(Double, Int)": {
        "size": 287,
        "type": "function"
    },
    "kotlin.time.toPrecision(Double, Int)": {
        "size": 129,
        "type": "function"
    },
    "kotlin.time.toPrecision__externalAdapter(Double, Int)": {
        "size": 295,
        "type": "function"
    },
    "kotlin.time.DurationUnit_NANOSECONDS_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.time.DurationUnit_MICROSECONDS_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.time.DurationUnit_MILLISECONDS_instance": {
        "size": 73,
        "type": "field"
    },
    "kotlin.time.DurationUnit_SECONDS_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.time.DurationUnit_MINUTES_instance": {
        "size": 68,
        "type": "field"
    },
    "kotlin.time.DurationUnit_HOURS_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.time.DurationUnit_DAYS_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.time.values()": {
        "size": 310,
        "type": "function"
    },
    "kotlin.time.DurationUnit_entriesInitialized": {
        "size": 72,
        "type": "field"
    },
    "kotlin.time.DurationUnit_initEntries()": {
        "size": 836,
        "type": "function"
    },
    "kotlin.time.DurationUnit": {
        "size": 609,
        "type": "class"
    },
    "kotlin.time.DurationUnit.<init>(String, Int, Double)": {
        "size": 187,
        "type": "function"
    },
    "kotlin.time.DurationUnit.scale": {
        "size": 44,
        "type": "field"
    },
    "kotlin.time.DurationUnit.compareTo(DurationUnit)": {
        "size": 70,
        "type": "function"
    },
    "kotlin.time.DurationUnit.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.time.DurationUnit.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.DurationUnit.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.convertDurationUnitOverflow(Long, DurationUnit, DurationUnit)": {
        "size": 681,
        "type": "function"
    },
    "kotlin.time.convertDurationUnit(Long, DurationUnit, DurationUnit)": {
        "size": 1108,
        "type": "function"
    },
    "kotlin.time.convertDurationUnit(Double, DurationUnit, DurationUnit)": {
        "size": 623,
        "type": "function"
    },
    "kotlin.time.DurationUnit_NANOSECONDS_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.time.DurationUnit_MICROSECONDS_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.time.DurationUnit_MILLISECONDS_getInstance()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.time.DurationUnit_SECONDS_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.time.DurationUnit_MINUTES_getInstance()": {
        "size": 127,
        "type": "function"
    },
    "kotlin.time.DurationUnit_HOURS_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.time.DurationUnit_DAYS_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource": {
        "size": 3136,
        "type": "class"
    },
    "kotlin.time.MonotonicTimeSource.<init>()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.performance": {
        "size": 50,
        "type": "field"
    },
    "kotlin.time.MonotonicTimeSource.read()": {
        "size": 209,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.markNow()": {
        "size": 204,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.elapsedFrom(ValueTimeMark)": {
        "size": 525,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.adjustReading(ValueTimeMark, Duration)": {
        "size": 333,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.differenceBetween(ValueTimeMark, ValueTimeMark)": {
        "size": 746,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.toString()": {
        "size": 317,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.time.MonotonicTimeSource_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.time.MonotonicTimeSource_getInstance()": {
        "size": 230,
        "type": "function"
    },
    "kotlin.time.tryGetPerformance()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.time.tryGetPerformance__externalAdapter()": {
        "size": 128,
        "type": "function"
    },
    "kotlin.time.getPerformanceNow(JsAny)": {
        "size": 111,
        "type": "function"
    },
    "kotlin.time.dateNow()": {
        "size": 65,
        "type": "function"
    },
    "kotlin.time.sumCheckNaN(Double)": {
        "size": 448,
        "type": "function"
    },
    "kotlin.wasm.unsafe.<Pointer__<init>-impl>(UInt)": {
        "size": 135,
        "type": "function"
    },
    "kotlin.wasm.unsafe.<Pointer__<get-address>-impl>(Pointer)": {
        "size": 85,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__plus-impl(Pointer, Int)": {
        "size": 663,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__minus-impl(Pointer, Int)": {
        "size": 669,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__plus-impl(Pointer, UInt)": {
        "size": 470,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__minus-impl(Pointer, UInt)": {
        "size": 474,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__loadByte-impl(Pointer)": {
        "size": 124,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__loadShort-impl(Pointer)": {
        "size": 127,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__loadInt-impl(Pointer)": {
        "size": 119,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__loadLong-impl(Pointer)": {
        "size": 121,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__storeByte-impl(Pointer, Byte)": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__storeShort-impl(Pointer, Short)": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__storeInt-impl(Pointer, Int)": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__storeLong-impl(Pointer, Long)": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__toString-impl(Pointer)": {
        "size": 311,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__hashCode-impl(Pointer)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer__equals-impl(Pointer, Any?)": {
        "size": 691,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer": {
        "size": 724,
        "type": "class"
    },
    "kotlin.wasm.unsafe.Pointer.<init>(UInt)": {
        "size": 91,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer.address": {
        "size": 44,
        "type": "field"
    },
    "kotlin.wasm.unsafe.Pointer.toString()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer.hashCode()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.unsafe.Pointer.equals(Any?)": {
        "size": 192,
        "type": "function"
    },
    "kotlin.wasm.unsafe.currentAllocator": {
        "size": 79,
        "type": "field"
    },
    "kotlin.wasm.unsafe.MemoryAllocator": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.unsafe.MemoryAllocator.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.wasm.unsafe.MemoryAllocator.allocate(Int)": {
        "size": 43,
        "type": "function"
    },
    "kotlin.wasm.unsafe.MemoryAllocator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.unsafe.MemoryAllocator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.unsafe.MemoryAllocator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator": {
        "size": 6576,
        "type": "class"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.<init>(Int, ScopedMemoryAllocator?)": {
        "size": 260,
        "type": "function"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.parent": {
        "size": 43,
        "type": "field"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.destroyed": {
        "size": 31,
        "type": "field"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.suspended": {
        "size": 31,
        "type": "field"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.availableAddress": {
        "size": 34,
        "type": "field"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.allocate(Int)": {
        "size": 4762,
        "type": "function"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.createChild()": {
        "size": 403,
        "type": "function"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.destroy()": {
        "size": 379,
        "type": "function"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.unsafe.ScopedMemoryAllocator.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.unsafe.createAllocatorInTheNewScope()": {
        "size": 653,
        "type": "function"
    },
    "kotlin.wasm.unsafe.wasmMemorySize()": {
        "size": 110,
        "type": "function"
    },
    "kotlin.wasm.unsafe.wasmMemoryGrow(Int)": {
        "size": 160,
        "type": "function"
    },
    "kotlin.concurrent.AtomicReference": {
        "size": 815,
        "type": "class"
    },
    "kotlin.concurrent.AtomicReference.<init>(T)": {
        "size": 101,
        "type": "function"
    },
    "kotlin.concurrent.AtomicReference.value": {
        "size": 21,
        "type": "field"
    },
    "kotlin.concurrent.AtomicReference.compareAndExchange(T, T)": {
        "size": 240,
        "type": "function"
    },
    "kotlin.concurrent.AtomicReference.compareAndSet(T, T)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.concurrent.AtomicReference.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.concurrent.AtomicReference.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.concurrent.AtomicReference.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.kTypeStub()": {
        "size": 114,
        "type": "function"
    },
    "kotlin.wasm.internal.<no name provided>": {
        "size": 283,
        "type": "class"
    },
    "kotlin.wasm.internal.<no name provided>.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.wasm.internal.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.wasm.internal.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.native.internal.KonanSet": {
        "size": 361,
        "type": "class"
    },
    "kotlin.native.internal.KonanSet.iterator()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.native.internal.KonanSet.containsAll(Collection<E>)": {
        "size": 80,
        "type": "function"
    },
    "kotlin.native.internal.KonanSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.native.internal.KonanSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.native.internal.KonanSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.assertArrayContentEquals(String?, T?, T?, Function1<T, Int>, @ExtensionFunctionType Function2<T, Int, Any?>, @ExtensionFunctionType Function1<T?, String>, @ExtensionFunctionType Function2<T?, T?, Boolean>)": {
        "size": 3535,
        "type": "function"
    },
    "kotlin.test.checkReferenceAndNullEquality(String, String?, T?, T?, @ExtensionFunctionType Function1<T?, String>)": {
        "size": 1339,
        "type": "function"
    },
    "kotlin.test.elementsDifferMessage(String, Int, Any?, Any?)": {
        "size": 525,
        "type": "function"
    },
    "kotlin.test._asserter": {
        "size": 59,
        "type": "field"
    },
    "kotlin.test.Asserter$assertTrue$lambda": {
        "size": 510,
        "type": "class"
    },
    "kotlin.test.Asserter$assertTrue$lambda.<init>(String?)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.test.Asserter$assertTrue$lambda.invoke()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.test.Asserter$assertTrue$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.Asserter$assertEquals$lambda": {
        "size": 1036,
        "type": "class"
    },
    "kotlin.test.Asserter$assertEquals$lambda.<init>(String?, Any?, Any?)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.test.Asserter$assertEquals$lambda.invoke()": {
        "size": 501,
        "type": "function"
    },
    "kotlin.test.Asserter$assertEquals$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.Asserter$assertEquals$lambda.$expected": {
        "size": 46,
        "type": "field"
    },
    "kotlin.test.Asserter$assertEquals$lambda.$actual": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.Asserter$assertNotEquals$lambda": {
        "size": 863,
        "type": "class"
    },
    "kotlin.test.Asserter$assertNotEquals$lambda.<init>(String?, Any?)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNotEquals$lambda.invoke()": {
        "size": 428,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNotEquals$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.Asserter$assertNotEquals$lambda.$actual": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.Asserter$assertSame$lambda": {
        "size": 1042,
        "type": "class"
    },
    "kotlin.test.Asserter$assertSame$lambda.<init>(String?, Any?, Any?)": {
        "size": 214,
        "type": "function"
    },
    "kotlin.test.Asserter$assertSame$lambda.invoke()": {
        "size": 509,
        "type": "function"
    },
    "kotlin.test.Asserter$assertSame$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.Asserter$assertSame$lambda.$expected": {
        "size": 46,
        "type": "field"
    },
    "kotlin.test.Asserter$assertSame$lambda.$actual": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.Asserter$assertNotSame$lambda": {
        "size": 863,
        "type": "class"
    },
    "kotlin.test.Asserter$assertNotSame$lambda.<init>(String?, Any?)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNotSame$lambda.invoke()": {
        "size": 430,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNotSame$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.Asserter$assertNotSame$lambda.$actual": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.Asserter$assertNull$lambda": {
        "size": 869,
        "type": "class"
    },
    "kotlin.test.Asserter$assertNull$lambda.<init>(String?, Any?)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNull$lambda.invoke()": {
        "size": 439,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNull$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.Asserter$assertNull$lambda.$actual": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.Asserter$assertNotNull$lambda": {
        "size": 591,
        "type": "class"
    },
    "kotlin.test.Asserter$assertNotNull$lambda.<init>(String?)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNotNull$lambda.invoke()": {
        "size": 261,
        "type": "function"
    },
    "kotlin.test.Asserter$assertNotNull$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.Asserter": {
        "size": 2540,
        "type": "class"
    },
    "kotlin.test.Asserter.fail(String?)": {
        "size": 46,
        "type": "function"
    },
    "kotlin.test.Asserter.fail(String?, Throwable?)": {
        "size": 95,
        "type": "function"
    },
    "kotlin.test.Asserter.assertTrue(Function0<String?>, Boolean)": {
        "size": 224,
        "type": "function"
    },
    "kotlin.test.Asserter.assertTrue(String?, Boolean)": {
        "size": 202,
        "type": "function"
    },
    "kotlin.test.Asserter.assertEquals(String?, Any?, Any?)": {
        "size": 297,
        "type": "function"
    },
    "kotlin.test.Asserter.assertNotEquals(String?, Any?, Any?)": {
        "size": 306,
        "type": "function"
    },
    "kotlin.test.Asserter.assertSame(String?, Any?, Any?)": {
        "size": 286,
        "type": "function"
    },
    "kotlin.test.Asserter.assertNotSame(String?, Any?, Any?)": {
        "size": 295,
        "type": "function"
    },
    "kotlin.test.Asserter.assertNull(String?, Any?)": {
        "size": 239,
        "type": "function"
    },
    "kotlin.test.Asserter.assertNotNull(String?, Any?)": {
        "size": 254,
        "type": "function"
    },
    "kotlin.test.Asserter.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.Asserter.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.Asserter.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.assertTrue(Boolean, String?)": {
        "size": 423,
        "type": "function"
    },
    "kotlin.test.assertTrue$default(Boolean, String?, Int, Any?)": {
        "size": 356,
        "type": "function"
    },
    "kotlin.test.assertFalse(Boolean, String?)": {
        "size": 452,
        "type": "function"
    },
    "kotlin.test.assertFalse$default(Boolean, String?, Int, Any?)": {
        "size": 358,
        "type": "function"
    },
    "kotlin.test.assertEquals(T, T, String?)": {
        "size": 227,
        "type": "function"
    },
    "kotlin.test.assertEquals$default(T, T, String?, Int, Any?)": {
        "size": 402,
        "type": "function"
    },
    "kotlin.test.fail(String?)": {
        "size": 131,
        "type": "function"
    },
    "kotlin.test.fail$default(String?, Int, Any?)": {
        "size": 319,
        "type": "function"
    },
    "kotlin.test.assertNotNull(T?, String?)": {
        "size": 379,
        "type": "function"
    },
    "kotlin.test.assertNotNull$default(T?, String?, Int, Any?)": {
        "size": 373,
        "type": "function"
    },
    "kotlin.test.assertNull(Any?, String?)": {
        "size": 165,
        "type": "function"
    },
    "kotlin.test.assertNull$default(Any?, String?, Int, Any?)": {
        "size": 353,
        "type": "function"
    },
    "kotlin.test.assertNotSame(T, T, String?)": {
        "size": 226,
        "type": "function"
    },
    "kotlin.test.assertNotSame$default(T, T, String?, Int, Any?)": {
        "size": 401,
        "type": "function"
    },
    "kotlin.test.assertNotEquals(T, T, String?)": {
        "size": 230,
        "type": "function"
    },
    "kotlin.test.assertNotEquals$default(T, T, String?, Int, Any?)": {
        "size": 405,
        "type": "function"
    },
    "kotlin.test.assertSame(T, T, String?)": {
        "size": 223,
        "type": "function"
    },
    "kotlin.test.assertSame$default(T, T, String?, Int, Any?)": {
        "size": 398,
        "type": "function"
    },
    "kotlin.test.assertContains(CharSequence, CharSequence, Boolean, String?)": {
        "size": 476,
        "type": "function"
    },
    "kotlin.test.assertContains$default(CharSequence, CharSequence, Boolean?, String?, Int, Any?)": {
        "size": 788,
        "type": "function"
    },
    "kotlin.test.assertContentEquals(ByteArray?, ByteArray?, String?)": {
        "size": 548,
        "type": "function"
    },
    "kotlin.test.assertContentEquals$default(ByteArray?, ByteArray?, String?, Int, Any?)": {
        "size": 450,
        "type": "function"
    },
    "kotlin.test.fail(String?, Throwable?)": {
        "size": 195,
        "type": "function"
    },
    "kotlin.test.assertEquals(Double, Double, Double, String?)": {
        "size": 331,
        "type": "function"
    },
    "kotlin.test.assertEquals$default(Double, Double, Double, String?, Int, Any?)": {
        "size": 494,
        "type": "function"
    },
    "kotlin.test.assertEquals(Float, Float, Float, String?)": {
        "size": 327,
        "type": "function"
    },
    "kotlin.test.assertEquals$default(Float, Float, Float, String?, Int, Any?)": {
        "size": 491,
        "type": "function"
    },
    "kotlin.test.assertContentEquals(UByteArray?, UByteArray?, String?)": {
        "size": 609,
        "type": "function"
    },
    "kotlin.test.assertContentEquals$default(UByteArray?, UByteArray?, String?, Int, Any?)": {
        "size": 509,
        "type": "function"
    },
    "kotlin.test.assertContentEquals(CharArray?, CharArray?, String?)": {
        "size": 548,
        "type": "function"
    },
    "kotlin.test.assertContentEquals$default(CharArray?, CharArray?, String?, Int, Any?)": {
        "size": 450,
        "type": "function"
    },
    "kotlin.test.assertContains(Iterable<T>, T, String?)": {
        "size": 416,
        "type": "function"
    },
    "kotlin.test.assertContains$default(Iterable<T>, T, String?, Int, Any?)": {
        "size": 449,
        "type": "function"
    },
    "kotlin.test.<get-asserter>()": {
        "size": 216,
        "type": "function"
    },
    "kotlin.test.checkResultIsFailure(String?, Result<Unit>)": {
        "size": 1104,
        "type": "function"
    },
    "kotlin.test.assertContains$lambda": {
        "size": 1331,
        "type": "class"
    },
    "kotlin.test.assertContains$lambda.<init>(String?, CharSequence, CharSequence, Boolean)": {
        "size": 297,
        "type": "function"
    },
    "kotlin.test.assertContains$lambda.invoke()": {
        "size": 642,
        "type": "function"
    },
    "kotlin.test.assertContains$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.assertContains$lambda.$charSequence": {
        "size": 58,
        "type": "field"
    },
    "kotlin.test.assertContains$lambda.$other": {
        "size": 51,
        "type": "field"
    },
    "kotlin.test.assertContains$lambda.$ignoreCase": {
        "size": 51,
        "type": "field"
    },
    "kotlin.test.assertContentEquals$lambda": {
        "size": 598,
        "type": "class"
    },
    "kotlin.test.assertContentEquals$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.assertContentEquals$lambda.invoke(ByteArray)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.test.assertContentEquals$lambda.invoke(P1)": {
        "size": 306,
        "type": "function"
    },
    "kotlin.test.ByteArray$get$ref": {
        "size": 895,
        "type": "class"
    },
    "kotlin.test.ByteArray$get$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.ByteArray$get$ref.invoke(ByteArray, Int)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.test.ByteArray$get$ref.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "kotlin.test.ByteArray$get$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "kotlin.test.contentToString$ref": {
        "size": 657,
        "type": "class"
    },
    "kotlin.test.contentToString$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.contentToString$ref.invoke(ByteArray?)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.test.contentToString$ref.invoke(P1)": {
        "size": 280,
        "type": "function"
    },
    "kotlin.test.contentToString$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "kotlin.test.contentEquals$ref": {
        "size": 973,
        "type": "class"
    },
    "kotlin.test.contentEquals$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.contentEquals$ref.invoke(ByteArray?, ByteArray?)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.test.contentEquals$ref.invoke(P1, P2)": {
        "size": 530,
        "type": "function"
    },
    "kotlin.test.contentEquals$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "kotlin.test.assertContentEquals$lambda.invoke(UByteArray)": {
        "size": 106,
        "type": "function"
    },
    "kotlin.test.UByteArray$get$ref": {
        "size": 931,
        "type": "class"
    },
    "kotlin.test.UByteArray$get$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.UByteArray$get$ref.invoke(UByteArray, Int)": {
        "size": 120,
        "type": "function"
    },
    "kotlin.test.UByteArray$get$ref.invoke(P1, P2)": {
        "size": 514,
        "type": "function"
    },
    "kotlin.test.UByteArray$get$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "kotlin.test.contentToString$ref.invoke(UByteArray?)": {
        "size": 89,
        "type": "function"
    },
    "kotlin.test.contentEquals$ref.invoke(UByteArray?, UByteArray?)": {
        "size": 115,
        "type": "function"
    },
    "kotlin.test.assertContentEquals$lambda.invoke(CharArray)": {
        "size": 79,
        "type": "function"
    },
    "kotlin.test.CharArray$get$ref": {
        "size": 895,
        "type": "class"
    },
    "kotlin.test.CharArray$get$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.CharArray$get$ref.invoke(CharArray, Int)": {
        "size": 92,
        "type": "function"
    },
    "kotlin.test.CharArray$get$ref.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "kotlin.test.CharArray$get$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "kotlin.test.contentToString$ref.invoke(CharArray?)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.test.contentEquals$ref.invoke(CharArray?, CharArray?)": {
        "size": 113,
        "type": "function"
    },
    "kotlin.test.assertContains$lambda.<init>(String?, Iterable<T>, T)": {
        "size": 221,
        "type": "function"
    },
    "kotlin.test.assertContains$lambda.$iterable": {
        "size": 53,
        "type": "field"
    },
    "kotlin.test.assertContains$lambda.$element": {
        "size": 42,
        "type": "field"
    },
    "kotlin.test.messagePrefix(String?)": {
        "size": 157,
        "type": "function"
    },
    "kotlin.test.checkDoublesAreEqual(Double, Double, Double, String?, Boolean)": {
        "size": 771,
        "type": "function"
    },
    "kotlin.test.checkDoublesAreEqual$default(Double, Double, Double, String?, Boolean?, Int, Any?)": {
        "size": 608,
        "type": "function"
    },
    "kotlin.test.checkFloatsAreEqual(Float, Float, Float, String?, Boolean)": {
        "size": 795,
        "type": "function"
    },
    "kotlin.test.checkFloatsAreEqual$default(Float, Float, Float, String?, Boolean?, Int, Any?)": {
        "size": 603,
        "type": "function"
    },
    "kotlin.test.checkAbsoluteTolerance(Double)": {
        "size": 1817,
        "type": "function"
    },
    "kotlin.test.checkDoublesAreEqual$lambda": {
        "size": 1294,
        "type": "class"
    },
    "kotlin.test.checkDoublesAreEqual$lambda.<init>(String?, Double, Double, Double)": {
        "size": 296,
        "type": "function"
    },
    "kotlin.test.checkDoublesAreEqual$lambda.invoke()": {
        "size": 609,
        "type": "function"
    },
    "kotlin.test.checkDoublesAreEqual$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.checkDoublesAreEqual$lambda.$expected": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.checkDoublesAreEqual$lambda.$absoluteTolerance": {
        "size": 57,
        "type": "field"
    },
    "kotlin.test.checkDoublesAreEqual$lambda.$actual": {
        "size": 46,
        "type": "field"
    },
    "kotlin.test.checkFloatsAreEqual$lambda": {
        "size": 1285,
        "type": "class"
    },
    "kotlin.test.checkFloatsAreEqual$lambda.<init>(String?, Float, Float, Float)": {
        "size": 293,
        "type": "function"
    },
    "kotlin.test.checkFloatsAreEqual$lambda.invoke()": {
        "size": 607,
        "type": "function"
    },
    "kotlin.test.checkFloatsAreEqual$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.checkFloatsAreEqual$lambda.$expected": {
        "size": 47,
        "type": "field"
    },
    "kotlin.test.checkFloatsAreEqual$lambda.$absoluteTolerance": {
        "size": 56,
        "type": "field"
    },
    "kotlin.test.checkFloatsAreEqual$lambda.$actual": {
        "size": 45,
        "type": "field"
    },
    "kotlin.test.<get-assertHook>()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.test.assertHook": {
        "size": 76,
        "type": "field"
    },
    "kotlin.test.AssertionResult": {
        "size": 185,
        "type": "class"
    },
    "kotlin.test.AssertionResult.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.AssertionResult.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.AssertionResult.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter$assertTrue$lambda": {
        "size": 543,
        "type": "class"
    },
    "kotlin.test.DefaultWasmAsserter$assertTrue$lambda.<init>(String?)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter$assertTrue$lambda.invoke()": {
        "size": 205,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter$assertTrue$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.DefaultWasmAsserter$fail$lambda": {
        "size": 525,
        "type": "class"
    },
    "kotlin.test.DefaultWasmAsserter$fail$lambda.<init>(String?)": {
        "size": 122,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter$fail$lambda.invoke()": {
        "size": 193,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter$fail$lambda.$message": {
        "size": 48,
        "type": "field"
    },
    "kotlin.test.<no name provided>": {
        "size": 733,
        "type": "class"
    },
    "kotlin.test.<no name provided>.<init>(Boolean, Function0<String?>)": {
        "size": 303,
        "type": "function"
    },
    "kotlin.test.<no name provided>.result": {
        "size": 46,
        "type": "field"
    },
    "kotlin.test.<no name provided>.expected": {
        "size": 45,
        "type": "field"
    },
    "kotlin.test.<no name provided>.actual": {
        "size": 43,
        "type": "field"
    },
    "kotlin.test.<no name provided>.lazyMessage": {
        "size": 62,
        "type": "field"
    },
    "kotlin.test.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter": {
        "size": 5269,
        "type": "class"
    },
    "kotlin.test.DefaultWasmAsserter.<init>()": {
        "size": 117,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.e": {
        "size": 20,
        "type": "field"
    },
    "kotlin.test.DefaultWasmAsserter.a": {
        "size": 20,
        "type": "field"
    },
    "kotlin.test.DefaultWasmAsserter.assertEquals(String?, Any?, Any?)": {
        "size": 314,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.assertNotEquals(String?, Any?, Any?)": {
        "size": 316,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.assertSame(String?, Any?, Any?)": {
        "size": 310,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.assertNotSame(String?, Any?, Any?)": {
        "size": 312,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.assertNull(String?, Any?)": {
        "size": 245,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.assertNotNull(String?, Any?)": {
        "size": 251,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.assertTrue(Function0<String?>, Boolean)": {
        "size": 1000,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.assertTrue(String?, Boolean)": {
        "size": 320,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.fail(String?)": {
        "size": 195,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.fail(String?, Throwable?)": {
        "size": 718,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.invokeHook(Boolean, Function0<String?>)": {
        "size": 659,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.DefaultWasmAsserter_instance": {
        "size": 74,
        "type": "field"
    },
    "kotlin.test.assertHook$lambda": {
        "size": 645,
        "type": "class"
    },
    "kotlin.test.assertHook$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.assertHook$lambda.invoke(AssertionResult)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.test.assertHook$lambda.invoke(P1)": {
        "size": 356,
        "type": "function"
    },
    "kotlin.test.properties initialized DefaultWasmAsserter.kt": {
        "size": 84,
        "type": "field"
    },
    "kotlin.test.<init properties DefaultWasmAsserter.kt>()": {
        "size": 354,
        "type": "function"
    },
    "kotlin.test.FrameworkAdapter": {
        "size": 344,
        "type": "class"
    },
    "kotlin.test.FrameworkAdapter.suite(String, Boolean, Function0<Unit>)": {
        "size": 78,
        "type": "function"
    },
    "kotlin.test.FrameworkAdapter.test(String, Boolean, Function0<Any?>)": {
        "size": 76,
        "type": "function"
    },
    "kotlin.test.FrameworkAdapter.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.FrameworkAdapter.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.FrameworkAdapter.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.parse$addToIncludeOrExcludeList($closureBox$, MutableList<Pair<String, String>>, MutableList<Pair<String, String>>, MutableList<String>, MutableList<String>, String)": {
        "size": 2419,
        "type": "function"
    },
    "kotlin.test.Companion": {
        "size": 6813,
        "type": "class"
    },
    "kotlin.test.Companion.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.Companion.parse(List<String>)": {
        "size": 6238,
        "type": "function"
    },
    "kotlin.test.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "kotlin.test.FrameworkTestArguments": {
        "size": 1228,
        "type": "class"
    },
    "kotlin.test.FrameworkTestArguments.<init>(List<String>, List<Pair<String, String>>, List<String>, List<Pair<String, String>>, IgnoredTestSuitesReporting, Boolean)": {
        "size": 591,
        "type": "function"
    },
    "kotlin.test.FrameworkTestArguments.includedQualifiers": {
        "size": 63,
        "type": "field"
    },
    "kotlin.test.FrameworkTestArguments.includedClassMethods": {
        "size": 79,
        "type": "field"
    },
    "kotlin.test.FrameworkTestArguments.excludedQualifiers": {
        "size": 63,
        "type": "field"
    },
    "kotlin.test.FrameworkTestArguments.excludedClassMethods": {
        "size": 79,
        "type": "field"
    },
    "kotlin.test.FrameworkTestArguments.ignoredTestSuites": {
        "size": 76,
        "type": "field"
    },
    "kotlin.test.FrameworkTestArguments.dryRun": {
        "size": 46,
        "type": "field"
    },
    "kotlin.test.FrameworkTestArguments.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.FrameworkTestArguments.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.FrameworkTestArguments.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting_skip_instance": {
        "size": 93,
        "type": "field"
    },
    "kotlin.test.IgnoredTestSuitesReporting_reportAsIgnoredTest_instance": {
        "size": 108,
        "type": "field"
    },
    "kotlin.test.IgnoredTestSuitesReporting_reportAllInnerTestsAsIgnored_instance": {
        "size": 117,
        "type": "field"
    },
    "kotlin.test.values()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting_entriesInitialized": {
        "size": 86,
        "type": "field"
    },
    "kotlin.test.IgnoredTestSuitesReporting_initEntries()": {
        "size": 576,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting": {
        "size": 534,
        "type": "class"
    },
    "kotlin.test.IgnoredTestSuitesReporting.<init>(String, Int)": {
        "size": 160,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting.compareTo(IgnoredTestSuitesReporting)": {
        "size": 84,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting_skip_getInstance()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting_reportAsIgnoredTest_getInstance()": {
        "size": 207,
        "type": "function"
    },
    "kotlin.test.IgnoredTestSuitesReporting_reportAllInnerTestsAsIgnored_getInstance()": {
        "size": 225,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter$callTest$lambda": {
        "size": 1101,
        "type": "class"
    },
    "kotlin.test.JasmineLikeAdapter$callTest$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter$callTest$lambda.invoke(JsAny)": {
        "size": 599,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter$callTest$lambda.invoke(P1)": {
        "size": 274,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter$test$lambda": {
        "size": 711,
        "type": "class"
    },
    "kotlin.test.JasmineLikeAdapter$test$lambda.<init>(JasmineLikeAdapter, Function0<Any?>)": {
        "size": 181,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter$test$lambda.invoke()": {
        "size": 228,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter$test$lambda.this$0": {
        "size": 57,
        "type": "field"
    },
    "kotlin.test.JasmineLikeAdapter$test$lambda.$testFn": {
        "size": 55,
        "type": "field"
    },
    "kotlin.test.JasmineLikeAdapter": {
        "size": 2498,
        "type": "class"
    },
    "kotlin.test.JasmineLikeAdapter.<init>()": {
        "size": 67,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter.suite(String, Boolean, Function0<Unit>)": {
        "size": 429,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter.callTest(Function0<Any?>)": {
        "size": 884,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter.test(String, Boolean, Function0<Any?>)": {
        "size": 760,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.JasmineLikeAdapter.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.xdescribe(JsString?, JsAny)": {
        "size": 102,
        "type": "function"
    },
    "kotlin.test.xdescribe__externalAdapter(String, Function0<Unit>)": {
        "size": 199,
        "type": "function"
    },
    "kotlin.test.describe(JsString?, JsAny)": {
        "size": 100,
        "type": "function"
    },
    "kotlin.test.describe__externalAdapter(String, Function0<Unit>)": {
        "size": 197,
        "type": "function"
    },
    "kotlin.test.toJsError()": {
        "size": 306,
        "type": "function"
    },
    "kotlin.test.jsThrow(JsAny)": {
        "size": 108,
        "type": "function"
    },
    "kotlin.test.jsThrow__externalAdapter(JsAny)": {
        "size": 236,
        "type": "function"
    },
    "kotlin.test.xit(JsString?, JsAny)": {
        "size": 90,
        "type": "function"
    },
    "kotlin.test.xit__externalAdapter(String, Function0<JsAny?>)": {
        "size": 188,
        "type": "function"
    },
    "kotlin.test.__callFunction_(()->Js?)(structref)": {
        "size": 1047,
        "type": "function"
    },
    "kotlin.test.__convertKotlinClosureToJsClosure_(()->Js?)(structref)": {
        "size": 154,
        "type": "function"
    },
    "kotlin.test.it(JsString?, JsAny)": {
        "size": 88,
        "type": "function"
    },
    "kotlin.test.it__externalAdapter(String, Function0<JsAny?>)": {
        "size": 186,
        "type": "function"
    },
    "kotlin.test.throwableToJsError(JsString?, JsString?)": {
        "size": 190,
        "type": "function"
    },
    "kotlin.test.throwableToJsError__externalAdapter(String, String)": {
        "size": 400,
        "type": "function"
    },
    "kotlin.test.MessageType_Started_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.test.MessageType_Finished_instance": {
        "size": 67,
        "type": "field"
    },
    "kotlin.test.MessageType_Failed_instance": {
        "size": 65,
        "type": "field"
    },
    "kotlin.test.MessageType_Ignored_instance": {
        "size": 66,
        "type": "field"
    },
    "kotlin.test.MessageType_SuiteStarted_instance": {
        "size": 71,
        "type": "field"
    },
    "kotlin.test.MessageType_SuiteFinished_instance": {
        "size": 72,
        "type": "field"
    },
    "kotlin.test.MessageType_entriesInitialized": {
        "size": 71,
        "type": "field"
    },
    "kotlin.test.MessageType_initEntries()": {
        "size": 777,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$test$lambda$lambda": {
        "size": 1623,
        "type": "class"
    },
    "kotlin.test.TeamcityAdapter$test$lambda$lambda.<init>(TeamcityAdapter, String)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$test$lambda$lambda.invoke(JsAny?)": {
        "size": 289,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$test$lambda$lambda.invoke(P1)": {
        "size": 269,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$test$lambda$lambda.this$0": {
        "size": 54,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$test$lambda$lambda.$name": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$test$lambda$lambda.invoke(JsAny)": {
        "size": 931,
        "type": "function"
    },
    "kotlin.test.MessageType": {
        "size": 521,
        "type": "class"
    },
    "kotlin.test.MessageType.<init>(String, Int, String)": {
        "size": 183,
        "type": "function"
    },
    "kotlin.test.MessageType.type": {
        "size": 43,
        "type": "field"
    },
    "kotlin.test.MessageType.compareTo(MessageType)": {
        "size": 69,
        "type": "function"
    },
    "kotlin.test.MessageType.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.MessageType.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.MessageType.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.MessageType_Started_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.test.MessageType_Finished_getInstance()": {
        "size": 125,
        "type": "function"
    },
    "kotlin.test.MessageType_Failed_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "kotlin.test.MessageType_Ignored_getInstance()": {
        "size": 123,
        "type": "function"
    },
    "kotlin.test.MessageType_SuiteStarted_getInstance()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.test.MessageType_SuiteFinished_getInstance()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runOrScheduleNextWithResult$lambda": {
        "size": 973,
        "type": "class"
    },
    "kotlin.test.TeamcityAdapter$runOrScheduleNextWithResult$lambda.<init>(Function0<Promise<JsAny?>?>)": {
        "size": 136,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runOrScheduleNextWithResult$lambda.invoke(JsAny?)": {
        "size": 349,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runOrScheduleNextWithResult$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runOrScheduleNextWithResult$lambda.$block": {
        "size": 66,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$runSuite$lambda": {
        "size": 825,
        "type": "class"
    },
    "kotlin.test.TeamcityAdapter$runSuite$lambda.<init>(TeamcityAdapter, String)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runSuite$lambda.invoke()": {
        "size": 273,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runSuite$lambda.this$0": {
        "size": 54,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$runSuite$lambda.$name": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$runSuite$lambda.<init>(TeamcityAdapter, String, Throwable)": {
        "size": 196,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runSuite$lambda.$e": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$runIgnoredSuite$lambda": {
        "size": 744,
        "type": "class"
    },
    "kotlin.test.TeamcityAdapter$runIgnoredSuite$lambda.<init>(TeamcityAdapter, String)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runIgnoredSuite$lambda.invoke()": {
        "size": 266,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$runIgnoredSuite$lambda.this$0": {
        "size": 54,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$runIgnoredSuite$lambda.$name": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$suite$lambda": {
        "size": 2336,
        "type": "class"
    },
    "kotlin.test.TeamcityAdapter$suite$lambda.<init>(TeamcityAdapter, String, Function0<Unit>)": {
        "size": 220,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$suite$lambda.invoke()": {
        "size": 1675,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$suite$lambda.this$0": {
        "size": 54,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$suite$lambda.$name": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$suite$lambda.$suiteFn": {
        "size": 56,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$test$lambda": {
        "size": 2159,
        "type": "class"
    },
    "kotlin.test.TeamcityAdapter$test$lambda.<init>(TeamcityAdapter, String)": {
        "size": 163,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$test$lambda.invoke()": {
        "size": 1510,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$test$lambda.this$0": {
        "size": 54,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$test$lambda.$name": {
        "size": 44,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter$test$lambda.<init>(TeamcityAdapter, String, Function0<Any?>)": {
        "size": 217,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter$test$lambda.$testFn": {
        "size": 55,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter": {
        "size": 42056,
        "type": "class"
    },
    "kotlin.test.TeamcityAdapter.<init>()": {
        "size": 478,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.scheduleNextTaskAfter": {
        "size": 52,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter.runOrScheduleNext(Function0<Unit>)": {
        "size": 708,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.runOrScheduleNextWithResult(Function0<Promise<JsAny?>?>)": {
        "size": 1038,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.tcEscape()": {
        "size": 3892,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.flowId": {
        "size": 45,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter.report(String)": {
        "size": 405,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.report(String, Throwable)": {
        "size": 1601,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.report(String, String)": {
        "size": 523,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter._testArguments": {
        "size": 52,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter.<get-testArguments>()": {
        "size": 1189,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.runSuite(String, Function0<Unit>)": {
        "size": 787,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.runIgnoredSuite(String, Function0<Unit>)": {
        "size": 430,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.isUnderIgnoredSuit": {
        "size": 40,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter.qualifiedName": {
        "size": 34,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter.className": {
        "size": 30,
        "type": "field"
    },
    "kotlin.test.TeamcityAdapter.suite(String, Boolean, Function0<Unit>)": {
        "size": 14666,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.test(String, Boolean, Function0<Any?>)": {
        "size": 14071,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "kotlin.test.TeamcityAdapter.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.test.nodeArguments()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.test.nodeArguments__externalAdapter()": {
        "size": 237,
        "type": "function"
    },
    "kotlin.test.d8Arguments()": {
        "size": 107,
        "type": "function"
    },
    "kotlin.test.d8Arguments__externalAdapter()": {
        "size": 233,
        "type": "function"
    },
    "kotlin.test.matched(String, Int, Int)": {
        "size": 2785,
        "type": "function"
    },
    "kotlin.test.matched$default(String, Int?, Int?, Int, Any?)": {
        "size": 797,
        "type": "function"
    },
    "kotlin.test.currentAdapter": {
        "size": 72,
        "type": "field"
    },
    "kotlin.test.startUnitTests()": {
        "size": 721,
        "type": "function"
    },
    "kotlin.test.test(String, Boolean, Function0<Any?>)": {
        "size": 201,
        "type": "function"
    },
    "kotlin.test.adapter()": {
        "size": 382,
        "type": "function"
    },
    "kotlin.test.isJasmine()": {
        "size": 116,
        "type": "function"
    },
    "kotlin.test.suite(String, Boolean, Function0<Unit>)": {
        "size": 206,
        "type": "function"
    },
    "kotlin.test.checkResultIsFailure(KClass<T>, String?, Result<Unit>)": {
        "size": 2085,
        "type": "function"
    },
    "kotlin.test.lookupAsserter()": {
        "size": 84,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest": {
        "size": 2139,
        "type": "class"
    },
    "test.text.harmony_regex.AllCodePointsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest.codePointToString(Int)": {
        "size": 216,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest.testImpl(String, Int)": {
        "size": 1379,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest.test1()": {
        "size": 83,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest.test2()": {
        "size": 89,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.AllCodePointsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest$allGroups$lambda": {
        "size": 3855,
        "type": "class"
    },
    "test.text.harmony_regex.FindAllTest$allGroups$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest$allGroups$lambda.invoke(MatchResult)": {
        "size": 3213,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest$allGroups$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest": {
        "size": 6593,
        "type": "class"
    },
    "test.text.harmony_regex.FindAllTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest.allGroups(String)": {
        "size": 314,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest.testLookBehind()": {
        "size": 2051,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest.testLookAheadBehind()": {
        "size": 3654,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.FindAllTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.Companion": {
        "size": 1004,
        "type": "class"
    },
    "test.text.harmony_regex.Companion.<init>()": {
        "size": 523,
        "type": "function"
    },
    "test.text.harmony_regex.Companion.quantifierMatchCount": {
        "size": 56,
        "type": "field"
    },
    "test.text.harmony_regex.Companion.compositeMin": {
        "size": 48,
        "type": "field"
    },
    "test.text.harmony_regex.Companion.compositeMax": {
        "size": 48,
        "type": "field"
    },
    "test.text.harmony_regex.Companion.input": {
        "size": 44,
        "type": "field"
    },
    "test.text.harmony_regex.Companion.inputDescription": {
        "size": 55,
        "type": "field"
    },
    "test.text.harmony_regex.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "test.text.harmony_regex.Companion_getInstance()": {
        "size": 171,
        "type": "function"
    },
    "test.text.harmony_regex.kt35508$regexTest(Regex, String)": {
        "size": 356,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest$kt35508$regexTest$lambda": {
        "size": 690,
        "type": "class"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest$kt35508$regexTest$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest$kt35508$regexTest$lambda.invoke(MatchResult)": {
        "size": 184,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest$kt35508$regexTest$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest": {
        "size": 21888,
        "type": "class"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.testMatches(Regex, String, String, Boolean)": {
        "size": 587,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.testMatches$default(Regex, String, String, Boolean?, Int, Any?)": {
        "size": 534,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.fixedLengthQualifierGreedy()": {
        "size": 5179,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.fixedLengthQualifierReluctant()": {
        "size": 5139,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.fixedLengthQualifierPossesive()": {
        "size": 5181,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.leafQuantifierGreedy()": {
        "size": 1132,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.kt46211_space()": {
        "size": 638,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.kt46211()": {
        "size": 297,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.kt53352()": {
        "size": 724,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.kt35508()": {
        "size": 1115,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.FixedLengthQuantifierTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.test2297$testMatches(String, String)": {
        "size": 396,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest": {
        "size": 52751,
        "type": "class"
    },
    "test.text.harmony_regex.MatchResultTest.<init>()": {
        "size": 890,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.assertTrue(String, Boolean)": {
        "size": 100,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.assertFalse(String, Boolean)": {
        "size": 102,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testPatterns": {
        "size": 40,
        "type": "field"
    },
    "test.text.harmony_regex.MatchResultTest.groupPatterns": {
        "size": 41,
        "type": "field"
    },
    "test.text.harmony_regex.MatchResultTest.testReplaceAll()": {
        "size": 337,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testReplaceFirst()": {
        "size": 345,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testGroupint()": {
        "size": 5836,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testGroup()": {
        "size": 2936,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testGroupPossessive()": {
        "size": 567,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testMatchesMisc()": {
        "size": 3655,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testMatchesQuantifiers()": {
        "size": 9492,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testQuantVsGroup()": {
        "size": 1925,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testFind()": {
        "size": 2250,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testSEOLsymbols()": {
        "size": 216,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testGroupCount()": {
        "size": 1386,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testReluctantQuantifiers()": {
        "size": 683,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testEnhancedFind()": {
        "size": 647,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testPosCompositeGroup()": {
        "size": 1971,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testPosAltGroup()": {
        "size": 1919,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testRelCompGroup()": {
        "size": 1615,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testRelAltGroup()": {
        "size": 1452,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testIgnoreCase()": {
        "size": 781,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testQuoteReplacement()": {
        "size": 235,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testOverFlow()": {
        "size": 3180,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testUnicode()": {
        "size": 624,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testUnicodeCategory()": {
        "size": 2371,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testSplitEmpty()": {
        "size": 668,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testFindDollar()": {
        "size": 820,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testPatternMatcher()": {
        "size": 194,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.test3360()": {
        "size": 242,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.testGeneralPunctuationCategory()": {
        "size": 1101,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.test2297()": {
        "size": 927,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.kt28158()": {
        "size": 440,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest2": {
        "size": 13555,
        "type": "class"
    },
    "test.text.harmony_regex.MatchResultTest2.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest2.testErrorConditions2()": {
        "size": 11809,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest2.testReplacementBackSlash()": {
        "size": 753,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest2.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest2.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.MatchResultTest2.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.ModeTest": {
        "size": 15559,
        "type": "class"
    },
    "test.text.harmony_regex.ModeTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.ModeTest.testCase()": {
        "size": 4214,
        "type": "function"
    },
    "test.text.harmony_regex.ModeTest.testMultiline()": {
        "size": 10276,
        "type": "function"
    },
    "test.text.harmony_regex.ModeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.ModeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.ModeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.PatternErrorTest": {
        "size": 801,
        "type": "class"
    },
    "test.text.harmony_regex.PatternErrorTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.PatternErrorTest.testCompileErrors()": {
        "size": 528,
        "type": "function"
    },
    "test.text.harmony_regex.PatternErrorTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.PatternErrorTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.PatternErrorTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.PatternSyntaxExceptionTest": {
        "size": 1462,
        "type": "class"
    },
    "test.text.harmony_regex.PatternSyntaxExceptionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.PatternSyntaxExceptionTest.testCase()": {
        "size": 555,
        "type": "function"
    },
    "test.text.harmony_regex.PatternSyntaxExceptionTest.testCase2()": {
        "size": 558,
        "type": "function"
    },
    "test.text.harmony_regex.PatternSyntaxExceptionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.PatternSyntaxExceptionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.PatternSyntaxExceptionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest": {
        "size": 133625,
        "type": "class"
    },
    "test.text.harmony_regex.PatternTest.<init>()": {
        "size": 694,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.assertTrue(String, Boolean)": {
        "size": 100,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.assertFalse(String, Boolean)": {
        "size": 102,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.asEscapeSeq()": {
        "size": 2453,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.assertMatch(Regex, String)": {
        "size": 404,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.assertNoMatch(Regex, String)": {
        "size": 411,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.assertFind(Regex, String, IntRange)": {
        "size": 734,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testPatterns": {
        "size": 40,
        "type": "field"
    },
    "test.text.harmony_regex.PatternTest.testCommentsInPattern()": {
        "size": 272,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testSplitCharSequenceint()": {
        "size": 6593,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFlags()": {
        "size": 4398,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.containsOnly(Array<out RegexOption>)": {
        "size": 287,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFlagsMethod()": {
        "size": 1874,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testCompileStringint()": {
        "size": 2500,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testQuantCompileNeg()": {
        "size": 1324,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testQuantCompilePos()": {
        "size": 710,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testQuantComposition()": {
        "size": 1234,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testTimeZoneIssue()": {
        "size": 1547,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testCompileRanges()": {
        "size": 3069,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testRangesSpecialCases()": {
        "size": 2477,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testZeroSymbols()": {
        "size": 224,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testEscapes()": {
        "size": 211,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testRegressions()": {
        "size": 2807,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testOrphanQuantifiers()": {
        "size": 546,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testOrphanQuantifiers2()": {
        "size": 547,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testBug197()": {
        "size": 4116,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testURIPatterns()": {
        "size": 966,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFindBoundaryCases1()": {
        "size": 740,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFindBoundaryCases2()": {
        "size": 738,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFindBoundaryCases3()": {
        "size": 742,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFindBoundaryCases4()": {
        "size": 737,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFindBoundaryCases5()": {
        "size": 934,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFindBoundaryCases6()": {
        "size": 900,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testBackReferences()": {
        "size": 1845,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testNewLine()": {
        "size": 808,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFindGreedy()": {
        "size": 793,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testSOLQuant()": {
        "size": 802,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testIllegalEscape()": {
        "size": 540,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testEmptyFamily()": {
        "size": 89,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testNonCaptConstr()": {
        "size": 6102,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testCompilePatternWithTerminatorMark()": {
        "size": 251,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testAlternations()": {
        "size": 2519,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testMatchWithGroups()": {
        "size": 680,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testSplitEmptyCharSequence()": {
        "size": 610,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testSplitEndsWithPattern()": {
        "size": 2271,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testCaseInsensitiveFlag()": {
        "size": 193,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testEmptyGroups()": {
        "size": 548,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testCompileNonCaptGroup()": {
        "size": 1441,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testEmbeddedFlags()": {
        "size": 1213,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testAltWithFlags()": {
        "size": 91,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testRestoreFlagsAfterGroup()": {
        "size": 309,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testCanonEqFlag()": {
        "size": 7378,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testIndexesCanonicalEq()": {
        "size": 3296,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testCanonEqFlagWithSupplementaryCharacters()": {
        "size": 1898,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testRangesWithSurrogatesSupplementary()": {
        "size": 2708,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testSequencesWithSurrogatesSupplementary()": {
        "size": 1405,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testPredefinedClassesWithSurrogatesSupplementary()": {
        "size": 3281,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testDotConstructionWithSurrogatesSupplementary()": {
        "size": 1522,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testQuantifiersWithSurrogatesSupplementary()": {
        "size": 499,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testAlternationsWithSurrogatesSupplementary()": {
        "size": 821,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testGroupsWithSurrogatesSupplementary()": {
        "size": 610,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testFailedFindDotQuantifier()": {
        "size": 363,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testVerticalWhitespaceChar()": {
        "size": 13537,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testHorizontalWhitespaceChar()": {
        "size": 14531,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.testUnicodeLinebreakChar()": {
        "size": 9111,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.UBInfo": {
        "size": 440,
        "type": "class"
    },
    "test.text.harmony_regex.UBInfo.<init>(Int, Int, String)": {
        "size": 170,
        "type": "function"
    },
    "test.text.harmony_regex.UBInfo.low": {
        "size": 21,
        "type": "field"
    },
    "test.text.harmony_regex.UBInfo.high": {
        "size": 22,
        "type": "field"
    },
    "test.text.harmony_regex.UBInfo.name": {
        "size": 25,
        "type": "field"
    },
    "test.text.harmony_regex.UBInfo.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.UBInfo.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.UBInfo.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2": {
        "size": 100499,
        "type": "class"
    },
    "test.text.harmony_regex.PatternTest2.<init>()": {
        "size": 5085,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.assertFalse(String, Boolean)": {
        "size": 102,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testSimpleMatch()": {
        "size": 2169,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCursors()": {
        "size": 8838,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testGroups()": {
        "size": 13889,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testReplace()": {
        "size": 2463,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testEscapes()": {
        "size": 22721,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCharacterClasses()": {
        "size": 13491,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testPOSIXGroups()": {
        "size": 7028,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testUnicodeCategories()": {
        "size": 39,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testUnicodeBlocks()": {
        "size": 4584,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCapturingGroups()": {
        "size": 37,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testRepeats()": {
        "size": 29,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testAnchors()": {
        "size": 29,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testMisc()": {
        "size": 2367,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCompile1()": {
        "size": 276,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCompile2()": {
        "size": 371,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCompile3()": {
        "size": 10011,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCompile4()": {
        "size": 1270,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.testCompile5()": {
        "size": 667,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.UBlocks": {
        "size": 53,
        "type": "field"
    },
    "test.text.harmony_regex.PatternTest2.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest2.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3": {
        "size": 28891,
        "type": "class"
    },
    "test.text.harmony_regex.PatternTest3.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3.escapeStringInCommentsMode()": {
        "size": 5062,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3.specialConstructsInCommentsMode()": {
        "size": 12259,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3.matchNamedGroupInCommentsMode()": {
        "size": 4533,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3.matchBackReferenceInCommentsMode()": {
        "size": 5276,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.PatternTest3.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.ReplaceTest": {
        "size": 4418,
        "type": "class"
    },
    "test.text.harmony_regex.ReplaceTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.ReplaceTest.testSimpleReplace()": {
        "size": 599,
        "type": "function"
    },
    "test.text.harmony_regex.ReplaceTest.testCaptureReplace()": {
        "size": 1406,
        "type": "function"
    },
    "test.text.harmony_regex.ReplaceTest.testEscapeReplace()": {
        "size": 1919,
        "type": "function"
    },
    "test.text.harmony_regex.ReplaceTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.ReplaceTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.ReplaceTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest": {
        "size": 16634,
        "type": "class"
    },
    "test.text.harmony_regex.SplitTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest.testSimple()": {
        "size": 1441,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest.testSplit1()": {
        "size": 10424,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest.testSplit2()": {
        "size": 2686,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest.testSplitSupplementaryWithEmptyString()": {
        "size": 1237,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.harmony_regex.SplitTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.HandlingOption_MATCH_NOTHING_instance": {
        "size": 78,
        "type": "field"
    },
    "test.HandlingOption_THROW_instance": {
        "size": 70,
        "type": "field"
    },
    "test.HandlingOption_IGNORE_BACK_REFERENCE_EXPRESSION_instance": {
        "size": 97,
        "type": "field"
    },
    "test.HandlingOption_entriesInitialized": {
        "size": 74,
        "type": "field"
    },
    "test.HandlingOption_initEntries()": {
        "size": 466,
        "type": "function"
    },
    "test.HandlingOption": {
        "size": 440,
        "type": "class"
    },
    "test.HandlingOption.<init>(String, Int)": {
        "size": 148,
        "type": "function"
    },
    "test.HandlingOption.compareTo(HandlingOption)": {
        "size": 72,
        "type": "function"
    },
    "test.HandlingOption.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.HandlingOption.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.HandlingOption.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.HandlingOption_MATCH_NOTHING_getInstance()": {
        "size": 147,
        "type": "function"
    },
    "test.HandlingOption_THROW_getInstance()": {
        "size": 131,
        "type": "function"
    },
    "test.HandlingOption_IGNORE_BACK_REFERENCE_EXPRESSION_getInstance()": {
        "size": 185,
        "type": "function"
    },
    "test.autoCloseable.Resource": {
        "size": 1127,
        "type": "class"
    },
    "test.autoCloseable.Resource.<init>(Boolean)": {
        "size": 154,
        "type": "function"
    },
    "test.autoCloseable.Resource.<init>(Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 424,
        "type": "function"
    },
    "test.autoCloseable.Resource.faultyClose": {
        "size": 51,
        "type": "field"
    },
    "test.autoCloseable.Resource.isClosed": {
        "size": 30,
        "type": "field"
    },
    "test.autoCloseable.Resource.close()": {
        "size": 228,
        "type": "function"
    },
    "test.autoCloseable.Resource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.autoCloseable.Resource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.autoCloseable.Resource.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.autoCloseable.ResourceCloseException": {
        "size": 478,
        "type": "class"
    },
    "test.autoCloseable.ResourceCloseException.<init>(String)": {
        "size": 105,
        "type": "function"
    },
    "test.autoCloseable.ResourceCloseException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "test.autoCloseable.ResourceCloseException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "test.autoCloseable.ResourceCloseException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "test.autoCloseable.ResourceCloseException.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.autoCloseable.ResourceCloseException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.autoCloseable.ResourceCloseException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.autoCloseable.nonLocalReturnInBlock$operation(Boolean)": {
        "size": 1975,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest": {
        "size": 39600,
        "type": "class"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.success()": {
        "size": 1750,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.closeFails()": {
        "size": 4029,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.opFailsCloseSuccess()": {
        "size": 4567,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.opFailsCloseFails()": {
        "size": 4554,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.opFailsCloseFailsTwice()": {
        "size": 8981,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.nonLocalReturnInBlock()": {
        "size": 1693,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.nullableResourceSuccess()": {
        "size": 1607,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.nullableResourceOpFails()": {
        "size": 6072,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.contractCallsInPlace()": {
        "size": 4166,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.autoCloseable.UseAutoCloseableResourceTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection": {
        "size": 1098,
        "type": "class"
    },
    "test.collections.ReadOnlyCollection.<init>()": {
        "size": 201,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.ReadOnlyCollection.<get-size>()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.iterator()": {
        "size": 185,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.contains(String)": {
        "size": 69,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.containsAll(Collection<String>)": {
        "size": 76,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.toArray()": {
        "size": 84,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ReadOnlyCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ReadOnlySet": {
        "size": 1063,
        "type": "class"
    },
    "test.collections.ReadOnlySet.<init>()": {
        "size": 194,
        "type": "function"
    },
    "test.collections.ReadOnlySet.data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.ReadOnlySet.<get-size>()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ReadOnlySet.iterator()": {
        "size": 171,
        "type": "function"
    },
    "test.collections.ReadOnlySet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ReadOnlySet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ReadOnlySet.contains(String)": {
        "size": 69,
        "type": "function"
    },
    "test.collections.ReadOnlySet.containsAll(Collection<String>)": {
        "size": 76,
        "type": "function"
    },
    "test.collections.ReadOnlySet.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlySet.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlySet.toArray()": {
        "size": 84,
        "type": "function"
    },
    "test.collections.ReadOnlySet.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "test.collections.ReadOnlyList": {
        "size": 2706,
        "type": "class"
    },
    "test.collections.ReadOnlyList.<init>(Int)": {
        "size": 117,
        "type": "function"
    },
    "test.collections.ReadOnlyList.<get-size>()": {
        "size": 142,
        "type": "function"
    },
    "test.collections.ReadOnlyList.size": {
        "size": 40,
        "type": "field"
    },
    "test.collections.ReadOnlyList.get(Int)": {
        "size": 1245,
        "type": "function"
    },
    "test.collections.ReadOnlyList.iterator()": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ReadOnlyList.indexOf(String)": {
        "size": 55,
        "type": "function"
    },
    "test.collections.ReadOnlyList.lastIndexOf(String)": {
        "size": 59,
        "type": "function"
    },
    "test.collections.ReadOnlyList.listIterator()": {
        "size": 62,
        "type": "function"
    },
    "test.collections.ReadOnlyList.listIterator(Int)": {
        "size": 72,
        "type": "function"
    },
    "test.collections.ReadOnlyList.subList(Int, Int)": {
        "size": 77,
        "type": "function"
    },
    "test.collections.ReadOnlyList.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ReadOnlyList.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ReadOnlyList.contains(String)": {
        "size": 69,
        "type": "function"
    },
    "test.collections.ReadOnlyList.containsAll(Collection<String>)": {
        "size": 76,
        "type": "function"
    },
    "test.collections.ReadOnlyList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlyList.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlyList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "test.collections.ReadOnlyList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "test.collections.ReadOnlyMap": {
        "size": 1191,
        "type": "class"
    },
    "test.collections.ReadOnlyMap.<init>()": {
        "size": 265,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.<get-entries>()": {
        "size": 166,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.entries": {
        "size": 63,
        "type": "field"
    },
    "test.collections.ReadOnlyMap.containsKey(String)": {
        "size": 59,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.containsValue(Int)": {
        "size": 60,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.containsEntry(Entry<*, *>?)": {
        "size": 78,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.get(String)": {
        "size": 57,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.<get-size>()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.<get-keys>()": {
        "size": 51,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReadOnlyMap.<get-values>()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.MutColl": {
        "size": 2727,
        "type": "class"
    },
    "test.collections.MutColl.<init>(MutableCollection<String>)": {
        "size": 161,
        "type": "function"
    },
    "test.collections.MutColl.<init>(MutableCollection<String>?, Int, DefaultConstructorMarker?)": {
        "size": 448,
        "type": "function"
    },
    "test.collections.MutColl.storage": {
        "size": 65,
        "type": "field"
    },
    "test.collections.MutColl.<get-size>()": {
        "size": 212,
        "type": "function"
    },
    "test.collections.MutColl.iterator()": {
        "size": 237,
        "type": "function"
    },
    "test.collections.MutColl.add(String)": {
        "size": 234,
        "type": "function"
    },
    "test.collections.MutColl.add(E)": {
        "size": 287,
        "type": "function"
    },
    "test.collections.MutColl.addAll(Collection<String>)": {
        "size": 71,
        "type": "function"
    },
    "test.collections.MutColl.remove(String)": {
        "size": 58,
        "type": "function"
    },
    "test.collections.MutColl.removeAll(Collection<String>)": {
        "size": 74,
        "type": "function"
    },
    "test.collections.MutColl.retainAll(Collection<String>)": {
        "size": 74,
        "type": "function"
    },
    "test.collections.MutColl.clear()": {
        "size": 33,
        "type": "function"
    },
    "test.collections.MutColl.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutColl.contains(String)": {
        "size": 69,
        "type": "function"
    },
    "test.collections.MutColl.containsAll(Collection<String>)": {
        "size": 76,
        "type": "function"
    },
    "test.collections.MutColl.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.MutColl.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.MutColl.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutColl.toArray()": {
        "size": 84,
        "type": "function"
    },
    "test.collections.MutColl.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "test.collections.MutList": {
        "size": 4405,
        "type": "class"
    },
    "test.collections.MutList.<init>(MutableList<String>)": {
        "size": 149,
        "type": "function"
    },
    "test.collections.MutList.<init>(MutableList<String>?, Int, DefaultConstructorMarker?)": {
        "size": 442,
        "type": "function"
    },
    "test.collections.MutList.storage": {
        "size": 59,
        "type": "field"
    },
    "test.collections.MutList.<get-size>()": {
        "size": 206,
        "type": "function"
    },
    "test.collections.MutList.get(Int)": {
        "size": 259,
        "type": "function"
    },
    "test.collections.MutList.add(Int, String)": {
        "size": 246,
        "type": "function"
    },
    "test.collections.MutList.add(Int, E)": {
        "size": 305,
        "type": "function"
    },
    "test.collections.MutList.removeAt(Int)": {
        "size": 260,
        "type": "function"
    },
    "test.collections.MutList.set(Int, String)": {
        "size": 295,
        "type": "function"
    },
    "test.collections.MutList.set(Int, E)": {
        "size": 317,
        "type": "function"
    },
    "test.collections.MutList.add(String)": {
        "size": 55,
        "type": "function"
    },
    "test.collections.MutList.addAll(Int, Collection<String>)": {
        "size": 83,
        "type": "function"
    },
    "test.collections.MutList.addAll(Collection<String>)": {
        "size": 71,
        "type": "function"
    },
    "test.collections.MutList.clear()": {
        "size": 33,
        "type": "function"
    },
    "test.collections.MutList.removeAll(Collection<String>)": {
        "size": 74,
        "type": "function"
    },
    "test.collections.MutList.retainAll(Collection<String>)": {
        "size": 74,
        "type": "function"
    },
    "test.collections.MutList.iterator()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.MutList.contains(String)": {
        "size": 69,
        "type": "function"
    },
    "test.collections.MutList.indexOf(String)": {
        "size": 55,
        "type": "function"
    },
    "test.collections.MutList.lastIndexOf(String)": {
        "size": 59,
        "type": "function"
    },
    "test.collections.MutList.listIterator()": {
        "size": 69,
        "type": "function"
    },
    "test.collections.MutList.listIterator(Int)": {
        "size": 79,
        "type": "function"
    },
    "test.collections.MutList.subList(Int, Int)": {
        "size": 84,
        "type": "function"
    },
    "test.collections.MutList.removeRange(Int, Int)": {
        "size": 77,
        "type": "function"
    },
    "test.collections.MutList.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.MutList.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.MutList.remove(String)": {
        "size": 58,
        "type": "function"
    },
    "test.collections.MutList.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutList.containsAll(Collection<String>)": {
        "size": 76,
        "type": "function"
    },
    "test.collections.MutList.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutList.toArray()": {
        "size": 84,
        "type": "function"
    },
    "test.collections.MutList.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "test.collections.MutSet": {
        "size": 2661,
        "type": "class"
    },
    "test.collections.MutSet.<init>(MutableSet<String>)": {
        "size": 147,
        "type": "function"
    },
    "test.collections.MutSet.<init>(MutableSet<String>?, Int, DefaultConstructorMarker?)": {
        "size": 438,
        "type": "function"
    },
    "test.collections.MutSet.storage": {
        "size": 58,
        "type": "field"
    },
    "test.collections.MutSet.<get-size>()": {
        "size": 203,
        "type": "function"
    },
    "test.collections.MutSet.iterator()": {
        "size": 228,
        "type": "function"
    },
    "test.collections.MutSet.add(String)": {
        "size": 225,
        "type": "function"
    },
    "test.collections.MutSet.add(E)": {
        "size": 287,
        "type": "function"
    },
    "test.collections.MutSet.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.MutSet.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.MutSet.addAll(Collection<String>)": {
        "size": 71,
        "type": "function"
    },
    "test.collections.MutSet.remove(String)": {
        "size": 58,
        "type": "function"
    },
    "test.collections.MutSet.removeAll(Collection<String>)": {
        "size": 74,
        "type": "function"
    },
    "test.collections.MutSet.retainAll(Collection<String>)": {
        "size": 74,
        "type": "function"
    },
    "test.collections.MutSet.clear()": {
        "size": 33,
        "type": "function"
    },
    "test.collections.MutSet.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutSet.contains(String)": {
        "size": 69,
        "type": "function"
    },
    "test.collections.MutSet.containsAll(Collection<String>)": {
        "size": 76,
        "type": "function"
    },
    "test.collections.MutSet.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutSet.toArray()": {
        "size": 84,
        "type": "function"
    },
    "test.collections.MutSet.toArray(Array<T>)": {
        "size": 81,
        "type": "function"
    },
    "test.collections.MutMap": {
        "size": 2726,
        "type": "class"
    },
    "test.collections.MutMap.<init>(MutableMap<String, Int>)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.MutMap.<init>(MutableMap<String, Int>?, Int, DefaultConstructorMarker?)": {
        "size": 448,
        "type": "function"
    },
    "test.collections.MutMap.storage": {
        "size": 63,
        "type": "field"
    },
    "test.collections.MutMap.put(String, Int)": {
        "size": 298,
        "type": "function"
    },
    "test.collections.MutMap.put(K, V)": {
        "size": 481,
        "type": "function"
    },
    "test.collections.MutMap.<get-entries>()": {
        "size": 248,
        "type": "function"
    },
    "test.collections.MutMap.putAll(Map<out String, Int>)": {
        "size": 60,
        "type": "function"
    },
    "test.collections.MutMap.remove(String)": {
        "size": 51,
        "type": "function"
    },
    "test.collections.MutMap.clear()": {
        "size": 33,
        "type": "function"
    },
    "test.collections.MutMap.<get-keys>()": {
        "size": 58,
        "type": "function"
    },
    "test.collections.MutMap.<get-values>()": {
        "size": 64,
        "type": "function"
    },
    "test.collections.MutMap.containsKey(String)": {
        "size": 59,
        "type": "function"
    },
    "test.collections.MutMap.containsValue(Int)": {
        "size": 60,
        "type": "function"
    },
    "test.collections.MutMap.containsEntry(Entry<*, *>?)": {
        "size": 78,
        "type": "function"
    },
    "test.collections.MutMap.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.MutMap.get(String)": {
        "size": 57,
        "type": "function"
    },
    "test.collections.MutMap.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.MutMap.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutMap.<get-size>()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.MutMap.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractCollection$lambda": {
        "size": 855,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractCollection$lambda.invoke(CompareContext<Collection<String>>)": {
        "size": 208,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractCollection$lambda.invoke(P1)": {
        "size": 380,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractSet$lambda": {
        "size": 813,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractSet$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractSet$lambda.invoke(CompareContext<Set<String>>)": {
        "size": 194,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractSet$lambda.invoke(P1)": {
        "size": 366,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractList$lambda": {
        "size": 737,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractList$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractList$lambda.invoke(CompareContext<List<String>>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractList$lambda.invoke(P1)": {
        "size": 368,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMap$lambda": {
        "size": 756,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractMap$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMap$lambda.invoke(CompareContext<Map<String, Int>>)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMap$lambda.invoke(P1)": {
        "size": 376,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableCollection$lambda": {
        "size": 890,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableCollection$lambda.invoke(String)": {
        "size": 101,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableCollection$lambda.invoke(P1)": {
        "size": 394,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableCollection$lambda.invoke(CompareContext<MutableCollection<String>>)": {
        "size": 215,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableList$lambda": {
        "size": 772,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableList$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableList$lambda.invoke(String)": {
        "size": 101,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableList$lambda.invoke(P1)": {
        "size": 382,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableList$lambda.invoke(CompareContext<MutableList<String>>)": {
        "size": 125,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableSet$lambda": {
        "size": 848,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableSet$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableSet$lambda.invoke(String)": {
        "size": 101,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableSet$lambda.invoke(P1)": {
        "size": 380,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableSet$lambda.invoke(CompareContext<MutableSet<String>>)": {
        "size": 201,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableMap$lambda": {
        "size": 791,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableMap$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableMap$lambda.invoke(String)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableMap$lambda.invoke(P1)": {
        "size": 390,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest$abstractMutableMap$lambda.invoke(CompareContext<MutableMap<String, Int>>)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest": {
        "size": 11538,
        "type": "class"
    },
    "test.collections.AbstractCollectionsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractCollection()": {
        "size": 459,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractSet()": {
        "size": 558,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractList()": {
        "size": 441,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractMap()": {
        "size": 1293,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractMutableCollection()": {
        "size": 1102,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractMutableList()": {
        "size": 3307,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractMutableSet()": {
        "size": 955,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.abstractMutableMap()": {
        "size": 2573,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.AbstractCollectionsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.AbstractListTest": {
        "size": 7093,
        "type": "class"
    },
    "test.collections.AbstractListTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.AbstractListTest.newCapacity()": {
        "size": 6508,
        "type": "function"
    },
    "test.collections.AbstractListTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.AbstractListTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.AbstractListTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda": {
        "size": 2423,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.<init>(Int, Int, Int, Int, Int, MutableList<Int>)": {
        "size": 383,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.invoke(Int, Array<Any?>)": {
        "size": 938,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.invoke(P1, P2)": {
        "size": 549,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.$expectedHead": {
        "size": 49,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.$bufferSize": {
        "size": 47,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.$head": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.$tail": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.$index": {
        "size": 42,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insert$lambda$lambda.$expectedElements": {
        "size": 66,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda": {
        "size": 2429,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.<init>(Int, Int, Int, Int, Int, MutableList<Int>)": {
        "size": 383,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.invoke(Int, Array<Any?>)": {
        "size": 942,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.invoke(P1, P2)": {
        "size": 549,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.$expectedHead": {
        "size": 49,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.$bufferSize": {
        "size": 47,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.$head": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.$tail": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.$index": {
        "size": 42,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda$lambda.$expectedElements": {
        "size": 66,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda": {
        "size": 2432,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.<init>(Int, Int, Int, Int, Int, MutableList<Int>)": {
        "size": 383,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.invoke(Int, Array<Any?>)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.invoke(P1, P2)": {
        "size": 549,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.$expectedHead": {
        "size": 49,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.$bufferSize": {
        "size": 47,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.$head": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.$tail": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.$index": {
        "size": 42,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda$lambda.$expectedElements": {
        "size": 66,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda$lambda": {
        "size": 785,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda$lambda.invoke(CompareContext<ListIterator<Int>>)": {
        "size": 128,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda$lambda.invoke(P1)": {
        "size": 392,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda$lambda.invoke(CompareContext<MutableListIterator<Int>>)": {
        "size": 132,
        "type": "function"
    },
    "test.collections.toArray$testContentEquals(ArrayDeque<Int>, Array<Int>)": {
        "size": 2573,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$clear$lambda": {
        "size": 2286,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$clear$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$clear$lambda.invoke(Int, Int, Int, Int)": {
        "size": 923,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$clear$lambda.invoke(P1, P2, P3, P4)": {
        "size": 958,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$clear$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$iterator$lambda": {
        "size": 729,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$iterator$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$iterator$lambda.invoke(CompareContext<Iterator<Int>>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$iterator$lambda.invoke(P1)": {
        "size": 370,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda": {
        "size": 5147,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$insert$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda.invoke(Int, Int, Int, Int)": {
        "size": 3663,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda.invoke(P1, P2, P3, P4)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insert$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda": {
        "size": 4183,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda.invoke(Int, Int, Int, Int)": {
        "size": 2737,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda.invoke(P1, P2, P3, P4)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAt$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda": {
        "size": 9314,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda.invoke(Int, Int, Int, Int)": {
        "size": 7699,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda.invoke(P1, P2, P3, P4)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$insertAll$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda": {
        "size": 10616,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda.invoke(Int, Int, Int, Int)": {
        "size": 8898,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda.invoke(P1, P2, P3, P4)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$listIterator$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$removeAll$lambda": {
        "size": 5698,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$removeAll$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAll$lambda.invoke(Int, Int, Int, Int)": {
        "size": 4169,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAll$lambda.invoke(P1, P2, P3, P4)": {
        "size": 958,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$removeAll$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$retainAll$lambda": {
        "size": 3965,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$retainAll$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$retainAll$lambda.invoke(Int, Int, Int, Int)": {
        "size": 2502,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$retainAll$lambda.invoke(P1, P2, P3, P4)": {
        "size": 958,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$retainAll$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$set$lambda": {
        "size": 2779,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$set$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$set$lambda.invoke(Int, Int, Int, Int)": {
        "size": 1424,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$set$lambda.invoke(P1, P2, P3, P4)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$set$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$get$lambda": {
        "size": 2627,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$get$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$get$lambda.invoke(Int, Int, Int, Int)": {
        "size": 1276,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$get$lambda.invoke(P1, P2, P3, P4)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$get$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$subList$lambda": {
        "size": 3315,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$subList$lambda.<init>(ArrayDequeTest)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$subList$lambda.invoke(Int, Int, Int, Int)": {
        "size": 1922,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$subList$lambda.invoke(P1, P2, P3, P4)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$subList$lambda.this$0": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArrayDequeTest$toArray$lambda": {
        "size": 1100,
        "type": "class"
    },
    "test.collections.ArrayDequeTest$toArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$toArray$lambda.invoke(Int, Array<Any?>)": {
        "size": 262,
        "type": "function"
    },
    "test.collections.ArrayDequeTest$toArray$lambda.invoke(P1, P2)": {
        "size": 552,
        "type": "function"
    },
    "test.collections.ArrayDequeTest": {
        "size": 71927,
        "type": "class"
    },
    "test.collections.ArrayDequeTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.arrayDequeInit()": {
        "size": 3260,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.size()": {
        "size": 3229,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.contains()": {
        "size": 4406,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.clear()": {
        "size": 155,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.removeElement()": {
        "size": 1667,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.iterator()": {
        "size": 1113,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.first()": {
        "size": 5043,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.firstOrNull()": {
        "size": 1233,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.last()": {
        "size": 5035,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.lastOrNull()": {
        "size": 1225,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.addFirst()": {
        "size": 3434,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.addLast()": {
        "size": 3413,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.removeFirst()": {
        "size": 5268,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.removeFirstOrNull()": {
        "size": 1438,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.removeLast()": {
        "size": 5261,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.removeLastOrNull()": {
        "size": 1431,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.bufferExpansion()": {
        "size": 2467,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.generateArrayDeque(Int, Int, Int?)": {
        "size": 4450,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.generateArrayDeque$default(Int, Int, Int?, Int, Any?)": {
        "size": 419,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.testArrayDeque(Function4<@ParameterName(name = \"bufferSize\") Int, @ParameterName(name = \"dequeSize\") Int, @ParameterName(name = \"head\") Int, @ParameterName(name = \"tail\") Int, Unit>)": {
        "size": 2290,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.insert()": {
        "size": 157,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.removeAt()": {
        "size": 161,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.indexOf()": {
        "size": 3690,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.addAll()": {
        "size": 4164,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.insertAll()": {
        "size": 163,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.listIterator()": {
        "size": 169,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.removeAll()": {
        "size": 163,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.retainAll()": {
        "size": 163,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.set()": {
        "size": 151,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.get()": {
        "size": 151,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.subList()": {
        "size": 159,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.toArray()": {
        "size": 2896,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArrayDequeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(Array<out T>, Array<out T>, String)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(Array<out T>, Array<out T>, String?, Int, Any?)": {
        "size": 452,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(IntArray, IntArray, String)": {
        "size": 274,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(IntArray, IntArray, String?, Int, Any?)": {
        "size": 430,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(LongArray, LongArray, String)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(LongArray, LongArray, String?, Int, Any?)": {
        "size": 432,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(ShortArray, ShortArray, String)": {
        "size": 278,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(ShortArray, ShortArray, String?, Int, Any?)": {
        "size": 434,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(ByteArray, ByteArray, String)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(ByteArray, ByteArray, String?, Int, Any?)": {
        "size": 432,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(DoubleArray, DoubleArray, String)": {
        "size": 280,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(DoubleArray, DoubleArray, String?, Int, Any?)": {
        "size": 436,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(FloatArray, FloatArray, String)": {
        "size": 278,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(FloatArray, FloatArray, String?, Int, Any?)": {
        "size": 434,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(CharArray, CharArray, String)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(CharArray, CharArray, String?, Int, Any?)": {
        "size": 432,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals(BooleanArray, BooleanArray, String)": {
        "size": 282,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$default(BooleanArray, BooleanArray, String?, Int, Any?)": {
        "size": 438,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda$lambda": {
        "size": 1013,
        "type": "class"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda$lambda.<init>(T)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda$lambda.invoke(List<T>)": {
        "size": 343,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda$lambda.invoke(P1)": {
        "size": 326,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda$lambda.$element": {
        "size": 42,
        "type": "field"
    },
    "test.collections.Value": {
        "size": 1464,
        "type": "class"
    },
    "test.collections.Value.<init>(Int)": {
        "size": 103,
        "type": "function"
    },
    "test.collections.Value.value": {
        "size": 41,
        "type": "field"
    },
    "test.collections.Value.hashCode()": {
        "size": 127,
        "type": "function"
    },
    "test.collections.Value.toString()": {
        "size": 327,
        "type": "function"
    },
    "test.collections.Value.equals(Any?)": {
        "size": 746,
        "type": "function"
    },
    "test.collections.Text": {
        "size": 2264,
        "type": "class"
    },
    "test.collections.Text.<init>(String)": {
        "size": 103,
        "type": "function"
    },
    "test.collections.Text.data": {
        "size": 43,
        "type": "field"
    },
    "test.collections.Text.compareTo(Text)": {
        "size": 439,
        "type": "function"
    },
    "test.collections.Text.compareTo(T)": {
        "size": 290,
        "type": "function"
    },
    "test.collections.Text.toString()": {
        "size": 322,
        "type": "function"
    },
    "test.collections.Text.hashCode()": {
        "size": 135,
        "type": "function"
    },
    "test.collections.Text.equals(Any?)": {
        "size": 732,
        "type": "function"
    },
    "test.collections.OperationOnRange": {
        "size": 677,
        "type": "class"
    },
    "test.collections.OperationOnRange.<init>(E, Int, Int, R)": {
        "size": 264,
        "type": "function"
    },
    "test.collections.OperationOnRange.element": {
        "size": 41,
        "type": "field"
    },
    "test.collections.OperationOnRange.fromIndex": {
        "size": 45,
        "type": "field"
    },
    "test.collections.OperationOnRange.toIndex": {
        "size": 43,
        "type": "field"
    },
    "test.collections.OperationOnRange.expectedResult": {
        "size": 48,
        "type": "field"
    },
    "test.collections.OperationOnRange.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.OperationOnRange.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.OperationOnRange.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.sam$kotlin_Comparator$0": {
        "size": 721,
        "type": "class"
    },
    "test.collections.sam$kotlin_Comparator$0.function": {
        "size": 61,
        "type": "field"
    },
    "test.collections.sam$kotlin_Comparator$0.<init>(Function2<P1, P2, R>)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.sam$kotlin_Comparator$0.compare(T, T)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.sam$kotlin_Comparator$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.sam$kotlin_Comparator$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.sam$kotlin_Comparator$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.contentEquals$checkArray(T, @ExtensionFunctionType Function1<T, T>, @ExtensionFunctionType Function1<T, List<*>>, Function2<T, T, Boolean>, @ExtensionFunctionType Function1<T, Unit>)": {
        "size": 1723,
        "type": "function"
    },
    "test.collections.plusVararg$stringOnePlus(Array<out String>)": {
        "size": 194,
        "type": "function"
    },
    "test.collections.plusVararg$longOnePlus(LongArray)": {
        "size": 177,
        "type": "function"
    },
    "test.collections.plusVararg$intOnePlus(IntArray)": {
        "size": 173,
        "type": "function"
    },
    "test.collections.iterators$checkContract(T, @ExtensionFunctionType Function1<T, List<E>>, @ExtensionFunctionType Function1<T, Iterator<E>>)": {
        "size": 520,
        "type": "function"
    },
    "test.collections.asListInFloatingPrimitiveArrays$testTotalOrder(List<T>, List<T>, T)": {
        "size": 329,
        "type": "function"
    },
    "test.collections.copyRangeInto$doTest(@ExtensionFunctionType Function5<T, T, Int, Int, Int, T>, Function3<T, T, String, Unit>, @ExtensionFunctionType Function1<T, String>, T, T, T, T, T)": {
        "size": 8449,
        "type": "function"
    },
    "test.collections.reverseInPlace$doTest$0(@ExtensionFunctionType Function1<Iterable<Int>, TArray>, @ExtensionFunctionType Function1<TArray, Unit>, @ExtensionFunctionType Function1<TArray, List<T>>)": {
        "size": 1992,
        "type": "function"
    },
    "test.collections.reverseRangeInPlace$doTest$1(@ExtensionFunctionType Function1<Iterable<Int>, TArray>, @ExtensionFunctionType Function3<TArray, @ParameterName(name = \"fromIndex\") Int, @ParameterName(name = \"toIndex\") Int, Unit>, @ExtensionFunctionType Function1<TArray, List<T>>)": {
        "size": 11894,
        "type": "function"
    },
    "test.collections.sortRange$doTest$2(@ExtensionFunctionType Function1<Iterable<Int>, TArray>, @ExtensionFunctionType Function3<TArray, @ParameterName(name = \"fromIndex\") Int, @ParameterName(name = \"toIndex\") Int, Unit>, @ExtensionFunctionType Function1<TArray, List<T>>)": {
        "size": 11924,
        "type": "function"
    },
    "test.collections.sortDescendingRangeInPlace$doTest$3(@ExtensionFunctionType Function1<Iterable<Int>, TArray>, @ExtensionFunctionType Function3<TArray, @ParameterName(name = \"fromIndex\") Int, @ParameterName(name = \"toIndex\") Int, Unit>, @ExtensionFunctionType Function1<TArray, List<T>>)": {
        "size": 11988,
        "type": "function"
    },
    "test.collections.sortedTests$arrayData(Array<out T>, @ExtensionFunctionType Function1<Array<out T>, A>)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.sortedNullableBy$nullIfEmpty()": {
        "size": 246,
        "type": "function"
    },
    "test.collections.sortedWith$arrayData$4(A, Comparator<T>)": {
        "size": 198,
        "type": "function"
    },
    "test.collections.testStableSort$checkEqualsButNotSame(Array<Text>)": {
        "size": 1905,
        "type": "function"
    },
    "test.collections.fill$testFailures(A, @ExtensionFunctionType Function4<A, E, Int, Int, Unit>, E, Int)": {
        "size": 6572,
        "type": "function"
    },
    "test.collections.fill$test(IntArray, @ExtensionFunctionType Function4<A, E, Int, Int, Unit>, List<OperationOnRange<Int, IntArray>>, @ExtensionFunctionType Function1<IntArray, A>, @ExtensionFunctionType Function1<Int, E>, @ExtensionFunctionType Function2<A, A, Boolean>)": {
        "size": 1319,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda": {
        "size": 970,
        "type": "class"
    },
    "test.collections.ArraysTest$contentEquals$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(Array<Comparable<*>?>)": {
        "size": 149,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(P1)": {
        "size": 357,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(Array<Comparable<*>?>, Array<Comparable<*>?>)": {
        "size": 151,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(P1, P2)": {
        "size": 574,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(ByteArray)": {
        "size": 109,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(ByteArray, ByteArray)": {
        "size": 111,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(IntArray)": {
        "size": 107,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(IntArray, IntArray)": {
        "size": 109,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(LongArray)": {
        "size": 109,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(LongArray, LongArray)": {
        "size": 111,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(DoubleArray)": {
        "size": 113,
        "type": "function"
    },
    "test.collections.ArraysTest$contentEquals$lambda.invoke(DoubleArray, DoubleArray)": {
        "size": 115,
        "type": "function"
    },
    "test.collections.ArraysTest$minWithOrNullInPrimitiveArrays$lambda": {
        "size": 1264,
        "type": "class"
    },
    "test.collections.ArraysTest$minWithOrNullInPrimitiveArrays$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$minWithOrNullInPrimitiveArrays$lambda.invoke(Int, Int)": {
        "size": 522,
        "type": "function"
    },
    "test.collections.ArraysTest$minWithOrNullInPrimitiveArrays$lambda.invoke(P1, P2)": {
        "size": 496,
        "type": "function"
    },
    "test.collections.ArraysTest$maxWithOrNullInPrimitiveArrays$lambda": {
        "size": 1268,
        "type": "class"
    },
    "test.collections.ArraysTest$maxWithOrNullInPrimitiveArrays$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$maxWithOrNullInPrimitiveArrays$lambda.invoke(Int, Int)": {
        "size": 526,
        "type": "function"
    },
    "test.collections.ArraysTest$maxWithOrNullInPrimitiveArrays$lambda.invoke(P1, P2)": {
        "size": 496,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda": {
        "size": 657,
        "type": "class"
    },
    "test.collections.ArraysTest$iterators$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(Array<String>)": {
        "size": 130,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(P1)": {
        "size": 303,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(IntArray)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(ShortArray)": {
        "size": 124,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(ByteArray)": {
        "size": 122,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(LongArray)": {
        "size": 122,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(DoubleArray)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(FloatArray)": {
        "size": 124,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(CharArray)": {
        "size": 122,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$lambda.invoke(BooleanArray)": {
        "size": 128,
        "type": "function"
    },
    "test.collections.ArraysTest$asList$lambda": {
        "size": 723,
        "type": "class"
    },
    "test.collections.ArraysTest$asList$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$asList$lambda.invoke(CompareContext<List<Int>>)": {
        "size": 112,
        "type": "function"
    },
    "test.collections.ArraysTest$asList$lambda.invoke(P1)": {
        "size": 370,
        "type": "function"
    },
    "test.collections.ArraysTest$asList$lambda.invoke(CompareContext<List<Byte>>)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.ArraysTest$asList$lambda.invoke(CompareContext<List<Boolean>>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.ArraysTest$asList$lambda.invoke(CompareContext<List<String>>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.copyInto$ref": {
        "size": 1758,
        "type": "class"
    },
    "test.collections.copyInto$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(Array<String>, Array<String>, Int, Int, Int)": {
        "size": 212,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(P1, P2, P3, P4, P5)": {
        "size": 1151,
        "type": "function"
    },
    "test.collections.copyInto$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.ArraysTest$copyRangeInto$lambda": {
        "size": 1230,
        "type": "class"
    },
    "test.collections.ArraysTest$copyRangeInto$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$copyRangeInto$lambda.invoke(Array<String>, Array<String>, String)": {
        "size": 162,
        "type": "function"
    },
    "test.collections.ArraysTest$copyRangeInto$lambda.invoke(P1, P2, P3)": {
        "size": 764,
        "type": "function"
    },
    "test.collections.contentToString$ref": {
        "size": 697,
        "type": "class"
    },
    "test.collections.contentToString$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(Array<*>)": {
        "size": 92,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(P1)": {
        "size": 280,
        "type": "function"
    },
    "test.collections.contentToString$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(IntArray, IntArray, Int, Int, Int)": {
        "size": 194,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$ref": {
        "size": 1284,
        "type": "class"
    },
    "test.collections.assertArrayNotSameButEquals$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$ref.invoke(IntArray, IntArray, String)": {
        "size": 153,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$ref.invoke(P1, P2, P3)": {
        "size": 749,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$ref.<get-name>()": {
        "size": 78,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(IntArray)": {
        "size": 86,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(LongArray, LongArray, Int, Int, Int)": {
        "size": 197,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$ref.invoke(LongArray, LongArray, String)": {
        "size": 155,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(LongArray)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(ByteArray, ByteArray, Int, Int, Int)": {
        "size": 197,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$ref.invoke(ByteArray, ByteArray, String)": {
        "size": 155,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(ByteArray)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(CharArray, CharArray, Int, Int, Int)": {
        "size": 197,
        "type": "function"
    },
    "test.collections.assertArrayNotSameButEquals$ref.invoke(CharArray, CharArray, String)": {
        "size": 155,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(CharArray)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(UIntArray, UIntArray, Int, Int, Int)": {
        "size": 197,
        "type": "function"
    },
    "test.collections.ArraysTest$copyRangeInto$lambda.invoke(UIntArray, UIntArray, String)": {
        "size": 222,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(UIntArray)": {
        "size": 128,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(ULongArray, ULongArray, Int, Int, Int)": {
        "size": 200,
        "type": "function"
    },
    "test.collections.ArraysTest$copyRangeInto$lambda.invoke(ULongArray, ULongArray, String)": {
        "size": 228,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(ULongArray)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.copyInto$ref.invoke(UByteArray, UByteArray, Int, Int, Int)": {
        "size": 200,
        "type": "function"
    },
    "test.collections.ArraysTest$copyRangeInto$lambda.invoke(UByteArray, UByteArray, String)": {
        "size": 228,
        "type": "function"
    },
    "test.collections.contentToString$ref.invoke(UByteArray)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda": {
        "size": 1941,
        "type": "class"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(Iterable<Int>)": {
        "size": 1343,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(P1)": {
        "size": 345,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(IntArray)": {
        "size": 100,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(LongArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(ByteArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(ShortArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(FloatArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(DoubleArray)": {
        "size": 106,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(CharArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(BooleanArray)": {
        "size": 108,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(Array<String>)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(Array<out String>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(UIntArray)": {
        "size": 248,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(ULongArray)": {
        "size": 250,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(UByteArray)": {
        "size": 250,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseInPlace$lambda.invoke(UShortArray)": {
        "size": 252,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda": {
        "size": 1946,
        "type": "class"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(Iterable<Int>)": {
        "size": 1343,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(P1)": {
        "size": 334,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(Array<String>, Int, Int)": {
        "size": 146,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(P1, P2, P3)": {
        "size": 759,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(Array<String>)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(Array<out String>, Int, Int)": {
        "size": 150,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(Array<out String>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(IntArray, Int, Int)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(IntArray)": {
        "size": 100,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(LongArray, Int, Int)": {
        "size": 134,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(LongArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(ByteArray, Int, Int)": {
        "size": 134,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(ByteArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(ShortArray, Int, Int)": {
        "size": 135,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(ShortArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(FloatArray, Int, Int)": {
        "size": 135,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(FloatArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(DoubleArray, Int, Int)": {
        "size": 136,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(DoubleArray)": {
        "size": 106,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(CharArray, Int, Int)": {
        "size": 134,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(CharArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(BooleanArray, Int, Int)": {
        "size": 137,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(BooleanArray)": {
        "size": 108,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(UIntArray, Int, Int)": {
        "size": 298,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(UIntArray)": {
        "size": 150,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(ULongArray, Int, Int)": {
        "size": 300,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(ULongArray)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(UByteArray, Int, Int)": {
        "size": 300,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(UByteArray)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(UShortArray, Int, Int)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.ArraysTest$reverseRangeInPlace$lambda.invoke(UShortArray)": {
        "size": 158,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda": {
        "size": 1936,
        "type": "class"
    },
    "test.collections.ArraysTest$sortRange$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(Array<Text>)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(P1)": {
        "size": 341,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(Array<Int>)": {
        "size": 129,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(Iterable<Int>)": {
        "size": 1343,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(Array<String>, Int, Int)": {
        "size": 143,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(P1, P2, P3)": {
        "size": 759,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(Array<String>)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(Array<out String>, Int, Int)": {
        "size": 147,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(Array<out String>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(IntArray, Int, Int)": {
        "size": 130,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(IntArray)": {
        "size": 100,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(LongArray, Int, Int)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(LongArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(ByteArray, Int, Int)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(ByteArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(ShortArray, Int, Int)": {
        "size": 132,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(ShortArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(FloatArray, Int, Int)": {
        "size": 132,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(FloatArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(DoubleArray, Int, Int)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(DoubleArray)": {
        "size": 106,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(CharArray, Int, Int)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(CharArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(UIntArray, Int, Int)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(UIntArray)": {
        "size": 150,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(ULongArray, Int, Int)": {
        "size": 132,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(ULongArray)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(UByteArray, Int, Int)": {
        "size": 132,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(UByteArray)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(UShortArray, Int, Int)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.ArraysTest$sortRange$lambda.invoke(UShortArray)": {
        "size": 158,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda": {
        "size": 1953,
        "type": "class"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(Array<Text>)": {
        "size": 141,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(P1)": {
        "size": 341,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(Array<Int>)": {
        "size": 139,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(Iterable<Int>)": {
        "size": 1343,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(Array<String>, Int, Int)": {
        "size": 153,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(P1, P2, P3)": {
        "size": 759,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(Array<String>)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(Array<out String>, Int, Int)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(Array<out String>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(IntArray, Int, Int)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(IntArray)": {
        "size": 100,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(LongArray, Int, Int)": {
        "size": 141,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(LongArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(ByteArray, Int, Int)": {
        "size": 141,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(ByteArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(ShortArray, Int, Int)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(ShortArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(FloatArray, Int, Int)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(FloatArray)": {
        "size": 104,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(DoubleArray, Int, Int)": {
        "size": 143,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(DoubleArray)": {
        "size": 106,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(CharArray, Int, Int)": {
        "size": 141,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(CharArray)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(UIntArray, Int, Int)": {
        "size": 141,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(UIntArray)": {
        "size": 150,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(ULongArray, Int, Int)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(ULongArray)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(UByteArray, Int, Int)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(UByteArray)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(UShortArray, Int, Int)": {
        "size": 143,
        "type": "function"
    },
    "test.collections.ArraysTest$sortDescendingRangeInPlace$lambda.invoke(UShortArray)": {
        "size": 158,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda": {
        "size": 921,
        "type": "class"
    },
    "test.collections.ArraysTest$sortedTests$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(Array<out String>)": {
        "size": 363,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(P1)": {
        "size": 309,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(Array<String>)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(List<String>)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(Array<out Int>)": {
        "size": 115,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(IntArray)": {
        "size": 124,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(List<Int>)": {
        "size": 117,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(Array<out Long>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(LongArray)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(List<Long>)": {
        "size": 119,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(Array<out Char>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(CharArray)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(List<Char>)": {
        "size": 119,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(Array<out Byte>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(ByteArray)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(List<Byte>)": {
        "size": 119,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(Array<out Double>)": {
        "size": 124,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(DoubleArray)": {
        "size": 130,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedTests$lambda.invoke(List<Double>)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ArraysTest$sortByInPlace$lambda": {
        "size": 1547,
        "type": "class"
    },
    "test.collections.ArraysTest$sortByInPlace$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$sortByInPlace$lambda.invoke(Pair<String, Int>, Pair<String, Int>)": {
        "size": 738,
        "type": "function"
    },
    "test.collections.ArraysTest$sortByInPlace$lambda.invoke(P1, P2)": {
        "size": 552,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedBy$lambda": {
        "size": 1444,
        "type": "class"
    },
    "test.collections.ArraysTest$sortedBy$lambda.<init>(Array<String>)": {
        "size": 125,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedBy$lambda.invoke(Int, Int)": {
        "size": 615,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedBy$lambda.invoke(P1, P2)": {
        "size": 496,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedBy$lambda.$values": {
        "size": 53,
        "type": "field"
    },
    "test.collections.ArraysTest$sortByStable$lambda": {
        "size": 1336,
        "type": "class"
    },
    "test.collections.ArraysTest$sortByStable$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$sortByStable$lambda.invoke(Sortable<Char>, Sortable<Char>)": {
        "size": 546,
        "type": "function"
    },
    "test.collections.ArraysTest$sortByStable$lambda.invoke(P1, P2)": {
        "size": 540,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedNullableBy$lambda": {
        "size": 1190,
        "type": "class"
    },
    "test.collections.ArraysTest$sortedNullableBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedNullableBy$lambda.invoke(String, String)": {
        "size": 444,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedNullableBy$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda": {
        "size": 1804,
        "type": "class"
    },
    "test.collections.ArraysTest$sortedWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(Int, Int)": {
        "size": 895,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.<init>(Comparator<Int>)": {
        "size": 172,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.$tmp0_thenByDescending": {
        "size": 70,
        "type": "field"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(IntArray)": {
        "size": 278,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(P1)": {
        "size": 341,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.$comparator": {
        "size": 59,
        "type": "field"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(List<Int>)": {
        "size": 117,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(Array<Int>)": {
        "size": 310,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(Array<out Int>)": {
        "size": 122,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.invoke(Array<Text>)": {
        "size": 313,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.<init>(Int, Int)": {
        "size": 139,
        "type": "function"
    },
    "test.collections.ArraysTest$sortedWith$lambda.$from": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ArraysTest$sortedWith$lambda.$to": {
        "size": 39,
        "type": "field"
    },
    "test.collections.fill$ref": {
        "size": 1459,
        "type": "class"
    },
    "test.collections.fill$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(BooleanArray, Boolean, Int, Int)": {
        "size": 144,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(P1, P2, P3, P4)": {
        "size": 951,
        "type": "function"
    },
    "test.collections.fill$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(ByteArray, Byte, Int, Int)": {
        "size": 138,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(CharArray, Char, Int, Int)": {
        "size": 138,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(FloatArray, Float, Int, Int)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(DoubleArray, Double, Int, Int)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(ShortArray, Short, Int, Int)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(IntArray, Int, Int, Int)": {
        "size": 136,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(LongArray, Long, Int, Int)": {
        "size": 138,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(Array<String>, String, Int, Int)": {
        "size": 152,
        "type": "function"
    },
    "test.collections.toBooleanArray$ref": {
        "size": 659,
        "type": "class"
    },
    "test.collections.toBooleanArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toBooleanArray$ref.invoke(IntArray)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.toBooleanArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toBooleanArray$ref.<get-name>()": {
        "size": 65,
        "type": "function"
    },
    "test.collections.ArraysTest$fill$lambda": {
        "size": 936,
        "type": "class"
    },
    "test.collections.ArraysTest$fill$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$fill$lambda.invoke(Int)": {
        "size": 138,
        "type": "function"
    },
    "test.collections.ArraysTest$fill$lambda.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.collections.contentEquals$ref": {
        "size": 1025,
        "type": "class"
    },
    "test.collections.contentEquals$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(BooleanArray, BooleanArray?)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(P1, P2)": {
        "size": 538,
        "type": "function"
    },
    "test.collections.contentEquals$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.collections.toByteArray$ref": {
        "size": 641,
        "type": "class"
    },
    "test.collections.toByteArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toByteArray$ref.invoke(IntArray)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.toByteArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toByteArray$ref.<get-name>()": {
        "size": 62,
        "type": "function"
    },
    "test.collections.Int$toByte$ref": {
        "size": 634,
        "type": "class"
    },
    "test.collections.Int$toByte$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.Int$toByte$ref.invoke(Int)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.Int$toByte$ref.invoke(P1)": {
        "size": 293,
        "type": "function"
    },
    "test.collections.Int$toByte$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(ByteArray, ByteArray?)": {
        "size": 112,
        "type": "function"
    },
    "test.collections.toCharArray$ref": {
        "size": 641,
        "type": "class"
    },
    "test.collections.toCharArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toCharArray$ref.invoke(IntArray)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.toCharArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toCharArray$ref.<get-name>()": {
        "size": 62,
        "type": "function"
    },
    "test.collections.Char$ref": {
        "size": 613,
        "type": "class"
    },
    "test.collections.Char$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.Char$ref.invoke(Int)": {
        "size": 74,
        "type": "function"
    },
    "test.collections.Char$ref.invoke(P1)": {
        "size": 293,
        "type": "function"
    },
    "test.collections.Char$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(CharArray, CharArray?)": {
        "size": 112,
        "type": "function"
    },
    "test.collections.toFloatArray$ref": {
        "size": 647,
        "type": "class"
    },
    "test.collections.toFloatArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toFloatArray$ref.invoke(IntArray)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.toFloatArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toFloatArray$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.collections.Int$toFloat$ref": {
        "size": 641,
        "type": "class"
    },
    "test.collections.Int$toFloat$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.Int$toFloat$ref.invoke(Int)": {
        "size": 89,
        "type": "function"
    },
    "test.collections.Int$toFloat$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.collections.Int$toFloat$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(FloatArray, FloatArray?)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.toDoubleArray$ref": {
        "size": 653,
        "type": "class"
    },
    "test.collections.toDoubleArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toDoubleArray$ref.invoke(IntArray)": {
        "size": 89,
        "type": "function"
    },
    "test.collections.toDoubleArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toDoubleArray$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.collections.Int$toDouble$ref": {
        "size": 648,
        "type": "class"
    },
    "test.collections.Int$toDouble$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.Int$toDouble$ref.invoke(Int)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.Int$toDouble$ref.invoke(P1)": {
        "size": 295,
        "type": "function"
    },
    "test.collections.Int$toDouble$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(DoubleArray, DoubleArray?)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.toShortArray$ref": {
        "size": 647,
        "type": "class"
    },
    "test.collections.toShortArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toShortArray$ref.invoke(IntArray)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.toShortArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toShortArray$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.collections.Int$toShort$ref": {
        "size": 641,
        "type": "class"
    },
    "test.collections.Int$toShort$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.Int$toShort$ref.invoke(Int)": {
        "size": 89,
        "type": "function"
    },
    "test.collections.Int$toShort$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.collections.Int$toShort$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(ShortArray, ShortArray?)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.copyOf$ref": {
        "size": 663,
        "type": "class"
    },
    "test.collections.copyOf$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.copyOf$ref.invoke(IntArray)": {
        "size": 79,
        "type": "function"
    },
    "test.collections.copyOf$ref.invoke(P1)": {
        "size": 310,
        "type": "function"
    },
    "test.collections.copyOf$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(IntArray, IntArray?)": {
        "size": 110,
        "type": "function"
    },
    "test.collections.toLongArray$ref": {
        "size": 641,
        "type": "class"
    },
    "test.collections.toLongArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toLongArray$ref.invoke(IntArray)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.toLongArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toLongArray$ref.<get-name>()": {
        "size": 62,
        "type": "function"
    },
    "test.collections.Int$toLong$ref": {
        "size": 634,
        "type": "class"
    },
    "test.collections.Int$toLong$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.Int$toLong$ref.invoke(Int)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.Int$toLong$ref.invoke(P1)": {
        "size": 293,
        "type": "function"
    },
    "test.collections.Int$toLong$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(LongArray, LongArray?)": {
        "size": 112,
        "type": "function"
    },
    "test.collections.toStringArray$ref": {
        "size": 659,
        "type": "class"
    },
    "test.collections.toStringArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toStringArray$ref.invoke(IntArray)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.toStringArray$ref.invoke(P1)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.toStringArray$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.collections.Int$toString$ref": {
        "size": 619,
        "type": "class"
    },
    "test.collections.Int$toString$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.Int$toString$ref.invoke(Int)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.Int$toString$ref.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.Int$toString$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.ArraysTest$fill$lambda.invoke(Array<String>, Array<String>)": {
        "size": 143,
        "type": "function"
    },
    "test.collections.ArraysTest$fill$lambda.invoke(P1, P2)": {
        "size": 550,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$checkContract$lambda": {
        "size": 730,
        "type": "class"
    },
    "test.collections.ArraysTest$iterators$checkContract$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$checkContract$lambda.invoke(CompareContext<Iterator<E>>)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ArraysTest$iterators$checkContract$lambda.invoke(P1)": {
        "size": 366,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda": {
        "size": 1846,
        "type": "class"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda.<init>(T)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda.invoke(CompareContext<List<T>>)": {
        "size": 1092,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda.invoke(P1)": {
        "size": 358,
        "type": "function"
    },
    "test.collections.ArraysTest$asListInFloatingPrimitiveArrays$testTotalOrder$lambda.$element": {
        "size": 42,
        "type": "field"
    },
    "test.collections.ArraysTest": {
        "size": 1606975,
        "type": "class"
    },
    "test.collections.ArraysTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.ArraysTest.orEmptyNull()": {
        "size": 2229,
        "type": "function"
    },
    "test.collections.ArraysTest.orEmptyNotNull()": {
        "size": 2143,
        "type": "function"
    },
    "test.collections.ArraysTest.emptyArrayLastIndex()": {
        "size": 682,
        "type": "function"
    },
    "test.collections.ArraysTest.arrayLastIndex()": {
        "size": 2161,
        "type": "function"
    },
    "test.collections.ArraysTest.byteArray()": {
        "size": 690,
        "type": "function"
    },
    "test.collections.ArraysTest.byteArrayInit()": {
        "size": 1745,
        "type": "function"
    },
    "test.collections.ArraysTest.shortArray()": {
        "size": 700,
        "type": "function"
    },
    "test.collections.ArraysTest.shortArrayInit()": {
        "size": 1759,
        "type": "function"
    },
    "test.collections.ArraysTest.intArray()": {
        "size": 641,
        "type": "function"
    },
    "test.collections.ArraysTest.intArrayInit()": {
        "size": 1951,
        "type": "function"
    },
    "test.collections.ArraysTest.longArray()": {
        "size": 690,
        "type": "function"
    },
    "test.collections.ArraysTest.longArrayInit()": {
        "size": 1745,
        "type": "function"
    },
    "test.collections.ArraysTest.floatArray()": {
        "size": 702,
        "type": "function"
    },
    "test.collections.ArraysTest.floatArrayInit()": {
        "size": 1759,
        "type": "function"
    },
    "test.collections.ArraysTest.doubleArray()": {
        "size": 672,
        "type": "function"
    },
    "test.collections.ArraysTest.doubleArrayInit()": {
        "size": 1773,
        "type": "function"
    },
    "test.collections.ArraysTest.charArray()": {
        "size": 696,
        "type": "function"
    },
    "test.collections.ArraysTest.charArrayInit()": {
        "size": 1901,
        "type": "function"
    },
    "test.collections.ArraysTest.booleanArray()": {
        "size": 685,
        "type": "function"
    },
    "test.collections.ArraysTest.booleanArrayInit()": {
        "size": 1920,
        "type": "function"
    },
    "test.collections.ArraysTest.contentEquals()": {
        "size": 3929,
        "type": "function"
    },
    "test.collections.ArraysTest.contentDeepEquals()": {
        "size": 5174,
        "type": "function"
    },
    "test.collections.ArraysTest.contentToString()": {
        "size": 5314,
        "type": "function"
    },
    "test.collections.ArraysTest.contentDeepToString()": {
        "size": 3816,
        "type": "function"
    },
    "test.collections.ArraysTest.contentDeepToStringNoRecursion()": {
        "size": 713,
        "type": "function"
    },
    "test.collections.ArraysTest.contentHashCode()": {
        "size": 9860,
        "type": "function"
    },
    "test.collections.ArraysTest.contentDeepHashCode()": {
        "size": 4694,
        "type": "function"
    },
    "test.collections.ArraysTest.joinToString()": {
        "size": 2316,
        "type": "function"
    },
    "test.collections.ArraysTest.minOrNull()": {
        "size": 3992,
        "type": "function"
    },
    "test.collections.ArraysTest.minOrNullInPrimitiveArrays()": {
        "size": 5406,
        "type": "function"
    },
    "test.collections.ArraysTest.maxOrNull()": {
        "size": 3992,
        "type": "function"
    },
    "test.collections.ArraysTest.maxOrNullInPrimitiveArrays()": {
        "size": 5406,
        "type": "function"
    },
    "test.collections.ArraysTest.minWithOrNull()": {
        "size": 641,
        "type": "function"
    },
    "test.collections.ArraysTest.minWithOrNullInPrimitiveArrays()": {
        "size": 2290,
        "type": "function"
    },
    "test.collections.ArraysTest.maxWithOrNull()": {
        "size": 641,
        "type": "function"
    },
    "test.collections.ArraysTest.maxWithOrNullInPrimitiveArrays()": {
        "size": 2292,
        "type": "function"
    },
    "test.collections.ArraysTest.minByOrNull()": {
        "size": 17303,
        "type": "function"
    },
    "test.collections.ArraysTest.minByOrNullInPrimitiveArrays()": {
        "size": 27736,
        "type": "function"
    },
    "test.collections.ArraysTest.maxByOrNull()": {
        "size": 17305,
        "type": "function"
    },
    "test.collections.ArraysTest.maxByOrNullInPrimitiveArrays()": {
        "size": 27736,
        "type": "function"
    },
    "test.collections.ArraysTest.minIndex()": {
        "size": 2584,
        "type": "function"
    },
    "test.collections.ArraysTest.maxIndex()": {
        "size": 2584,
        "type": "function"
    },
    "test.collections.ArraysTest.minByEvaluateOnce()": {
        "size": 4587,
        "type": "function"
    },
    "test.collections.ArraysTest.maxByEvaluateOnce()": {
        "size": 4587,
        "type": "function"
    },
    "test.collections.ArraysTest.sum()": {
        "size": 4717,
        "type": "function"
    },
    "test.collections.ArraysTest.sumInPrimitiveArrays()": {
        "size": 4339,
        "type": "function"
    },
    "test.collections.ArraysTest.average()": {
        "size": 3721,
        "type": "function"
    },
    "test.collections.ArraysTest.indexOfInPrimitiveArrays()": {
        "size": 14381,
        "type": "function"
    },
    "test.collections.ArraysTest.indexOf()": {
        "size": 24107,
        "type": "function"
    },
    "test.collections.ArraysTest.lastIndexOf()": {
        "size": 29973,
        "type": "function"
    },
    "test.collections.ArraysTest.isEmpty()": {
        "size": 7879,
        "type": "function"
    },
    "test.collections.ArraysTest.isNotEmpty()": {
        "size": 1132,
        "type": "function"
    },
    "test.collections.ArraysTest.plusInference()": {
        "size": 1618,
        "type": "function"
    },
    "test.collections.ArraysTest.plus()": {
        "size": 2648,
        "type": "function"
    },
    "test.collections.ArraysTest.plusVararg()": {
        "size": 701,
        "type": "function"
    },
    "test.collections.ArraysTest.plusAssign()": {
        "size": 664,
        "type": "function"
    },
    "test.collections.ArraysTest.first()": {
        "size": 2694,
        "type": "function"
    },
    "test.collections.ArraysTest.last()": {
        "size": 2959,
        "type": "function"
    },
    "test.collections.ArraysTest.random()": {
        "size": 13675,
        "type": "function"
    },
    "test.collections.ArraysTest.randomOrNull()": {
        "size": 11368,
        "type": "function"
    },
    "test.collections.ArraysTest.contains()": {
        "size": 743,
        "type": "function"
    },
    "test.collections.ArraysTest.slice()": {
        "size": 12592,
        "type": "function"
    },
    "test.collections.ArraysTest.sliceArray()": {
        "size": 12308,
        "type": "function"
    },
    "test.collections.ArraysTest.iterators()": {
        "size": 3270,
        "type": "function"
    },
    "test.collections.ArraysTest.asIterable()": {
        "size": 2781,
        "type": "function"
    },
    "test.collections.ArraysTest.asList()": {
        "size": 2405,
        "type": "function"
    },
    "test.collections.ArraysTest.asListInFloatingPrimitiveArrays()": {
        "size": 3355,
        "type": "function"
    },
    "test.collections.ArraysTest.toPrimitiveArray()": {
        "size": 1314,
        "type": "function"
    },
    "test.collections.ArraysTest.toTypedArray()": {
        "size": 1096,
        "type": "function"
    },
    "test.collections.ArraysTest.copyOf()": {
        "size": 5103,
        "type": "function"
    },
    "test.collections.ArraysTest.copyAndResize()": {
        "size": 12650,
        "type": "function"
    },
    "test.collections.ArraysTest.copyOfRange()": {
        "size": 15896,
        "type": "function"
    },
    "test.collections.ArraysTest.copyRangeInto()": {
        "size": 7460,
        "type": "function"
    },
    "test.collections.ArraysTest.copyRangeIntoVarianceTest()": {
        "size": 2382,
        "type": "function"
    },
    "test.collections.ArraysTest.reduceIndexed()": {
        "size": 32716,
        "type": "function"
    },
    "test.collections.ArraysTest.reduceIndexedOrNull()": {
        "size": 30377,
        "type": "function"
    },
    "test.collections.ArraysTest.reduceRightIndexed()": {
        "size": 27622,
        "type": "function"
    },
    "test.collections.ArraysTest.reduceRightIndexedOrNull()": {
        "size": 25383,
        "type": "function"
    },
    "test.collections.ArraysTest.reduce()": {
        "size": 30444,
        "type": "function"
    },
    "test.collections.ArraysTest.reduceOrNull()": {
        "size": 28105,
        "type": "function"
    },
    "test.collections.ArraysTest.reduceRight()": {
        "size": 24512,
        "type": "function"
    },
    "test.collections.ArraysTest.reduceRightOrNull()": {
        "size": 22321,
        "type": "function"
    },
    "test.collections.ArraysTest.scan()": {
        "size": 43416,
        "type": "function"
    },
    "test.collections.ArraysTest.runningFold()": {
        "size": 40714,
        "type": "function"
    },
    "test.collections.ArraysTest.scanIndexed()": {
        "size": 56812,
        "type": "function"
    },
    "test.collections.ArraysTest.runningFoldIndexed()": {
        "size": 53313,
        "type": "function"
    },
    "test.collections.ArraysTest.runningReduce()": {
        "size": 53434,
        "type": "function"
    },
    "test.collections.ArraysTest.runningReduceIndexed()": {
        "size": 56970,
        "type": "function"
    },
    "test.collections.ArraysTest.associateWith()": {
        "size": 5199,
        "type": "function"
    },
    "test.collections.ArraysTest.associateWithPrimitives()": {
        "size": 14585,
        "type": "function"
    },
    "test.collections.ArraysTest.associateWithToPrimitives()": {
        "size": 26601,
        "type": "function"
    },
    "test.collections.ArraysTest.reverseInPlace()": {
        "size": 4628,
        "type": "function"
    },
    "test.collections.ArraysTest.reverseRangeInPlace()": {
        "size": 4913,
        "type": "function"
    },
    "test.collections.ArraysTest.reversed()": {
        "size": 7226,
        "type": "function"
    },
    "test.collections.ArraysTest.reversedArray()": {
        "size": 3359,
        "type": "function"
    },
    "test.collections.ArraysTest.onEach()": {
        "size": 25674,
        "type": "function"
    },
    "test.collections.ArraysTest.onEachIndexed()": {
        "size": 37528,
        "type": "function"
    },
    "test.collections.ArraysTest.drop()": {
        "size": 10319,
        "type": "function"
    },
    "test.collections.ArraysTest.dropLast()": {
        "size": 10374,
        "type": "function"
    },
    "test.collections.ArraysTest.dropWhile()": {
        "size": 26495,
        "type": "function"
    },
    "test.collections.ArraysTest.dropLastWhile()": {
        "size": 27500,
        "type": "function"
    },
    "test.collections.ArraysTest.take()": {
        "size": 10318,
        "type": "function"
    },
    "test.collections.ArraysTest.takeLast()": {
        "size": 10375,
        "type": "function"
    },
    "test.collections.ArraysTest.takeWhile()": {
        "size": 23053,
        "type": "function"
    },
    "test.collections.ArraysTest.takeLastWhile()": {
        "size": 27194,
        "type": "function"
    },
    "test.collections.ArraysTest.filter()": {
        "size": 25675,
        "type": "function"
    },
    "test.collections.ArraysTest.filterIndexed()": {
        "size": 22094,
        "type": "function"
    },
    "test.collections.ArraysTest.filterNot()": {
        "size": 26074,
        "type": "function"
    },
    "test.collections.ArraysTest.filterNotNull()": {
        "size": 749,
        "type": "function"
    },
    "test.collections.ArraysTest.map()": {
        "size": 7476,
        "type": "function"
    },
    "test.collections.ArraysTest.mapIndexed()": {
        "size": 6580,
        "type": "function"
    },
    "test.collections.ArraysTest.mapNotNull()": {
        "size": 3141,
        "type": "function"
    },
    "test.collections.ArraysTest.mapIndexedNotNull()": {
        "size": 4497,
        "type": "function"
    },
    "test.collections.ArraysTest.flatMap()": {
        "size": 3603,
        "type": "function"
    },
    "test.collections.ArraysTest.flatMapIndexed()": {
        "size": 4890,
        "type": "function"
    },
    "test.collections.ArraysTest.flattenArray()": {
        "size": 1686,
        "type": "function"
    },
    "test.collections.ArraysTest.asListPrimitives()": {
        "size": 5155,
        "type": "function"
    },
    "test.collections.ArraysTest.asListObjects()": {
        "size": 5778,
        "type": "function"
    },
    "test.collections.ArraysTest.sort()": {
        "size": 4301,
        "type": "function"
    },
    "test.collections.ArraysTest.sortRange()": {
        "size": 4404,
        "type": "function"
    },
    "test.collections.ArraysTest.sortDescendingRangeInPlace()": {
        "size": 5503,
        "type": "function"
    },
    "test.collections.ArraysTest.sortedTests()": {
        "size": 11871,
        "type": "function"
    },
    "test.collections.ArraysTest.sortStable()": {
        "size": 2651,
        "type": "function"
    },
    "test.collections.ArraysTest.sortByInPlace()": {
        "size": 3957,
        "type": "function"
    },
    "test.collections.ArraysTest.sortedBy()": {
        "size": 942,
        "type": "function"
    },
    "test.collections.ArraysTest.sortByStable()": {
        "size": 5141,
        "type": "function"
    },
    "test.collections.ArraysTest.sortedNullableBy()": {
        "size": 4470,
        "type": "function"
    },
    "test.collections.ArraysTest.sortedWith()": {
        "size": 11642,
        "type": "function"
    },
    "test.collections.ArraysTest.testStableSort(@ExtensionFunctionType Function1<Array<Text>, Unit>, @ExtensionFunctionType Function1<Array<Int>, Unit>)": {
        "size": 4931,
        "type": "function"
    },
    "test.collections.ArraysTest.shuffle()": {
        "size": 81326,
        "type": "function"
    },
    "test.collections.ArraysTest.shufflePredictably()": {
        "size": 34115,
        "type": "function"
    },
    "test.collections.ArraysTest.elementAt()": {
        "size": 8021,
        "type": "function"
    },
    "test.collections.ArraysTest.fill()": {
        "size": 19768,
        "type": "function"
    },
    "test.collections.ArraysTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ArraysTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArraysTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.toBooleanArray()": {
        "size": 1515,
        "type": "function"
    },
    "test.collections.toByteArray()": {
        "size": 1304,
        "type": "function"
    },
    "test.collections.toCharArray()": {
        "size": 3182,
        "type": "function"
    },
    "test.collections.toFloatArray()": {
        "size": 1313,
        "type": "function"
    },
    "test.collections.toDoubleArray()": {
        "size": 1322,
        "type": "function"
    },
    "test.collections.toShortArray()": {
        "size": 1313,
        "type": "function"
    },
    "test.collections.toLongArray()": {
        "size": 1304,
        "type": "function"
    },
    "test.collections.toStringArray()": {
        "size": 1311,
        "type": "function"
    },
    "test.collections.assertStableSorted(Boolean)": {
        "size": 239,
        "type": "function"
    },
    "test.collections.assertStableSorted$default(Boolean?, Int, Any?)": {
        "size": 481,
        "type": "function"
    },
    "test.collections.ArraySortedChecker$checkSorted$lambda": {
        "size": 762,
        "type": "class"
    },
    "test.collections.ArraySortedChecker$checkSorted$lambda.<init>(ArraySortedChecker<A, T>)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.ArraySortedChecker$checkSorted$lambda.invoke(T, T)": {
        "size": 328,
        "type": "function"
    },
    "test.collections.ArraySortedChecker$checkSorted$lambda.invoke(P1, P2)": {
        "size": 122,
        "type": "function"
    },
    "test.collections.ArraySortedChecker$checkSorted$lambda.this$0": {
        "size": 63,
        "type": "field"
    },
    "test.collections.ArraySortedChecker": {
        "size": 1181,
        "type": "class"
    },
    "test.collections.ArraySortedChecker.<init>(A, Comparator<in T>)": {
        "size": 167,
        "type": "function"
    },
    "test.collections.ArraySortedChecker.array": {
        "size": 39,
        "type": "field"
    },
    "test.collections.ArraySortedChecker.comparator": {
        "size": 59,
        "type": "field"
    },
    "test.collections.ArraySortedChecker.checkSorted(@ExtensionFunctionType Function1<A, R>, @ExtensionFunctionType Function1<A, R>, @ExtensionFunctionType Function1<R, Iterator<T>>)": {
        "size": 662,
        "type": "function"
    },
    "test.collections.ArraySortedChecker.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ArraySortedChecker.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArraySortedChecker.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior()": {
        "size": 10476,
        "type": "function"
    },
    "test.collections.behaviors.listIteratorBehavior()": {
        "size": 1207,
        "type": "function"
    },
    "test.collections.behaviors.listIteratorProperties()": {
        "size": 858,
        "type": "function"
    },
    "test.collections.behaviors.iteratorBehavior()": {
        "size": 964,
        "type": "function"
    },
    "test.collections.behaviors.setBehavior(String)": {
        "size": 385,
        "type": "function"
    },
    "test.collections.behaviors.setBehavior$default(String?, Int, Any?)": {
        "size": 378,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior()": {
        "size": 2843,
        "type": "function"
    },
    "test.collections.behaviors.equalityBehavior(String)": {
        "size": 650,
        "type": "function"
    },
    "test.collections.behaviors.equalityBehavior$default(String?, Int, Any?)": {
        "size": 383,
        "type": "function"
    },
    "test.collections.behaviors.collectionBehavior(String)": {
        "size": 2622,
        "type": "function"
    },
    "test.collections.behaviors.collectionBehavior$default(String?, Int, Any?)": {
        "size": 399,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda": {
        "size": 914,
        "type": "class"
    },
    "test.collections.behaviors.listBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.invoke(List<T>)": {
        "size": 274,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.invoke(P1)": {
        "size": 382,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.invoke(CompareContext<ListIterator<T>>)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.<init>(Int)": {
        "size": 112,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.$index": {
        "size": 42,
        "type": "field"
    },
    "test.collections.behaviors.listBehavior$lambda.<init>(T)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.$element": {
        "size": 42,
        "type": "field"
    },
    "test.collections.behaviors.<no name provided>": {
        "size": 275,
        "type": "class"
    },
    "test.collections.behaviors.<no name provided>.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.behaviors.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.behaviors.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.<init>(<no name provided><T>)": {
        "size": 148,
        "type": "function"
    },
    "test.collections.behaviors.listBehavior$lambda.$nonExisting": {
        "size": 66,
        "type": "field"
    },
    "test.collections.behaviors.listIteratorBehavior$lambda": {
        "size": 703,
        "type": "class"
    },
    "test.collections.behaviors.listIteratorBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.listIteratorBehavior$lambda.invoke(ListIterator<T>)": {
        "size": 129,
        "type": "function"
    },
    "test.collections.behaviors.listIteratorBehavior$lambda.invoke(P1)": {
        "size": 352,
        "type": "function"
    },
    "test.collections.behaviors.listIteratorProperties$lambda": {
        "size": 689,
        "type": "class"
    },
    "test.collections.behaviors.listIteratorProperties$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.listIteratorProperties$lambda.invoke(ListIterator<*>)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.behaviors.listIteratorProperties$lambda.invoke(P1)": {
        "size": 342,
        "type": "function"
    },
    "test.collections.behaviors.iteratorBehavior$lambda": {
        "size": 679,
        "type": "class"
    },
    "test.collections.behaviors.iteratorBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.iteratorBehavior$lambda.invoke(Iterator<T>)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.behaviors.iteratorBehavior$lambda.invoke(P1)": {
        "size": 344,
        "type": "function"
    },
    "test.collections.behaviors.setBehavior$lambda": {
        "size": 731,
        "type": "class"
    },
    "test.collections.behaviors.setBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.setBehavior$lambda.invoke(Set<T>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.behaviors.setBehavior$lambda.invoke(P1)": {
        "size": 374,
        "type": "function"
    },
    "test.collections.behaviors.setBehavior$lambda.invoke(CompareContext<Iterator<T>>)": {
        "size": 132,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior$lambda": {
        "size": 1118,
        "type": "class"
    },
    "test.collections.behaviors.mapBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior$lambda.invoke(Map<K, V>)": {
        "size": 477,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior$lambda.invoke(P1)": {
        "size": 384,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior$lambda.<init>(<no name provided><K, V>)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior$lambda.$tmp0_let": {
        "size": 66,
        "type": "field"
    },
    "test.collections.behaviors.mapBehavior$lambda.invoke(CompareContext<Set<K>>)": {
        "size": 143,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior$lambda.invoke(CompareContext<Set<Entry<K, V>>>)": {
        "size": 165,
        "type": "function"
    },
    "test.collections.behaviors.mapBehavior$lambda.invoke(CompareContext<Collection<V>>)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.behaviors.equalityBehavior$lambda": {
        "size": 931,
        "type": "class"
    },
    "test.collections.behaviors.equalityBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.equalityBehavior$lambda.invoke(T)": {
        "size": 597,
        "type": "function"
    },
    "test.collections.behaviors.equalityBehavior$lambda.invoke(P1)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.behaviors.collectionBehavior$lambda": {
        "size": 1184,
        "type": "class"
    },
    "test.collections.behaviors.collectionBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.behaviors.collectionBehavior$lambda.invoke(Collection<T>)": {
        "size": 480,
        "type": "function"
    },
    "test.collections.behaviors.collectionBehavior$lambda.invoke(P1)": {
        "size": 338,
        "type": "function"
    },
    "test.collections.behaviors.collectionBehavior$lambda.<init>(<no name provided><T>)": {
        "size": 139,
        "type": "function"
    },
    "test.collections.behaviors.collectionBehavior$lambda.$tmp0_let": {
        "size": 63,
        "type": "field"
    },
    "test.collections.behaviors.collectionBehavior$lambda.$tmp1_let": {
        "size": 63,
        "type": "field"
    },
    "test.collections.sortedByNullable$nonEmptyLength()": {
        "size": 283,
        "type": "function"
    },
    "test.collections.CollectionTest$plusElement$lambda": {
        "size": 634,
        "type": "class"
    },
    "test.collections.CollectionTest$plusElement$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$plusElement$lambda.invoke(List<String>)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.CollectionTest$plusElement$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.CollectionTest$plusCollection$lambda": {
        "size": 644,
        "type": "class"
    },
    "test.collections.CollectionTest$plusCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$plusCollection$lambda.invoke(List<String>)": {
        "size": 149,
        "type": "function"
    },
    "test.collections.CollectionTest$plusCollection$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.CollectionTest$plusArray$lambda": {
        "size": 697,
        "type": "class"
    },
    "test.collections.CollectionTest$plusArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$plusArray$lambda.invoke(List<String>)": {
        "size": 199,
        "type": "function"
    },
    "test.collections.CollectionTest$plusArray$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.CollectionTest$plusSequence$lambda": {
        "size": 646,
        "type": "class"
    },
    "test.collections.CollectionTest$plusSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$plusSequence$lambda.invoke(List<String>)": {
        "size": 153,
        "type": "function"
    },
    "test.collections.CollectionTest$plusSequence$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.CollectionTest$minusElement$lambda": {
        "size": 633,
        "type": "class"
    },
    "test.collections.CollectionTest$minusElement$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$minusElement$lambda.invoke(List<String>)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.CollectionTest$minusElement$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.CollectionTest$minusCollection$lambda": {
        "size": 642,
        "type": "class"
    },
    "test.collections.CollectionTest$minusCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$minusCollection$lambda.invoke(List<String>)": {
        "size": 146,
        "type": "function"
    },
    "test.collections.CollectionTest$minusCollection$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.CollectionTest$minusArray$lambda": {
        "size": 695,
        "type": "class"
    },
    "test.collections.CollectionTest$minusArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$minusArray$lambda.invoke(List<String>)": {
        "size": 196,
        "type": "function"
    },
    "test.collections.CollectionTest$minusArray$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.CollectionTest$minusSequence$lambda": {
        "size": 644,
        "type": "class"
    },
    "test.collections.CollectionTest$minusSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$minusSequence$lambda.invoke(List<String>)": {
        "size": 150,
        "type": "function"
    },
    "test.collections.CollectionTest$minusSequence$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.<no name provided>": {
        "size": 5063,
        "type": "class"
    },
    "test.collections.<no name provided>.<init>(List<String>)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.<no name provided>.$$delegate_0": {
        "size": 57,
        "type": "field"
    },
    "test.collections.<no name provided>.<get-size>()": {
        "size": 226,
        "type": "function"
    },
    "test.collections.<no name provided>.contains(String)": {
        "size": 267,
        "type": "function"
    },
    "test.collections.<no name provided>.contains(@UnsafeVariance E)": {
        "size": 496,
        "type": "function"
    },
    "test.collections.<no name provided>.containsAll(Collection<String>)": {
        "size": 279,
        "type": "function"
    },
    "test.collections.<no name provided>.get(Int)": {
        "size": 279,
        "type": "function"
    },
    "test.collections.<no name provided>.indexOf(String)": {
        "size": 252,
        "type": "function"
    },
    "test.collections.<no name provided>.indexOf(@UnsafeVariance E)": {
        "size": 478,
        "type": "function"
    },
    "test.collections.<no name provided>.isEmpty()": {
        "size": 224,
        "type": "function"
    },
    "test.collections.<no name provided>.iterator()": {
        "size": 337,
        "type": "function"
    },
    "test.collections.<no name provided>.lastIndexOf(String)": {
        "size": 260,
        "type": "function"
    },
    "test.collections.<no name provided>.lastIndexOf(@UnsafeVariance E)": {
        "size": 486,
        "type": "function"
    },
    "test.collections.<no name provided>.listIterator()": {
        "size": 247,
        "type": "function"
    },
    "test.collections.<no name provided>.listIterator(Int)": {
        "size": 270,
        "type": "function"
    },
    "test.collections.<no name provided>.subList(Int, Int)": {
        "size": 297,
        "type": "function"
    },
    "test.collections.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.CollectionTest$minOfWith$lambda": {
        "size": 1589,
        "type": "class"
    },
    "test.collections.CollectionTest$minOfWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$minOfWith$lambda.invoke(String, String)": {
        "size": 818,
        "type": "function"
    },
    "test.collections.CollectionTest$minOfWith$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.CollectionTest$maxOfWith$lambda": {
        "size": 1589,
        "type": "class"
    },
    "test.collections.CollectionTest$maxOfWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$maxOfWith$lambda.invoke(String, String)": {
        "size": 818,
        "type": "function"
    },
    "test.collections.CollectionTest$maxOfWith$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.CollectionTest$sortByInPlace$lambda": {
        "size": 1551,
        "type": "class"
    },
    "test.collections.CollectionTest$sortByInPlace$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$sortByInPlace$lambda.invoke(Pair<String, Int>, Pair<String, Int>)": {
        "size": 738,
        "type": "function"
    },
    "test.collections.CollectionTest$sortByInPlace$lambda.invoke(P1, P2)": {
        "size": 552,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedBy$lambda": {
        "size": 1362,
        "type": "class"
    },
    "test.collections.CollectionTest$sortedBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedBy$lambda.invoke(Pair<String, Int>, Pair<String, Int>)": {
        "size": 554,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedBy$lambda.invoke(P1, P2)": {
        "size": 552,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedBy$lambda.invoke(String, String)": {
        "size": 476,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedNullableBy$lambda": {
        "size": 1194,
        "type": "class"
    },
    "test.collections.CollectionTest$sortedNullableBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedNullableBy$lambda.invoke(String, String)": {
        "size": 444,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedNullableBy$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedByNullable$lambda": {
        "size": 1569,
        "type": "class"
    },
    "test.collections.CollectionTest$sortedByNullable$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedByNullable$lambda.invoke(String, String)": {
        "size": 666,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedByNullable$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedByNullable$lambda.<init>(Comparator<Int?>)": {
        "size": 152,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedByNullable$lambda.$tmp0_compareBy": {
        "size": 64,
        "type": "field"
    },
    "test.collections.CollectionTest$sortedWith$lambda": {
        "size": 1928,
        "type": "class"
    },
    "test.collections.CollectionTest$sortedWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedWith$lambda.invoke(String, String)": {
        "size": 1136,
        "type": "function"
    },
    "test.collections.CollectionTest$sortedWith$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.CollectionTest$sortByStable$lambda": {
        "size": 1340,
        "type": "class"
    },
    "test.collections.CollectionTest$sortByStable$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$sortByStable$lambda.invoke(Sortable<Char>, Sortable<Char>)": {
        "size": 546,
        "type": "function"
    },
    "test.collections.CollectionTest$sortByStable$lambda.invoke(P1, P2)": {
        "size": 540,
        "type": "function"
    },
    "test.collections.CollectionTest$specialLists$lambda": {
        "size": 728,
        "type": "class"
    },
    "test.collections.CollectionTest$specialLists$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$specialLists$lambda.invoke(CompareContext<List<Int>>)": {
        "size": 112,
        "type": "function"
    },
    "test.collections.CollectionTest$specialLists$lambda.invoke(P1)": {
        "size": 368,
        "type": "function"
    },
    "test.collections.CollectionTest$specialLists$lambda.invoke(CompareContext<List<Double>>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.CollectionTest$specialLists$lambda.invoke(CompareContext<List<String>>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.CollectionTest$specialSets$lambda": {
        "size": 804,
        "type": "class"
    },
    "test.collections.CollectionTest$specialSets$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$specialSets$lambda.invoke(CompareContext<Set<Int>>)": {
        "size": 188,
        "type": "function"
    },
    "test.collections.CollectionTest$specialSets$lambda.invoke(P1)": {
        "size": 366,
        "type": "function"
    },
    "test.collections.CollectionTest$specialSets$lambda.invoke(CompareContext<Set<Double>>)": {
        "size": 194,
        "type": "function"
    },
    "test.collections.CollectionTest$specialSets$lambda.invoke(CompareContext<Set<String>>)": {
        "size": 194,
        "type": "function"
    },
    "test.collections.CollectionTest$specialMaps$lambda": {
        "size": 747,
        "type": "class"
    },
    "test.collections.CollectionTest$specialMaps$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.CollectionTest$specialMaps$lambda.invoke(CompareContext<Map<String, Int>>)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.CollectionTest$specialMaps$lambda.invoke(P1)": {
        "size": 376,
        "type": "function"
    },
    "test.collections.CollectionTest$specialMaps$lambda.invoke(CompareContext<Map<Int, String>>)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.CollectionTest$specialMaps$lambda.invoke(CompareContext<Map<Int, Int>>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.TestCollection": {
        "size": 2680,
        "type": "class"
    },
    "test.collections.TestCollection.<init>(Collection<E>)": {
        "size": 267,
        "type": "function"
    },
    "test.collections.TestCollection.data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.TestCollection.invocations": {
        "size": 63,
        "type": "field"
    },
    "test.collections.TestCollection.<get-size>()": {
        "size": 217,
        "type": "function"
    },
    "test.collections.TestCollection.iterator()": {
        "size": 230,
        "type": "function"
    },
    "test.collections.TestCollection.toArray()": {
        "size": 744,
        "type": "function"
    },
    "test.collections.TestCollection.toArray(Array<T>)": {
        "size": 560,
        "type": "function"
    },
    "test.collections.TestCollection.contains(E)": {
        "size": 64,
        "type": "function"
    },
    "test.collections.TestCollection.containsAll(Collection<E>)": {
        "size": 71,
        "type": "function"
    },
    "test.collections.TestCollection.isEmpty()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.TestCollection.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.TestCollection.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.TestCollection.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.CollectionTest": {
        "size": 513395,
        "type": "class"
    },
    "test.collections.CollectionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.CollectionTest.createListWithInit()": {
        "size": 1920,
        "type": "function"
    },
    "test.collections.CollectionTest.joinTo()": {
        "size": 615,
        "type": "function"
    },
    "test.collections.CollectionTest.joinToString()": {
        "size": 1146,
        "type": "function"
    },
    "test.collections.CollectionTest.filterNotNull()": {
        "size": 1193,
        "type": "function"
    },
    "test.collections.CollectionTest.flatMap()": {
        "size": 3173,
        "type": "function"
    },
    "test.collections.CollectionTest.flatMapIndexed()": {
        "size": 6039,
        "type": "function"
    },
    "test.collections.CollectionTest.listOfNotNull()": {
        "size": 734,
        "type": "function"
    },
    "test.collections.CollectionTest.setOfNotNull()": {
        "size": 725,
        "type": "function"
    },
    "test.collections.CollectionTest.filterIntoSet()": {
        "size": 3453,
        "type": "function"
    },
    "test.collections.CollectionTest.filterIsInstanceList()": {
        "size": 3770,
        "type": "function"
    },
    "test.collections.CollectionTest.filterIsInstanceArray()": {
        "size": 4673,
        "type": "function"
    },
    "test.collections.CollectionTest.foldIndexed()": {
        "size": 10194,
        "type": "function"
    },
    "test.collections.CollectionTest.foldIndexedWithDifferentTypes()": {
        "size": 5807,
        "type": "function"
    },
    "test.collections.CollectionTest.foldIndexedWithNonCommutativeOperation()": {
        "size": 2938,
        "type": "function"
    },
    "test.collections.CollectionTest.foldRightIndexed()": {
        "size": 3347,
        "type": "function"
    },
    "test.collections.CollectionTest.foldRightIndexedWithDifferentTypes()": {
        "size": 2013,
        "type": "function"
    },
    "test.collections.CollectionTest.foldRightIndexedWithNonCommutativeOperation()": {
        "size": 1988,
        "type": "function"
    },
    "test.collections.CollectionTest.fold()": {
        "size": 5839,
        "type": "function"
    },
    "test.collections.CollectionTest.foldWithDifferentTypes()": {
        "size": 2956,
        "type": "function"
    },
    "test.collections.CollectionTest.foldWithNonCommutativeOperation()": {
        "size": 1534,
        "type": "function"
    },
    "test.collections.CollectionTest.foldRight()": {
        "size": 3197,
        "type": "function"
    },
    "test.collections.CollectionTest.foldRightWithDifferentTypes()": {
        "size": 1891,
        "type": "function"
    },
    "test.collections.CollectionTest.foldRightWithNonCommutativeOperation()": {
        "size": 1880,
        "type": "function"
    },
    "test.collections.CollectionTest.zipTransform()": {
        "size": 2622,
        "type": "function"
    },
    "test.collections.CollectionTest.zip()": {
        "size": 857,
        "type": "function"
    },
    "test.collections.CollectionTest.partition()": {
        "size": 1473,
        "type": "function"
    },
    "test.collections.CollectionTest.reduceIndexed()": {
        "size": 12721,
        "type": "function"
    },
    "test.collections.CollectionTest.reduceIndexedOrNull()": {
        "size": 10116,
        "type": "function"
    },
    "test.collections.CollectionTest.reduceRightIndexed()": {
        "size": 8734,
        "type": "function"
    },
    "test.collections.CollectionTest.reduceRightIndexedOrNull()": {
        "size": 6607,
        "type": "function"
    },
    "test.collections.CollectionTest.reduce()": {
        "size": 5511,
        "type": "function"
    },
    "test.collections.CollectionTest.reduceOrNull()": {
        "size": 3393,
        "type": "function"
    },
    "test.collections.CollectionTest.reduceRight()": {
        "size": 5624,
        "type": "function"
    },
    "test.collections.CollectionTest.reduceRightOrNull()": {
        "size": 3524,
        "type": "function"
    },
    "test.collections.CollectionTest.scan()": {
        "size": 9312,
        "type": "function"
    },
    "test.collections.CollectionTest.scanIndexed()": {
        "size": 11936,
        "type": "function"
    },
    "test.collections.CollectionTest.runningReduce()": {
        "size": 4860,
        "type": "function"
    },
    "test.collections.CollectionTest.runningReduceIndexed()": {
        "size": 5395,
        "type": "function"
    },
    "test.collections.CollectionTest.groupBy()": {
        "size": 3522,
        "type": "function"
    },
    "test.collections.CollectionTest.groupByKeysAndValues()": {
        "size": 4913,
        "type": "function"
    },
    "test.collections.CollectionTest.associateWith()": {
        "size": 4668,
        "type": "function"
    },
    "test.collections.CollectionTest.plusRanges()": {
        "size": 410,
        "type": "function"
    },
    "test.collections.CollectionTest.mapRanges()": {
        "size": 1330,
        "type": "function"
    },
    "test.collections.CollectionTest.testPlus(Function1<List<String>, List<String>>)": {
        "size": 594,
        "type": "function"
    },
    "test.collections.CollectionTest.plusElement()": {
        "size": 148,
        "type": "function"
    },
    "test.collections.CollectionTest.plusCollection()": {
        "size": 154,
        "type": "function"
    },
    "test.collections.CollectionTest.plusArray()": {
        "size": 144,
        "type": "function"
    },
    "test.collections.CollectionTest.plusSequence()": {
        "size": 150,
        "type": "function"
    },
    "test.collections.CollectionTest.plusCollectionBug()": {
        "size": 368,
        "type": "function"
    },
    "test.collections.CollectionTest.plusCollectionInference()": {
        "size": 1078,
        "type": "function"
    },
    "test.collections.CollectionTest.plusAssign()": {
        "size": 2024,
        "type": "function"
    },
    "test.collections.CollectionTest.testMinus(List<String>?, Function1<List<String>, List<String>>)": {
        "size": 635,
        "type": "function"
    },
    "test.collections.CollectionTest.testMinus$default(List<String>?, Function1<List<String>, List<String>>, Int, Any?)": {
        "size": 404,
        "type": "function"
    },
    "test.collections.CollectionTest.minusElement()": {
        "size": 206,
        "type": "function"
    },
    "test.collections.CollectionTest.minusCollection()": {
        "size": 236,
        "type": "function"
    },
    "test.collections.CollectionTest.minusArray()": {
        "size": 226,
        "type": "function"
    },
    "test.collections.CollectionTest.minusSequence()": {
        "size": 232,
        "type": "function"
    },
    "test.collections.CollectionTest.minusIsEager()": {
        "size": 803,
        "type": "function"
    },
    "test.collections.CollectionTest.minusAssign()": {
        "size": 2350,
        "type": "function"
    },
    "test.collections.CollectionTest.requireNoNulls()": {
        "size": 2459,
        "type": "function"
    },
    "test.collections.CollectionTest.reverseInPlace()": {
        "size": 1066,
        "type": "function"
    },
    "test.collections.CollectionTest.reversed()": {
        "size": 458,
        "type": "function"
    },
    "test.collections.CollectionTest.drop()": {
        "size": 478,
        "type": "function"
    },
    "test.collections.CollectionTest.dropWhile()": {
        "size": 1303,
        "type": "function"
    },
    "test.collections.CollectionTest.dropLast()": {
        "size": 2430,
        "type": "function"
    },
    "test.collections.CollectionTest.dropLastWhile()": {
        "size": 5923,
        "type": "function"
    },
    "test.collections.CollectionTest.take()": {
        "size": 2387,
        "type": "function"
    },
    "test.collections.CollectionTest.takeWhile()": {
        "size": 3607,
        "type": "function"
    },
    "test.collections.CollectionTest.takeLast()": {
        "size": 2973,
        "type": "function"
    },
    "test.collections.CollectionTest.takeLastWhile()": {
        "size": 7964,
        "type": "function"
    },
    "test.collections.CollectionTest.copyToArray()": {
        "size": 483,
        "type": "function"
    },
    "test.collections.CollectionTest.count()": {
        "size": 1252,
        "type": "function"
    },
    "test.collections.CollectionTest.first()": {
        "size": 2472,
        "type": "function"
    },
    "test.collections.CollectionTest.last()": {
        "size": 2467,
        "type": "function"
    },
    "test.collections.CollectionTest.random()": {
        "size": 14350,
        "type": "function"
    },
    "test.collections.CollectionTest.randomOrNull()": {
        "size": 12235,
        "type": "function"
    },
    "test.collections.CollectionTest.subscript()": {
        "size": 3753,
        "type": "function"
    },
    "test.collections.CollectionTest.indices()": {
        "size": 762,
        "type": "function"
    },
    "test.collections.CollectionTest.contains()": {
        "size": 902,
        "type": "function"
    },
    "test.collections.CollectionTest.minOrNull()": {
        "size": 5514,
        "type": "function"
    },
    "test.collections.CollectionTest.max()": {
        "size": 5508,
        "type": "function"
    },
    "test.collections.CollectionTest.minWithOrNull()": {
        "size": 2469,
        "type": "function"
    },
    "test.collections.CollectionTest.maxWithOrNull()": {
        "size": 2469,
        "type": "function"
    },
    "test.collections.CollectionTest.minByOrNull()": {
        "size": 18116,
        "type": "function"
    },
    "test.collections.CollectionTest.maxByOrNull()": {
        "size": 18118,
        "type": "function"
    },
    "test.collections.CollectionTest.minByOrNullEvaluateOnce()": {
        "size": 7192,
        "type": "function"
    },
    "test.collections.CollectionTest.maxByOrNullEvaluateOnce()": {
        "size": 7192,
        "type": "function"
    },
    "test.collections.CollectionTest.minOf()": {
        "size": 24162,
        "type": "function"
    },
    "test.collections.CollectionTest.minOfWith()": {
        "size": 9944,
        "type": "function"
    },
    "test.collections.CollectionTest.maxOf()": {
        "size": 19736,
        "type": "function"
    },
    "test.collections.CollectionTest.maxOfWith()": {
        "size": 9944,
        "type": "function"
    },
    "test.collections.CollectionTest.sum()": {
        "size": 4038,
        "type": "function"
    },
    "test.collections.CollectionTest.sumOf()": {
        "size": 13058,
        "type": "function"
    },
    "test.collections.CollectionTest.average()": {
        "size": 3664,
        "type": "function"
    },
    "test.collections.CollectionTest.takeReturnsFirstNElements()": {
        "size": 5449,
        "type": "function"
    },
    "test.collections.CollectionTest.sortInPlace()": {
        "size": 838,
        "type": "function"
    },
    "test.collections.CollectionTest.sorted()": {
        "size": 4360,
        "type": "function"
    },
    "test.collections.CollectionTest.sortByInPlace()": {
        "size": 3287,
        "type": "function"
    },
    "test.collections.CollectionTest.sortStable()": {
        "size": 2877,
        "type": "function"
    },
    "test.collections.CollectionTest.sortedBy()": {
        "size": 2966,
        "type": "function"
    },
    "test.collections.CollectionTest.sortedNullableBy()": {
        "size": 4429,
        "type": "function"
    },
    "test.collections.CollectionTest.sortedByNullable()": {
        "size": 3008,
        "type": "function"
    },
    "test.collections.CollectionTest.sortedWith()": {
        "size": 2424,
        "type": "function"
    },
    "test.collections.CollectionTest.sortByStable()": {
        "size": 5391,
        "type": "function"
    },
    "test.collections.CollectionTest.shuffled()": {
        "size": 2331,
        "type": "function"
    },
    "test.collections.CollectionTest.shuffledPredictably()": {
        "size": 2437,
        "type": "function"
    },
    "test.collections.CollectionTest.decomposeFirst()": {
        "size": 515,
        "type": "function"
    },
    "test.collections.CollectionTest.decomposeSplit()": {
        "size": 2077,
        "type": "function"
    },
    "test.collections.CollectionTest.decomposeList()": {
        "size": 1914,
        "type": "function"
    },
    "test.collections.CollectionTest.decomposeArray()": {
        "size": 1969,
        "type": "function"
    },
    "test.collections.CollectionTest.decomposeIntArray()": {
        "size": 1670,
        "type": "function"
    },
    "test.collections.CollectionTest.unzipList()": {
        "size": 1137,
        "type": "function"
    },
    "test.collections.CollectionTest.unzipArray()": {
        "size": 1307,
        "type": "function"
    },
    "test.collections.CollectionTest.specialLists()": {
        "size": 828,
        "type": "function"
    },
    "test.collections.CollectionTest.specialSets()": {
        "size": 829,
        "type": "function"
    },
    "test.collections.CollectionTest.specialMaps()": {
        "size": 991,
        "type": "function"
    },
    "test.collections.CollectionTest.toStringTest()": {
        "size": 659,
        "type": "function"
    },
    "test.collections.CollectionTest.randomAccess()": {
        "size": 1584,
        "type": "function"
    },
    "test.collections.CollectionTest.abstractCollectionToArray()": {
        "size": 2360,
        "type": "function"
    },
    "test.collections.CollectionTest.ensureCapacity()": {
        "size": 87,
        "type": "function"
    },
    "test.collections.CollectionTest.constructorWithCapacity()": {
        "size": 20981,
        "type": "function"
    },
    "test.collections.CollectionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.CollectionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.CollectionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.compare(T, T, @ExtensionFunctionType Function1<CompareContext<T>, Unit>)": {
        "size": 225,
        "type": "function"
    },
    "test.collections.CompareContext$propertyFails$lambda": {
        "size": 900,
        "type": "class"
    },
    "test.collections.CompareContext$propertyFails$lambda.<init>(@ExtensionFunctionType Function1<T, Unit>, CompareContext<T>)": {
        "size": 206,
        "type": "function"
    },
    "test.collections.CompareContext$propertyFails$lambda.invoke()": {
        "size": 337,
        "type": "function"
    },
    "test.collections.CompareContext$propertyFails$lambda.$getter": {
        "size": 81,
        "type": "field"
    },
    "test.collections.CompareContext$propertyFails$lambda.this$0": {
        "size": 56,
        "type": "field"
    },
    "test.collections.CompareContext": {
        "size": 4723,
        "type": "class"
    },
    "test.collections.CompareContext.<init>(T, T)": {
        "size": 149,
        "type": "function"
    },
    "test.collections.CompareContext.expected": {
        "size": 42,
        "type": "field"
    },
    "test.collections.CompareContext.actual": {
        "size": 40,
        "type": "field"
    },
    "test.collections.CompareContext.equals(String)": {
        "size": 124,
        "type": "function"
    },
    "test.collections.CompareContext.propertyEquals(String, @ExtensionFunctionType Function1<T, P>)": {
        "size": 231,
        "type": "function"
    },
    "test.collections.CompareContext.propertyEquals$default(String?, @ExtensionFunctionType Function1<T, P>, Int, Any?)": {
        "size": 414,
        "type": "function"
    },
    "test.collections.CompareContext.propertyFails(@ExtensionFunctionType Function1<T, Unit>)": {
        "size": 360,
        "type": "function"
    },
    "test.collections.CompareContext.compareProperty(@ExtensionFunctionType Function1<T, P>, @ExtensionFunctionType Function1<CompareContext<P>, Unit>)": {
        "size": 272,
        "type": "function"
    },
    "test.collections.CompareContext.assertFailEquals(Function0<Unit>, Function0<Unit>)": {
        "size": 2663,
        "type": "function"
    },
    "test.collections.CompareContext.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.CompareContext.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.CompareContext.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableCollectionOperations$lambda": {
        "size": 1239,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$mutableCollectionOperations$lambda.<init>(E)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableCollectionOperations$lambda.invoke(MutableCollection<E>)": {
        "size": 589,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableCollectionOperations$lambda.invoke(P1)": {
        "size": 353,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableCollectionOperations$lambda.$present": {
        "size": 42,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$mutableCollectionOperations$lambda.$absent": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$mutableCollectionOperations$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableListOperations$lambda": {
        "size": 1491,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$mutableListOperations$lambda.<init>(E)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableListOperations$lambda.invoke(MutableList<E>)": {
        "size": 776,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableListOperations$lambda.invoke(P1)": {
        "size": 341,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableListOperations$lambda.$present": {
        "size": 42,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$mutableListOperations$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableSetOperations$lambda": {
        "size": 2609,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$mutableSetOperations$lambda.<init>(E)": {
        "size": 113,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableSetOperations$lambda.invoke(MutableSet<E>)": {
        "size": 1850,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableSetOperations$lambda.invoke(P1)": {
        "size": 339,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableSetOperations$lambda.$absent": {
        "size": 41,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda": {
        "size": 1223,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.<init>(K, V)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.invoke(MutableMap<K, V>)": {
        "size": 551,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.invoke(P1)": {
        "size": 345,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.$k": {
        "size": 36,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.$v": {
        "size": 36,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.<init>(K)": {
        "size": 98,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$mutableMapOperations$lambda.<init>(V)": {
        "size": 98,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyCollectionOperations$lambda": {
        "size": 1020,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$emptyCollectionOperations$lambda.<init>(E)": {
        "size": 110,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyCollectionOperations$lambda.invoke(MutableCollection<E>)": {
        "size": 333,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyCollectionOperations$lambda.invoke(P1)": {
        "size": 353,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyCollectionOperations$lambda.$value": {
        "size": 40,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$emptyCollectionOperations$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyListOperations$lambda": {
        "size": 1004,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$emptyListOperations$lambda.<init>(E)": {
        "size": 110,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyListOperations$lambda.invoke(MutableList<E>)": {
        "size": 335,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyListOperations$lambda.invoke(P1)": {
        "size": 341,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyListOperations$lambda.$value": {
        "size": 40,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$emptyListOperations$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda": {
        "size": 1025,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda.<init>(K, V)": {
        "size": 123,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda.invoke(MutableMap<K, V>)": {
        "size": 308,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda.invoke(P1)": {
        "size": 345,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda.$k": {
        "size": 36,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda.$v": {
        "size": 36,
        "type": "field"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda.<init>(K)": {
        "size": 98,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$emptyMapOperations$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildList$lambda": {
        "size": 721,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$buildList$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildList$lambda.invoke(CompareContext<List<Char>>)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildList$lambda.invoke(P1)": {
        "size": 364,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$listBuilderSubList$lambda": {
        "size": 730,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$listBuilderSubList$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$listBuilderSubList$lambda.invoke(CompareContext<List<Char>>)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$listBuilderSubList$lambda.invoke(P1)": {
        "size": 364,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildSet$lambda": {
        "size": 797,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$buildSet$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildSet$lambda.invoke(CompareContext<Set<Char>>)": {
        "size": 190,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildSet$lambda.invoke(P1)": {
        "size": 362,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildMap$lambda": {
        "size": 740,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest$buildMap$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildMap$lambda.invoke(CompareContext<Map<Char, Int>>)": {
        "size": 122,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest$buildMap$lambda.invoke(P1)": {
        "size": 372,
        "type": "function"
    },
    "test.collections.<no name provided>.<init>()": {
        "size": 102,
        "type": "function"
    },
    "test.collections.<no name provided>.<get-key>()": {
        "size": 88,
        "type": "function"
    },
    "test.collections.<no name provided>.<get-value>()": {
        "size": 91,
        "type": "function"
    },
    "test.collections.<no name provided>.setValue(Int)": {
        "size": 86,
        "type": "function"
    },
    "test.collections.<no name provided>.setValue(V)": {
        "size": 315,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest": {
        "size": 95201,
        "type": "class"
    },
    "test.collections.ContainerBuilderTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.mutableCollectionOperations(E, E)": {
        "size": 3595,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.mutableListOperations(E, E)": {
        "size": 2374,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.mutableSetOperations(E, E)": {
        "size": 655,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.mutableMapOperations(K, V)": {
        "size": 1707,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.emptyCollectionOperations(E)": {
        "size": 2207,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.emptyListOperations(E)": {
        "size": 1228,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.emptyMapOperations(K, V)": {
        "size": 1259,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.buildList()": {
        "size": 16706,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.buildEmptyList()": {
        "size": 6167,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.listBuilderSubList()": {
        "size": 8995,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.buildSet()": {
        "size": 10555,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.buildEmptySet()": {
        "size": 6190,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.buildMap()": {
        "size": 22874,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.testBuildEmptyMap()": {
        "size": 6424,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ContainerBuilderTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.Collector": {
        "size": 2829,
        "type": "class"
    },
    "test.collections.Collector.<init>(K, MutableList<V>)": {
        "size": 147,
        "type": "function"
    },
    "test.collections.Collector.<init>(K, MutableList<V>?, Int, DefaultConstructorMarker?)": {
        "size": 455,
        "type": "function"
    },
    "test.collections.Collector.key": {
        "size": 37,
        "type": "field"
    },
    "test.collections.Collector.values": {
        "size": 53,
        "type": "field"
    },
    "test.collections.Collector.toString()": {
        "size": 454,
        "type": "function"
    },
    "test.collections.Collector.hashCode()": {
        "size": 472,
        "type": "function"
    },
    "test.collections.Collector.equals(Any?)": {
        "size": 993,
        "type": "function"
    },
    "test.collections.groupingProducers$verifyGrouping(Grouping<T, K>, List<T>, List<K>)": {
        "size": 1358,
        "type": "function"
    },
    "test.collections.groupingProducers$verifyGrouping$0(List<String>, List<Int>, Grouping<String, Int>)": {
        "size": 252,
        "type": "function"
    },
    "test.collections.foldWithComputedInitialValue$accumulateIfEven(String)": {
        "size": 625,
        "type": "function"
    },
    "test.collections.foldWithComputedInitialValue$toPair()": {
        "size": 169,
        "type": "function"
    },
    "test.collections.reduce$isVowel()": {
        "size": 169,
        "type": "function"
    },
    "test.collections.reduce$countVowels()": {
        "size": 1180,
        "type": "function"
    },
    "test.collections.GroupingTest$groupingProducers$lambda": {
        "size": 562,
        "type": "class"
    },
    "test.collections.GroupingTest$groupingProducers$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.GroupingTest$groupingProducers$lambda.invoke(String)": {
        "size": 71,
        "type": "function"
    },
    "test.collections.GroupingTest$groupingProducers$lambda.invoke(P1)": {
        "size": 298,
        "type": "function"
    },
    "test.collections.<no name provided>.sourceIterator()": {
        "size": 275,
        "type": "function"
    },
    "test.collections.<no name provided>.keyOf(String)": {
        "size": 311,
        "type": "function"
    },
    "test.collections.<no name provided>.keyOf(T)": {
        "size": 312,
        "type": "function"
    },
    "test.collections.<no name provided>.$elements": {
        "size": 54,
        "type": "field"
    },
    "test.collections.<no name provided>.<init>(Array<String>, Function1<String, Int>)": {
        "size": 228,
        "type": "function"
    },
    "test.collections.<no name provided>.$tmp0_groupingBy": {
        "size": 62,
        "type": "field"
    },
    "test.collections.<no name provided>.$keySelector": {
        "size": 67,
        "type": "field"
    },
    "test.collections.<no name provided>.<init>(Sequence<String>, Function1<String, Int>)": {
        "size": 231,
        "type": "function"
    },
    "test.collections.<no name provided>.$tmp1_groupingBy": {
        "size": 65,
        "type": "field"
    },
    "test.collections.<no name provided>.<init>(String)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.<no name provided>.keyOf(Char)": {
        "size": 257,
        "type": "function"
    },
    "test.collections.<no name provided>.$charSeq": {
        "size": 47,
        "type": "field"
    },
    "test.collections.<no name provided>.$moreElements": {
        "size": 58,
        "type": "field"
    },
    "test.collections.GroupingTest$foldWithComputedInitialValue$lambda": {
        "size": 1426,
        "type": "class"
    },
    "test.collections.GroupingTest$foldWithComputedInitialValue$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.GroupingTest$foldWithComputedInitialValue$lambda.invoke(Collector<Char, String>, Collector<Char, String>)": {
        "size": 564,
        "type": "function"
    },
    "test.collections.GroupingTest$foldWithComputedInitialValue$lambda.invoke(P1, P2)": {
        "size": 576,
        "type": "function"
    },
    "test.collections.<no name provided>.$elements2": {
        "size": 56,
        "type": "field"
    },
    "test.collections.<no name provided>.<init>(Array<String>)": {
        "size": 134,
        "type": "function"
    },
    "test.collections.GroupingTest": {
        "size": 38840,
        "type": "class"
    },
    "test.collections.GroupingTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.GroupingTest.groupingProducers()": {
        "size": 3952,
        "type": "function"
    },
    "test.collections.GroupingTest.foldWithConstantInitialValue()": {
        "size": 8819,
        "type": "function"
    },
    "test.collections.GroupingTest.foldWithComputedInitialValue()": {
        "size": 13419,
        "type": "function"
    },
    "test.collections.GroupingTest.reduce()": {
        "size": 8936,
        "type": "function"
    },
    "test.collections.GroupingTest.countEach()": {
        "size": 1763,
        "type": "function"
    },
    "test.collections.GroupingTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.GroupingTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.GroupingTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.iterableOf(Array<out T>)": {
        "size": 245,
        "type": "function"
    },
    "test.collections.toIterable()": {
        "size": 253,
        "type": "function"
    },
    "test.collections.IterableTest$<init>$lambda": {
        "size": 958,
        "type": "class"
    },
    "test.collections.IterableTest$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.IterableTest$<init>$lambda.invoke(Array<out String>)": {
        "size": 448,
        "type": "function"
    },
    "test.collections.IterableTest$<init>$lambda.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.collections.IterableTest": {
        "size": 3298,
        "type": "class"
    },
    "test.collections.IterableTest.<init>()": {
        "size": 256,
        "type": "function"
    },
    "test.collections.IterableTest.indexOf()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.IterableTest.lastIndexOf()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.indexOfFirst()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.IterableTest.indexOfLast()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.elementAt()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.IterableTest.first()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.IterableTest.firstOrNull()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.last()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.IterableTest.lastOrNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.IterableTest.zipWithNext()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.zipWithNextPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.IterableTest.chunked()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.IterableTest.windowed()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.IterableTest.createFrom(Array<out String>)": {
        "size": 76,
        "type": "function"
    },
    "test.collections.IterableTest.any()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.IterableTest.all()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.IterableTest.none()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.IterableTest.filter()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.IterableTest.filterIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.IterableTest.drop()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.IterableTest.dropWhile()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.IterableTest.filterNot()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.IterableTest.forEach()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.IterableTest.onEach()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.IterableTest.onEachIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.IterableTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.IterableTest.single()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.IterableTest.singleOrNull()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.IterableTest.map()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.IterableTest.flatten()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.IterableTest.mapIndexed()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.IterableTest.withIndex()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.IterableTest.mapNotNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.IterableTest.mapIndexedNotNull()": {
        "size": 51,
        "type": "function"
    },
    "test.collections.IterableTest.maxOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.IterableTest.minOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.IterableTest.count()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.IterableTest.sumBy()": {
        "size": 74,
        "type": "function"
    },
    "test.collections.IterableTest.withIndices()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.fold()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.IterableTest.reduce()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.IterableTest.scan()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.IterableTest.scanIndexed()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.runningReduce()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.IterableTest.runningReduceIndexed()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.IterableTest.mapAndJoinToString()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.IterableTest.testPlus(Function1<Iterable<String>, List<String>>)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.IterableTest.plusElement()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.plusCollection()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.IterableTest.plusArray()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.IterableTest.plusSequence()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.IterableTest.plusAssign()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.IterableTest.minusElement()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.IterableTest.minusCollection()": {
        "size": 49,
        "type": "function"
    },
    "test.collections.IterableTest.minusArray()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.IterableTest.minusSequence()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.IterableTest.minusAssign()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.IterableTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.IterableTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.IterableTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.SetTest$<init>$lambda": {
        "size": 941,
        "type": "class"
    },
    "test.collections.SetTest$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetTest$<init>$lambda.invoke(Array<out String>)": {
        "size": 441,
        "type": "function"
    },
    "test.collections.SetTest$<init>$lambda.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.collections.SetTest": {
        "size": 2691,
        "type": "class"
    },
    "test.collections.SetTest.<init>()": {
        "size": 279,
        "type": "function"
    },
    "test.collections.SetTest.createFrom(Array<out String>)": {
        "size": 71,
        "type": "function"
    },
    "test.collections.SetTest.any()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.SetTest.all()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.SetTest.none()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.SetTest.filter()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.SetTest.filterIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.SetTest.drop()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.SetTest.dropWhile()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.SetTest.filterNot()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.SetTest.forEach()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.SetTest.onEach()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.SetTest.onEachIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.SetTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.SetTest.single()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.SetTest.singleOrNull()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.SetTest.map()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.SetTest.flatten()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.SetTest.mapIndexed()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.SetTest.withIndex()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.SetTest.mapNotNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.SetTest.mapIndexedNotNull()": {
        "size": 51,
        "type": "function"
    },
    "test.collections.SetTest.maxOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.SetTest.minOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.SetTest.count()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.SetTest.sumBy()": {
        "size": 74,
        "type": "function"
    },
    "test.collections.SetTest.withIndices()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.SetTest.fold()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.SetTest.reduce()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.SetTest.scan()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.SetTest.scanIndexed()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.SetTest.runningReduce()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.SetTest.runningReduceIndexed()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.SetTest.mapAndJoinToString()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.SetTest.testPlus(Function1<Iterable<String>, List<String>>)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.SetTest.plusElement()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.SetTest.plusCollection()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.SetTest.plusArray()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.SetTest.plusSequence()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.SetTest.plusAssign()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.SetTest.minusElement()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.SetTest.minusCollection()": {
        "size": 49,
        "type": "function"
    },
    "test.collections.SetTest.minusArray()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.SetTest.minusSequence()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.SetTest.minusAssign()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.SetTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.SetTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.SetTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.LinkedSetTest$<init>$lambda": {
        "size": 961,
        "type": "class"
    },
    "test.collections.LinkedSetTest$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.LinkedSetTest$<init>$lambda.invoke(Array<out String>)": {
        "size": 451,
        "type": "function"
    },
    "test.collections.LinkedSetTest$<init>$lambda.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.collections.LinkedSetTest": {
        "size": 3344,
        "type": "class"
    },
    "test.collections.LinkedSetTest.<init>()": {
        "size": 295,
        "type": "function"
    },
    "test.collections.LinkedSetTest.indexOf()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.LinkedSetTest.lastIndexOf()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.indexOfFirst()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.LinkedSetTest.indexOfLast()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.elementAt()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.LinkedSetTest.first()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.LinkedSetTest.firstOrNull()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.last()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.LinkedSetTest.lastOrNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.LinkedSetTest.zipWithNext()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.zipWithNextPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.LinkedSetTest.chunked()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.LinkedSetTest.windowed()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.LinkedSetTest.createFrom(Array<out String>)": {
        "size": 75,
        "type": "function"
    },
    "test.collections.LinkedSetTest.any()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.LinkedSetTest.all()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.LinkedSetTest.none()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.LinkedSetTest.filter()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.LinkedSetTest.filterIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.LinkedSetTest.drop()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.LinkedSetTest.dropWhile()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.LinkedSetTest.filterNot()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.LinkedSetTest.forEach()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.LinkedSetTest.onEach()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.LinkedSetTest.onEachIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.LinkedSetTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.LinkedSetTest.single()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.LinkedSetTest.singleOrNull()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.LinkedSetTest.map()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.LinkedSetTest.flatten()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.LinkedSetTest.mapIndexed()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.LinkedSetTest.withIndex()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.LinkedSetTest.mapNotNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.LinkedSetTest.mapIndexedNotNull()": {
        "size": 51,
        "type": "function"
    },
    "test.collections.LinkedSetTest.maxOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.LinkedSetTest.minOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.LinkedSetTest.count()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.LinkedSetTest.sumBy()": {
        "size": 74,
        "type": "function"
    },
    "test.collections.LinkedSetTest.withIndices()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.fold()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.LinkedSetTest.reduce()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.LinkedSetTest.scan()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.LinkedSetTest.scanIndexed()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.runningReduce()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.LinkedSetTest.runningReduceIndexed()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.LinkedSetTest.mapAndJoinToString()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.LinkedSetTest.testPlus(Function1<Iterable<String>, List<String>>)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.LinkedSetTest.plusElement()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.plusCollection()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.LinkedSetTest.plusArray()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.LinkedSetTest.plusSequence()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.LinkedSetTest.plusAssign()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.LinkedSetTest.minusElement()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.LinkedSetTest.minusCollection()": {
        "size": 49,
        "type": "function"
    },
    "test.collections.LinkedSetTest.minusArray()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.LinkedSetTest.minusSequence()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.LinkedSetTest.minusAssign()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.LinkedSetTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.LinkedSetTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.LinkedSetTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ListTest$<init>$lambda": {
        "size": 945,
        "type": "class"
    },
    "test.collections.ListTest$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ListTest$<init>$lambda.invoke(Array<out String>)": {
        "size": 443,
        "type": "function"
    },
    "test.collections.ListTest$<init>$lambda.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.collections.ListTest": {
        "size": 3327,
        "type": "class"
    },
    "test.collections.ListTest.<init>()": {
        "size": 289,
        "type": "function"
    },
    "test.collections.ListTest.indexOf()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ListTest.lastIndexOf()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.indexOfFirst()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ListTest.indexOfLast()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.elementAt()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ListTest.first()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.ListTest.firstOrNull()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.last()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ListTest.lastOrNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ListTest.zipWithNext()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.zipWithNextPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.ListTest.chunked()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ListTest.windowed()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.ListTest.createFrom(Array<out String>)": {
        "size": 72,
        "type": "function"
    },
    "test.collections.ListTest.any()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.ListTest.all()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.ListTest.none()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ListTest.filter()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ListTest.filterIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ListTest.drop()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ListTest.dropWhile()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ListTest.filterNot()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ListTest.forEach()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ListTest.onEach()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ListTest.onEachIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ListTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.ListTest.single()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ListTest.singleOrNull()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ListTest.map()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.ListTest.flatten()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ListTest.mapIndexed()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ListTest.withIndex()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ListTest.mapNotNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ListTest.mapIndexedNotNull()": {
        "size": 51,
        "type": "function"
    },
    "test.collections.ListTest.maxOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ListTest.minOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ListTest.count()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.ListTest.sumBy()": {
        "size": 74,
        "type": "function"
    },
    "test.collections.ListTest.withIndices()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.fold()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ListTest.reduce()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ListTest.scan()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ListTest.scanIndexed()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.runningReduce()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ListTest.runningReduceIndexed()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.ListTest.mapAndJoinToString()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.ListTest.testPlus(Function1<Iterable<String>, List<String>>)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.ListTest.plusElement()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.plusCollection()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.ListTest.plusArray()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ListTest.plusSequence()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ListTest.plusAssign()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ListTest.minusElement()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ListTest.minusCollection()": {
        "size": 49,
        "type": "function"
    },
    "test.collections.ListTest.minusArray()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ListTest.minusSequence()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ListTest.minusAssign()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ListTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ListTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ListTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ArrayListTest$<init>$lambda": {
        "size": 965,
        "type": "class"
    },
    "test.collections.ArrayListTest$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ArrayListTest$<init>$lambda.invoke(Array<out String>)": {
        "size": 453,
        "type": "function"
    },
    "test.collections.ArrayListTest$<init>$lambda.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.collections.ArrayListTest": {
        "size": 3352,
        "type": "class"
    },
    "test.collections.ArrayListTest.<init>()": {
        "size": 299,
        "type": "function"
    },
    "test.collections.ArrayListTest.indexOf()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArrayListTest.lastIndexOf()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.indexOfFirst()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ArrayListTest.indexOfLast()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.elementAt()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ArrayListTest.first()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.ArrayListTest.firstOrNull()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.last()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ArrayListTest.lastOrNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ArrayListTest.zipWithNext()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.zipWithNextPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.ArrayListTest.chunked()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArrayListTest.windowed()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.ArrayListTest.createFrom(Array<out String>)": {
        "size": 77,
        "type": "function"
    },
    "test.collections.ArrayListTest.any()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.ArrayListTest.all()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.ArrayListTest.none()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ArrayListTest.filter()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ArrayListTest.filterIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ArrayListTest.drop()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ArrayListTest.dropWhile()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ArrayListTest.filterNot()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ArrayListTest.forEach()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArrayListTest.onEach()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ArrayListTest.onEachIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ArrayListTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.ArrayListTest.single()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ArrayListTest.singleOrNull()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ArrayListTest.map()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.ArrayListTest.flatten()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArrayListTest.mapIndexed()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ArrayListTest.withIndex()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ArrayListTest.mapNotNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ArrayListTest.mapIndexedNotNull()": {
        "size": 51,
        "type": "function"
    },
    "test.collections.ArrayListTest.maxOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ArrayListTest.minOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ArrayListTest.count()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.ArrayListTest.sumBy()": {
        "size": 74,
        "type": "function"
    },
    "test.collections.ArrayListTest.withIndices()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.fold()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ArrayListTest.reduce()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.ArrayListTest.scan()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.ArrayListTest.scanIndexed()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.runningReduce()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ArrayListTest.runningReduceIndexed()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.ArrayListTest.mapAndJoinToString()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.ArrayListTest.testPlus(Function1<Iterable<String>, List<String>>)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.ArrayListTest.plusElement()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.plusCollection()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.ArrayListTest.plusArray()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.ArrayListTest.plusSequence()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ArrayListTest.plusAssign()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ArrayListTest.minusElement()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.ArrayListTest.minusCollection()": {
        "size": 49,
        "type": "function"
    },
    "test.collections.ArrayListTest.minusArray()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ArrayListTest.minusSequence()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.ArrayListTest.minusAssign()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.ArrayListTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ArrayListTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ArrayListTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$elementAt$lambda": {
        "size": 525,
        "type": "class"
    },
    "test.collections.OrderedIterableTests$elementAt$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$elementAt$lambda.invoke(Int)": {
        "size": 66,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$elementAt$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$chunked$lambda": {
        "size": 856,
        "type": "class"
    },
    "test.collections.OrderedIterableTests$chunked$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$chunked$lambda.invoke(List<String>)": {
        "size": 348,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$chunked$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$windowed$lambda": {
        "size": 857,
        "type": "class"
    },
    "test.collections.OrderedIterableTests$windowed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$windowed$lambda.invoke(List<String>)": {
        "size": 348,
        "type": "function"
    },
    "test.collections.OrderedIterableTests$windowed$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.OrderedIterableTests": {
        "size": 85460,
        "type": "class"
    },
    "test.collections.OrderedIterableTests.<init>(Function1<Array<out String>, T>, T)": {
        "size": 171,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.indexOf()": {
        "size": 2128,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.lastIndexOf()": {
        "size": 2148,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.indexOfFirst()": {
        "size": 8039,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.indexOfLast()": {
        "size": 8438,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.elementAt()": {
        "size": 8399,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.first()": {
        "size": 5982,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.firstOrNull()": {
        "size": 2936,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.last()": {
        "size": 6841,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.lastOrNull()": {
        "size": 3999,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.zipWithNext()": {
        "size": 3954,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.zipWithNextPairs()": {
        "size": 1037,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.chunked()": {
        "size": 7234,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.windowed()": {
        "size": 17452,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.createFrom(Array<out String>)": {
        "size": 61,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.any()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.all()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.none()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.filter()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.filterIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.drop()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.dropWhile()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.filterNot()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.forEach()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.onEach()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.onEachIndexed()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.single()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.singleOrNull()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.map()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.flatten()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.mapIndexed()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.withIndex()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.mapNotNull()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.mapIndexedNotNull()": {
        "size": 51,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.maxOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.minOrNull()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.count()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.sumBy()": {
        "size": 74,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.withIndices()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.fold()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.reduce()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.scan()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.scanIndexed()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.runningReduce()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.runningReduceIndexed()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.mapAndJoinToString()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.testPlus(Function1<Iterable<String>, List<String>>)": {
        "size": 85,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.plusElement()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.plusCollection()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.plusArray()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.plusSequence()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.plusAssign()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.minusElement()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.minusCollection()": {
        "size": 49,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.minusArray()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.minusSequence()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.minusAssign()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.OrderedIterableTests.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.IterableTests$mapAndJoinToString$lambda": {
        "size": 560,
        "type": "class"
    },
    "test.collections.IterableTests$mapAndJoinToString$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.IterableTests$mapAndJoinToString$lambda.invoke(String)": {
        "size": 84,
        "type": "function"
    },
    "test.collections.IterableTests$mapAndJoinToString$lambda.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.collections.IterableTests$plusElement$lambda": {
        "size": 643,
        "type": "class"
    },
    "test.collections.IterableTests$plusElement$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.IterableTests$plusElement$lambda.invoke(Iterable<String>)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.IterableTests$plusElement$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.IterableTests$plusCollection$lambda": {
        "size": 653,
        "type": "class"
    },
    "test.collections.IterableTests$plusCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.IterableTests$plusCollection$lambda.invoke(Iterable<String>)": {
        "size": 147,
        "type": "function"
    },
    "test.collections.IterableTests$plusCollection$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.IterableTests$plusArray$lambda": {
        "size": 706,
        "type": "class"
    },
    "test.collections.IterableTests$plusArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.IterableTests$plusArray$lambda.invoke(Iterable<String>)": {
        "size": 197,
        "type": "function"
    },
    "test.collections.IterableTests$plusArray$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.IterableTests$plusSequence$lambda": {
        "size": 655,
        "type": "class"
    },
    "test.collections.IterableTests$plusSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.IterableTests$plusSequence$lambda.invoke(Iterable<String>)": {
        "size": 151,
        "type": "function"
    },
    "test.collections.IterableTests$plusSequence$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.IterableTests": {
        "size": 138032,
        "type": "class"
    },
    "test.collections.IterableTests.<init>(Function1<Array<out String>, T>, T)": {
        "size": 243,
        "type": "function"
    },
    "test.collections.IterableTests.createFrom": {
        "size": 74,
        "type": "field"
    },
    "test.collections.IterableTests.empty": {
        "size": 39,
        "type": "field"
    },
    "test.collections.IterableTests.createFrom(Array<out String>)": {
        "size": 189,
        "type": "function"
    },
    "test.collections.IterableTests.data": {
        "size": 38,
        "type": "field"
    },
    "test.collections.IterableTests.any()": {
        "size": 6567,
        "type": "function"
    },
    "test.collections.IterableTests.all()": {
        "size": 5483,
        "type": "function"
    },
    "test.collections.IterableTests.none()": {
        "size": 8298,
        "type": "function"
    },
    "test.collections.IterableTests.filter()": {
        "size": 4027,
        "type": "function"
    },
    "test.collections.IterableTests.filterIndexed()": {
        "size": 3227,
        "type": "function"
    },
    "test.collections.IterableTests.drop()": {
        "size": 2964,
        "type": "function"
    },
    "test.collections.IterableTests.dropWhile()": {
        "size": 3986,
        "type": "function"
    },
    "test.collections.IterableTests.filterNot()": {
        "size": 4069,
        "type": "function"
    },
    "test.collections.IterableTests.forEach()": {
        "size": 807,
        "type": "function"
    },
    "test.collections.IterableTests.onEach()": {
        "size": 2470,
        "type": "function"
    },
    "test.collections.IterableTests.onEachIndexed()": {
        "size": 5941,
        "type": "function"
    },
    "test.collections.IterableTests.contains()": {
        "size": 643,
        "type": "function"
    },
    "test.collections.IterableTests.single()": {
        "size": 10484,
        "type": "function"
    },
    "test.collections.IterableTests.singleOrNull()": {
        "size": 7197,
        "type": "function"
    },
    "test.collections.IterableTests.map()": {
        "size": 2757,
        "type": "function"
    },
    "test.collections.IterableTests.flatten()": {
        "size": 1442,
        "type": "function"
    },
    "test.collections.IterableTests.mapIndexed()": {
        "size": 2782,
        "type": "function"
    },
    "test.collections.IterableTests.withIndex()": {
        "size": 1585,
        "type": "function"
    },
    "test.collections.IterableTests.mapNotNull()": {
        "size": 3878,
        "type": "function"
    },
    "test.collections.IterableTests.mapIndexedNotNull()": {
        "size": 3859,
        "type": "function"
    },
    "test.collections.IterableTests.maxOrNull()": {
        "size": 2879,
        "type": "function"
    },
    "test.collections.IterableTests.minOrNull()": {
        "size": 2879,
        "type": "function"
    },
    "test.collections.IterableTests.count()": {
        "size": 13670,
        "type": "function"
    },
    "test.collections.IterableTests.sumBy()": {
        "size": 6352,
        "type": "function"
    },
    "test.collections.IterableTests.withIndices()": {
        "size": 1328,
        "type": "function"
    },
    "test.collections.IterableTests.fold()": {
        "size": 1617,
        "type": "function"
    },
    "test.collections.IterableTests.reduce()": {
        "size": 1413,
        "type": "function"
    },
    "test.collections.IterableTests.scan()": {
        "size": 3048,
        "type": "function"
    },
    "test.collections.IterableTests.scanIndexed()": {
        "size": 3617,
        "type": "function"
    },
    "test.collections.IterableTests.runningReduce()": {
        "size": 2431,
        "type": "function"
    },
    "test.collections.IterableTests.runningReduceIndexed()": {
        "size": 2904,
        "type": "function"
    },
    "test.collections.IterableTests.mapAndJoinToString()": {
        "size": 549,
        "type": "function"
    },
    "test.collections.IterableTests.testPlus(Function1<Iterable<String>, List<String>>)": {
        "size": 501,
        "type": "function"
    },
    "test.collections.IterableTests.plusElement()": {
        "size": 147,
        "type": "function"
    },
    "test.collections.IterableTests.plusCollection()": {
        "size": 153,
        "type": "function"
    },
    "test.collections.IterableTests.plusArray()": {
        "size": 143,
        "type": "function"
    },
    "test.collections.IterableTests.plusSequence()": {
        "size": 149,
        "type": "function"
    },
    "test.collections.IterableTests.plusAssign()": {
        "size": 650,
        "type": "function"
    },
    "test.collections.IterableTests.minusElement()": {
        "size": 299,
        "type": "function"
    },
    "test.collections.IterableTests.minusCollection()": {
        "size": 308,
        "type": "function"
    },
    "test.collections.IterableTests.minusArray()": {
        "size": 353,
        "type": "function"
    },
    "test.collections.IterableTests.minusSequence()": {
        "size": 310,
        "type": "function"
    },
    "test.collections.IterableTests.minusAssign()": {
        "size": 1735,
        "type": "function"
    },
    "test.collections.IterableTests.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.IterableTests.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.IterableTests.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.assertSorted(Function2<T, T, Boolean>)": {
        "size": 971,
        "type": "function"
    },
    "test.collections.Sortable": {
        "size": 2957,
        "type": "class"
    },
    "test.collections.Sortable.<init>(K, Int)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.Sortable.key": {
        "size": 37,
        "type": "field"
    },
    "test.collections.Sortable.index": {
        "size": 41,
        "type": "field"
    },
    "test.collections.Sortable.compareTo(Sortable<K>)": {
        "size": 448,
        "type": "function"
    },
    "test.collections.Sortable.compareTo(T)": {
        "size": 304,
        "type": "function"
    },
    "test.collections.Sortable.toString()": {
        "size": 443,
        "type": "function"
    },
    "test.collections.Sortable.hashCode()": {
        "size": 350,
        "type": "function"
    },
    "test.collections.Sortable.equals(Any?)": {
        "size": 947,
        "type": "function"
    },
    "test.collections.<no name provided>.<init>(Array<out T>)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.<no name provided>.$items": {
        "size": 51,
        "type": "field"
    },
    "test.collections.<no name provided>.<init>(Iterable<T>)": {
        "size": 150,
        "type": "function"
    },
    "test.collections.<no name provided>.$this_toIterable": {
        "size": 60,
        "type": "field"
    },
    "test.collections.assertStableSorted$lambda": {
        "size": 1688,
        "type": "class"
    },
    "test.collections.assertStableSorted$lambda.<init>(Boolean)": {
        "size": 131,
        "type": "function"
    },
    "test.collections.assertStableSorted$lambda.invoke(Sortable<K>, Sortable<K>)": {
        "size": 780,
        "type": "function"
    },
    "test.collections.assertStableSorted$lambda.invoke(P1, P2)": {
        "size": 532,
        "type": "function"
    },
    "test.collections.assertStableSorted$lambda.$descending": {
        "size": 51,
        "type": "field"
    },
    "test.collections.IteratorsTest": {
        "size": 1224,
        "type": "class"
    },
    "test.collections.IteratorsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.IteratorsTest.iterationOverIterator()": {
        "size": 916,
        "type": "function"
    },
    "test.collections.IteratorsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.IteratorsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.IteratorsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda$lambda": {
        "size": 681,
        "type": "class"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda$lambda.invoke(Pair<Int, Int>)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda$lambda.invoke(P1)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.binarySearch.sam$kotlin_Comparator$0": {
        "size": 721,
        "type": "class"
    },
    "test.collections.binarySearch.sam$kotlin_Comparator$0.function": {
        "size": 61,
        "type": "field"
    },
    "test.collections.binarySearch.sam$kotlin_Comparator$0.<init>(Function2<P1, P2, R>)": {
        "size": 133,
        "type": "function"
    },
    "test.collections.binarySearch.sam$kotlin_Comparator$0.compare(T, T)": {
        "size": 288,
        "type": "function"
    },
    "test.collections.binarySearch.sam$kotlin_Comparator$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.binarySearch.sam$kotlin_Comparator$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.binarySearch.sam$kotlin_Comparator$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$comparator$lambda": {
        "size": 1890,
        "type": "class"
    },
    "test.collections.binarySearch.ListBinarySearchTest$comparator$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$comparator$lambda.invoke(IncomparableDataItem<Int>?, IncomparableDataItem<Int>?)": {
        "size": 1000,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$comparator$lambda.invoke(P1, P2)": {
        "size": 584,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKey$lambda": {
        "size": 1165,
        "type": "class"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKey$lambda.<init>(Int)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKey$lambda.invoke(IncomparableDataItem<Int>)": {
        "size": 460,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKey$lambda.invoke(P1)": {
        "size": 336,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKey$lambda.$tmp0_binarySearchBy": {
        "size": 56,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKey$lambda.$tmp2_binarySearchBy": {
        "size": 56,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKey$lambda.$tmp4_binarySearchBy": {
        "size": 56,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda": {
        "size": 1611,
        "type": "class"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda.<init>(ListBinarySearchTest, IncomparableDataItem<IncomparableDataItem<Int>>)": {
        "size": 209,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda.invoke(IncomparableDataItem<IncomparableDataItem<Int>>)": {
        "size": 669,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda.invoke(P1)": {
        "size": 380,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda.this$0": {
        "size": 59,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda.$item": {
        "size": 85,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda.<init>(ListBinarySearchTest, List<IncomparableDataItem<IncomparableDataItem<Int>>>)": {
        "size": 215,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByKeyWithComparator$lambda.$list": {
        "size": 91,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda": {
        "size": 1186,
        "type": "class"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda.<init>(Pair<Int, Int>)": {
        "size": 120,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda.invoke(Pair<Int, Int>)": {
        "size": 535,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda.invoke(P1)": {
        "size": 314,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest$binarySearchByMultipleKeys$lambda.$item": {
        "size": 52,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest": {
        "size": 42210,
        "type": "class"
    },
    "test.collections.binarySearch.ListBinarySearchTest.<init>()": {
        "size": 768,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.values": {
        "size": 48,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest.notFound(Int)": {
        "size": 306,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.comparator": {
        "size": 81,
        "type": "field"
    },
    "test.collections.binarySearch.ListBinarySearchTest.binarySearchByElement()": {
        "size": 5447,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.binarySearchByElementNullable()": {
        "size": 4423,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.binarySearchWithComparator()": {
        "size": 6795,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.binarySearchByKey()": {
        "size": 9664,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.binarySearchByKeyWithComparator()": {
        "size": 7767,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.binarySearchByMultipleKeys()": {
        "size": 4959,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.binarySearch.ListBinarySearchTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.binarySearch.IncomparableDataItem": {
        "size": 1837,
        "type": "class"
    },
    "test.collections.binarySearch.IncomparableDataItem.<init>(T)": {
        "size": 101,
        "type": "function"
    },
    "test.collections.binarySearch.IncomparableDataItem.value": {
        "size": 39,
        "type": "field"
    },
    "test.collections.binarySearch.IncomparableDataItem.toString()": {
        "size": 378,
        "type": "function"
    },
    "test.collections.binarySearch.IncomparableDataItem.hashCode()": {
        "size": 293,
        "type": "function"
    },
    "test.collections.binarySearch.IncomparableDataItem.equals(Any?)": {
        "size": 861,
        "type": "function"
    },
    "test.collections.binarySearch.pred()": {
        "size": 225,
        "type": "function"
    },
    "test.collections.binarySearch.succ()": {
        "size": 224,
        "type": "function"
    },
    "test.collections.ListSpecificTest": {
        "size": 25596,
        "type": "class"
    },
    "test.collections.ListSpecificTest.<init>()": {
        "size": 253,
        "type": "function"
    },
    "test.collections.ListSpecificTest.data": {
        "size": 49,
        "type": "field"
    },
    "test.collections.ListSpecificTest.empty": {
        "size": 50,
        "type": "field"
    },
    "test.collections.ListSpecificTest._toString()": {
        "size": 237,
        "type": "function"
    },
    "test.collections.ListSpecificTest.tail()": {
        "size": 337,
        "type": "function"
    },
    "test.collections.ListSpecificTest.slice()": {
        "size": 5792,
        "type": "function"
    },
    "test.collections.ListSpecificTest.getOr()": {
        "size": 10745,
        "type": "function"
    },
    "test.collections.ListSpecificTest.lastIndex()": {
        "size": 453,
        "type": "function"
    },
    "test.collections.ListSpecificTest.indexOfLast()": {
        "size": 4732,
        "type": "function"
    },
    "test.collections.ListSpecificTest.mutableList()": {
        "size": 1142,
        "type": "function"
    },
    "test.collections.ListSpecificTest.testNullToString()": {
        "size": 254,
        "type": "function"
    },
    "test.collections.ListSpecificTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ListSpecificTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ListSpecificTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda$lambda": {
        "size": 914,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda$lambda.<init>(List<String>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda$lambda.invoke(String)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda$lambda.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda$lambda.$data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda$lambda": {
        "size": 914,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda$lambda.<init>(List<String>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda$lambda.invoke(String)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda$lambda.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda$lambda.$data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$testOperation$o": {
        "size": 2110,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$testOperation$o.<init>(Function1<List<T>, C>, List<T>, Boolean, List<T>)": {
        "size": 337,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$testOperation$o.invoke(@ExtensionFunctionType Function1<C, Boolean>)": {
        "size": 944,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$testOperation$o.invoke(P1)": {
        "size": 400,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$testOperation$o.$toMutableCollection": {
        "size": 74,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$testOperation$o.$before": {
        "size": 47,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$testOperation$o.$expectedModified": {
        "size": 57,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$testOperation$o.$after": {
        "size": 46,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$testOperation$lambda": {
        "size": 582,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$testOperation$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$testOperation$lambda.invoke(List<T>)": {
        "size": 94,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$testOperation$lambda.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAll$lambda": {
        "size": 1083,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$addAll$lambda.<init>(List<String>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAll$lambda.invoke(MutableList<String>)": {
        "size": 403,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAll$lambda.invoke(P1)": {
        "size": 342,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAll$lambda.$data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$addAll$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAll$lambda.invoke(List<String>)": {
        "size": 193,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAll$lambda.invoke(HashSet<String>)": {
        "size": 399,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda": {
        "size": 4915,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda.<init>(Int, List<Int>, List<Int>, Int)": {
        "size": 277,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda.invoke(MutableList<Int>)": {
        "size": 3760,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda.invoke(P1)": {
        "size": 342,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda.$index": {
        "size": 42,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda.$insertion": {
        "size": 52,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda.$original": {
        "size": 51,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$addAllAtIndex$lambda.$insertSize": {
        "size": 47,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$removeFirst$lambda": {
        "size": 3335,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$removeFirst$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeFirst$lambda.invoke(MutableList<String>)": {
        "size": 2656,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeFirst$lambda.invoke(P1)": {
        "size": 345,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeLast$lambda": {
        "size": 3330,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$removeLast$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeLast$lambda.invoke(MutableList<String>)": {
        "size": 2652,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeLast$lambda.invoke(P1)": {
        "size": 345,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda": {
        "size": 1095,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.<init>(List<String>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.invoke(MutableList<String>)": {
        "size": 412,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.invoke(P1)": {
        "size": 342,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.$data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.invoke(CharSequence)": {
        "size": 107,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.<init>(Function1<CharSequence, Boolean>)": {
        "size": 153,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$removeAll$lambda.$predicate": {
        "size": 75,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda": {
        "size": 1095,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.<init>(List<String>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.invoke(MutableList<String>)": {
        "size": 412,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.invoke(P1)": {
        "size": 342,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.$data": {
        "size": 50,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.invoke(CharSequence)": {
        "size": 107,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.<init>(Function1<CharSequence, Boolean>)": {
        "size": 153,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$retainAll$lambda.$predicate": {
        "size": 75,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$listFill$lambda": {
        "size": 922,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$listFill$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$listFill$lambda.invoke(MutableList<Int>)": {
        "size": 367,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$listFill$lambda.invoke(P1)": {
        "size": 339,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$shuffle$lambda": {
        "size": 1558,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$shuffle$lambda.<init>(List<Int>)": {
        "size": 115,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$shuffle$lambda.invoke(MutableList<Int>)": {
        "size": 883,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$shuffle$lambda.invoke(P1)": {
        "size": 343,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$shuffle$lambda.$list": {
        "size": 47,
        "type": "field"
    },
    "test.collections.MutableCollectionTest$shufflePredictably$lambda": {
        "size": 862,
        "type": "class"
    },
    "test.collections.MutableCollectionTest$shufflePredictably$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$shufflePredictably$lambda.invoke(MutableList<Int>)": {
        "size": 292,
        "type": "function"
    },
    "test.collections.MutableCollectionTest$shufflePredictably$lambda.invoke(P1)": {
        "size": 344,
        "type": "function"
    },
    "test.collections.MutableCollectionTest": {
        "size": 28876,
        "type": "class"
    },
    "test.collections.MutableCollectionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.testOperation(List<T>, List<T>, Boolean, Function1<List<T>, C>)": {
        "size": 438,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.testOperation(List<T>, List<T>, Boolean)": {
        "size": 404,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.addAll()": {
        "size": 2753,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.forAllStandardMutableLists(List<T>, Function1<MutableList<T>, Unit>)": {
        "size": 1187,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.addAllAtIndex()": {
        "size": 6608,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.removeFirst()": {
        "size": 228,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.removeLast()": {
        "size": 226,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.removeAll()": {
        "size": 3480,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.retainAll()": {
        "size": 5751,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.listFill()": {
        "size": 1628,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.shuffle()": {
        "size": 1673,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.shufflePredictably()": {
        "size": 2724,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.MutableCollectionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda$lambda": {
        "size": 770,
        "type": "class"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda$lambda.invoke(MutableListIterator<Int>)": {
        "size": 159,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda$lambda.invoke(P1)": {
        "size": 371,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda$lambda": {
        "size": 826,
        "type": "class"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda$lambda.invoke(MutableListIterator<Int>)": {
        "size": 199,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda$lambda.invoke(P1)": {
        "size": 371,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testBehavior$lambda": {
        "size": 721,
        "type": "class"
    },
    "test.collections.ReversedViewsTest$testBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testBehavior$lambda.invoke(CompareContext<List<Long>>)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testBehavior$lambda.invoke(P1)": {
        "size": 364,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testMutableBehavior$lambda": {
        "size": 728,
        "type": "class"
    },
    "test.collections.ReversedViewsTest$testMutableBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testMutableBehavior$lambda.invoke(CompareContext<List<Long>>)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testMutableBehavior$lambda.invoke(P1)": {
        "size": 364,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda": {
        "size": 1682,
        "type": "class"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda.invoke(CompareContext<MutableListIterator<Int>>)": {
        "size": 976,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorAdd$lambda.invoke(P1)": {
        "size": 392,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda": {
        "size": 14291,
        "type": "class"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda.invoke(CompareContext<MutableListIterator<Int>>)": {
        "size": 13038,
        "type": "function"
    },
    "test.collections.ReversedViewsTest$testIteratorRemove$lambda.invoke(P1)": {
        "size": 392,
        "type": "function"
    },
    "test.collections.ReversedViewsTest": {
        "size": 54465,
        "type": "class"
    },
    "test.collections.ReversedViewsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testNullToString()": {
        "size": 276,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testBehavior()": {
        "size": 481,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableBehavior()": {
        "size": 509,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testSimple()": {
        "size": 812,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testRandomAccess()": {
        "size": 885,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testDoubleReverse()": {
        "size": 923,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testEmpty()": {
        "size": 204,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testReversedSubList()": {
        "size": 429,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableSubList()": {
        "size": 1564,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableSimple()": {
        "size": 833,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableDoubleReverse()": {
        "size": 951,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableEmpty()": {
        "size": 288,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableReversedSubList()": {
        "size": 450,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableAdd()": {
        "size": 1616,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableSet()": {
        "size": 1145,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableRemove()": {
        "size": 1126,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableRemoveByObj()": {
        "size": 607,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testMutableClear()": {
        "size": 580,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testContains()": {
        "size": 1330,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testBidirectionalModifications()": {
        "size": 1433,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testIndexOf()": {
        "size": 1743,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testLastIndexOf()": {
        "size": 1755,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testIteratorAdd()": {
        "size": 2047,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testIteratorRemove()": {
        "size": 2243,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testIteratorSet()": {
        "size": 821,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testGetIOOB()": {
        "size": 6777,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testSetIOOB()": {
        "size": 3481,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testAddIOOB()": {
        "size": 3536,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testRemoveIOOB()": {
        "size": 3418,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testIteratorNSEOnNext()": {
        "size": 4868,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.testIteratorNSEOnPrevious()": {
        "size": 4922,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.ReversedViewsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.seekEnd()": {
        "size": 123,
        "type": "function"
    },
    "test.collections.fibonacci()": {
        "size": 364,
        "type": "function"
    },
    "test.collections.indexSequence()": {
        "size": 195,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda$lambda": {
        "size": 810,
        "type": "class"
    },
    "test.collections.SequenceTest$zipWithNext$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda$lambda.invoke(Int, Int)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda$lambda.invoke(P1, P2)": {
        "size": 496,
        "type": "function"
    },
    "test.collections.TriggerSequence": {
        "size": 1142,
        "type": "class"
    },
    "test.collections.TriggerSequence.<init>(Sequence<T>)": {
        "size": 143,
        "type": "function"
    },
    "test.collections.TriggerSequence.source": {
        "size": 50,
        "type": "field"
    },
    "test.collections.TriggerSequence.iterated": {
        "size": 30,
        "type": "field"
    },
    "test.collections.TriggerSequence.iterator()": {
        "size": 634,
        "type": "function"
    },
    "test.collections.TriggerSequence.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.TriggerSequence.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.TriggerSequence.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.firstNotNullOf$isMonodigit()": {
        "size": 152,
        "type": "function"
    },
    "test.collections.firstNotNullOf$doubleIfNotMonodigit()": {
        "size": 292,
        "type": "function"
    },
    "test.collections.SequenceTest$filterEmptySequence$lambda": {
        "size": 571,
        "type": "class"
    },
    "test.collections.SequenceTest$filterEmptySequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$filterEmptySequence$lambda.invoke(String)": {
        "size": 70,
        "type": "function"
    },
    "test.collections.SequenceTest$filterEmptySequence$lambda.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.SequenceTest$mapEmptySequence$lambda": {
        "size": 567,
        "type": "class"
    },
    "test.collections.SequenceTest$mapEmptySequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$mapEmptySequence$lambda.invoke(String)": {
        "size": 69,
        "type": "function"
    },
    "test.collections.SequenceTest$mapEmptySequence$lambda.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.SequenceTest$filterIndexed$lambda": {
        "size": 926,
        "type": "class"
    },
    "test.collections.SequenceTest$filterIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$filterIndexed$lambda.invoke(Int, Int)": {
        "size": 158,
        "type": "function"
    },
    "test.collections.SequenceTest$filterIndexed$lambda.invoke(P1, P2)": {
        "size": 526,
        "type": "function"
    },
    "test.collections.SequenceTest$filterNullable$lambda": {
        "size": 666,
        "type": "class"
    },
    "test.collections.SequenceTest$filterNullable$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$filterNullable$lambda.invoke(String?)": {
        "size": 163,
        "type": "function"
    },
    "test.collections.SequenceTest$filterNullable$lambda.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.SequenceTest$filterNot$lambda": {
        "size": 582,
        "type": "class"
    },
    "test.collections.SequenceTest$filterNot$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$filterNot$lambda.invoke(String?)": {
        "size": 90,
        "type": "function"
    },
    "test.collections.SequenceTest$filterNot$lambda.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexed$lambda": {
        "size": 857,
        "type": "class"
    },
    "test.collections.SequenceTest$mapIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexed$lambda.invoke(Int, Int)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexed$lambda.invoke(P1, P2)": {
        "size": 504,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexed$lambda.invoke(Int)": {
        "size": 89,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexed$lambda.invoke(P1)": {
        "size": 295,
        "type": "function"
    },
    "test.collections.SequenceTest$mapNotNull$lambda": {
        "size": 678,
        "type": "class"
    },
    "test.collections.SequenceTest$mapNotNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$mapNotNull$lambda.invoke(Int)": {
        "size": 222,
        "type": "function"
    },
    "test.collections.SequenceTest$mapNotNull$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexedNotNull$lambda": {
        "size": 1180,
        "type": "class"
    },
    "test.collections.SequenceTest$mapIndexedNotNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexedNotNull$lambda.invoke(Int, Int)": {
        "size": 432,
        "type": "function"
    },
    "test.collections.SequenceTest$mapIndexedNotNull$lambda.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.collections.SequenceTest$mapAndJoinToString$lambda": {
        "size": 654,
        "type": "class"
    },
    "test.collections.SequenceTest$mapAndJoinToString$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$mapAndJoinToString$lambda.invoke(IndexedValue<Int>)": {
        "size": 146,
        "type": "function"
    },
    "test.collections.SequenceTest$mapAndJoinToString$lambda.invoke(P1)": {
        "size": 324,
        "type": "function"
    },
    "test.collections.SequenceTest$withIndex$lambda": {
        "size": 688,
        "type": "class"
    },
    "test.collections.SequenceTest$withIndex$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$withIndex$lambda.invoke(IndexedValue<String>)": {
        "size": 186,
        "type": "function"
    },
    "test.collections.SequenceTest$withIndex$lambda.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.collections.SequenceTest$onEach$lambda": {
        "size": 912,
        "type": "class"
    },
    "test.collections.SequenceTest$onEach$lambda.<init>($closureBox$)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.SequenceTest$onEach$lambda.invoke(String)": {
        "size": 307,
        "type": "function"
    },
    "test.collections.SequenceTest$onEach$lambda.invoke(P1)": {
        "size": 313,
        "type": "function"
    },
    "test.collections.SequenceTest$onEach$lambda.$count": {
        "size": 51,
        "type": "field"
    },
    "test.collections.SequenceTest$onEachIndexed$lambda": {
        "size": 1230,
        "type": "class"
    },
    "test.collections.SequenceTest$onEachIndexed$lambda.<init>($closureBox$)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.SequenceTest$onEachIndexed$lambda.invoke(Int, String)": {
        "size": 362,
        "type": "function"
    },
    "test.collections.SequenceTest$onEachIndexed$lambda.invoke(P1, P2)": {
        "size": 517,
        "type": "function"
    },
    "test.collections.SequenceTest$onEachIndexed$lambda.$count": {
        "size": 51,
        "type": "field"
    },
    "test.collections.SequenceTest$filterAndTakeWhileExtractTheElementsWithinRange$lambda": {
        "size": 613,
        "type": "class"
    },
    "test.collections.SequenceTest$filterAndTakeWhileExtractTheElementsWithinRange$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$filterAndTakeWhileExtractTheElementsWithinRange$lambda.invoke(Int)": {
        "size": 93,
        "type": "function"
    },
    "test.collections.SequenceTest$filterAndTakeWhileExtractTheElementsWithinRange$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$foldReducesTheFirstNElements$lambda": {
        "size": 819,
        "type": "class"
    },
    "test.collections.SequenceTest$foldReducesTheFirstNElements$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$foldReducesTheFirstNElements$lambda.invoke(Int, Int)": {
        "size": 101,
        "type": "function"
    },
    "test.collections.SequenceTest$foldReducesTheFirstNElements$lambda.invoke(P1, P2)": {
        "size": 496,
        "type": "function"
    },
    "test.collections.SequenceTest$foldReducesTheFirstNElements$lambda.invoke(Int)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.SequenceTest$foldReducesTheFirstNElements$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$mapAndTakeWhileExtractTheTransformedElements$lambda": {
        "size": 605,
        "type": "class"
    },
    "test.collections.SequenceTest$mapAndTakeWhileExtractTheTransformedElements$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$mapAndTakeWhileExtractTheTransformedElements$lambda.invoke(Int)": {
        "size": 96,
        "type": "function"
    },
    "test.collections.SequenceTest$mapAndTakeWhileExtractTheTransformedElements$lambda.invoke(P1)": {
        "size": 295,
        "type": "function"
    },
    "test.collections.SequenceTest$joinConcatenatesTheFirstNElementsAboveAThreshold$lambda": {
        "size": 612,
        "type": "class"
    },
    "test.collections.SequenceTest$joinConcatenatesTheFirstNElementsAboveAThreshold$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$joinConcatenatesTheFirstNElementsAboveAThreshold$lambda.invoke(Int)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.SequenceTest$joinConcatenatesTheFirstNElementsAboveAThreshold$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$scan$lambda": {
        "size": 832,
        "type": "class"
    },
    "test.collections.SequenceTest$scan$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$scan$lambda.invoke(String, Int)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.SequenceTest$scan$lambda.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.collections.SequenceTest$scanIndexed$lambda": {
        "size": 1333,
        "type": "class"
    },
    "test.collections.SequenceTest$scanIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$scanIndexed$lambda.invoke(Int)": {
        "size": 227,
        "type": "function"
    },
    "test.collections.SequenceTest$scanIndexed$lambda.invoke(P1)": {
        "size": 293,
        "type": "function"
    },
    "test.collections.SequenceTest$scanIndexed$lambda.invoke(Int, String, Char)": {
        "size": 333,
        "type": "function"
    },
    "test.collections.SequenceTest$scanIndexed$lambda.invoke(P1, P2, P3)": {
        "size": 689,
        "type": "function"
    },
    "test.collections.SequenceTest$runningReduce$lambda": {
        "size": 839,
        "type": "class"
    },
    "test.collections.SequenceTest$runningReduce$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$runningReduce$lambda.invoke(Int, Int)": {
        "size": 105,
        "type": "function"
    },
    "test.collections.SequenceTest$runningReduce$lambda.invoke(P1, P2)": {
        "size": 498,
        "type": "function"
    },
    "test.collections.SequenceTest$runningReduceIndexed$lambda": {
        "size": 1159,
        "type": "class"
    },
    "test.collections.SequenceTest$runningReduceIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$runningReduceIndexed$lambda.invoke(Int, Int, Int)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.SequenceTest$runningReduceIndexed$lambda.invoke(P1, P2, P3)": {
        "size": 707,
        "type": "function"
    },
    "test.collections.SequenceTest$dropWhile$lambda": {
        "size": 574,
        "type": "class"
    },
    "test.collections.SequenceTest$dropWhile$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$dropWhile$lambda.invoke(Int)": {
        "size": 92,
        "type": "function"
    },
    "test.collections.SequenceTest$dropWhile$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda": {
        "size": 803,
        "type": "class"
    },
    "test.collections.SequenceTest$zipWithNext$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda.invoke(Int, Int)": {
        "size": 102,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda.invoke(P1, P2)": {
        "size": 496,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda.invoke(Sequence<Int>)": {
        "size": 202,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNext$lambda.invoke(P1)": {
        "size": 290,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNextPairs$lambda": {
        "size": 594,
        "type": "class"
    },
    "test.collections.SequenceTest$zipWithNextPairs$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNextPairs$lambda.invoke(Sequence<Int>)": {
        "size": 97,
        "type": "function"
    },
    "test.collections.SequenceTest$zipWithNextPairs$lambda.invoke(P1)": {
        "size": 290,
        "type": "function"
    },
    "test.collections.SequenceTest$chunked$lambda": {
        "size": 833,
        "type": "class"
    },
    "test.collections.SequenceTest$chunked$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$chunked$lambda.invoke(Int)": {
        "size": 125,
        "type": "function"
    },
    "test.collections.SequenceTest$chunked$lambda.invoke(P1)": {
        "size": 290,
        "type": "function"
    },
    "test.collections.SequenceTest$chunked$lambda.invoke(List<Int>)": {
        "size": 342,
        "type": "function"
    },
    "test.collections.SequenceTest$chunked$lambda.invoke(Sequence<Int>)": {
        "size": 101,
        "type": "function"
    },
    "test.collections.SequenceTest$windowed$lambda": {
        "size": 834,
        "type": "class"
    },
    "test.collections.SequenceTest$windowed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$windowed$lambda.invoke(Int)": {
        "size": 125,
        "type": "function"
    },
    "test.collections.SequenceTest$windowed$lambda.invoke(P1)": {
        "size": 290,
        "type": "function"
    },
    "test.collections.SequenceTest$windowed$lambda.invoke(List<Int>)": {
        "size": 342,
        "type": "function"
    },
    "test.collections.SequenceTest$windowed$lambda.invoke(Sequence<Int>)": {
        "size": 225,
        "type": "function"
    },
    "test.collections.SequenceTest$zip$lambda": {
        "size": 833,
        "type": "class"
    },
    "test.collections.SequenceTest$zip$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$zip$lambda.invoke(String, String)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.SequenceTest$zip$lambda.invoke(P1, P2)": {
        "size": 482,
        "type": "function"
    },
    "test.collections.SequenceTest$toStringJoinsNoMoreThanTheFirstTenElements$lambda": {
        "size": 608,
        "type": "class"
    },
    "test.collections.SequenceTest$toStringJoinsNoMoreThanTheFirstTenElements$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$toStringJoinsNoMoreThanTheFirstTenElements$lambda.invoke(Int)": {
        "size": 93,
        "type": "function"
    },
    "test.collections.SequenceTest$toStringJoinsNoMoreThanTheFirstTenElements$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$plusElement$lambda": {
        "size": 656,
        "type": "class"
    },
    "test.collections.SequenceTest$plusElement$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$plusElement$lambda.invoke(Sequence<String>)": {
        "size": 150,
        "type": "function"
    },
    "test.collections.SequenceTest$plusElement$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$plusCollection$lambda": {
        "size": 666,
        "type": "class"
    },
    "test.collections.SequenceTest$plusCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$plusCollection$lambda.invoke(Sequence<String>)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.SequenceTest$plusCollection$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$plusArray$lambda": {
        "size": 719,
        "type": "class"
    },
    "test.collections.SequenceTest$plusArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$plusArray$lambda.invoke(Sequence<String>)": {
        "size": 207,
        "type": "function"
    },
    "test.collections.SequenceTest$plusArray$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$plusSequence$lambda": {
        "size": 668,
        "type": "class"
    },
    "test.collections.SequenceTest$plusSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$plusSequence$lambda.invoke(Sequence<String>)": {
        "size": 161,
        "type": "function"
    },
    "test.collections.SequenceTest$plusSequence$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$minusElement$lambda": {
        "size": 655,
        "type": "class"
    },
    "test.collections.SequenceTest$minusElement$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$minusElement$lambda.invoke(Sequence<String>)": {
        "size": 148,
        "type": "function"
    },
    "test.collections.SequenceTest$minusElement$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$minusCollection$lambda": {
        "size": 664,
        "type": "class"
    },
    "test.collections.SequenceTest$minusCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$minusCollection$lambda.invoke(Sequence<String>)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.SequenceTest$minusCollection$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$minusArray$lambda": {
        "size": 717,
        "type": "class"
    },
    "test.collections.SequenceTest$minusArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$minusArray$lambda.invoke(Sequence<String>)": {
        "size": 204,
        "type": "function"
    },
    "test.collections.SequenceTest$minusArray$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$minusSequence$lambda": {
        "size": 666,
        "type": "class"
    },
    "test.collections.SequenceTest$minusSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$minusSequence$lambda.invoke(Sequence<String>)": {
        "size": 158,
        "type": "function"
    },
    "test.collections.SequenceTest$minusSequence$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunction$lambda": {
        "size": 950,
        "type": "class"
    },
    "test.collections.SequenceTest$sequenceFromFunction$lambda.<init>($closureBox$)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunction$lambda.invoke()": {
        "size": 594,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunction$lambda.$count": {
        "size": 51,
        "type": "field"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithInitialValue$lambda": {
        "size": 668,
        "type": "class"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithInitialValue$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithInitialValue$lambda.invoke(Int)": {
        "size": 187,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithInitialValue$lambda.invoke(P1)": {
        "size": 265,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithLazyInitialValue$lambda": {
        "size": 672,
        "type": "class"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithLazyInitialValue$lambda.<init>($closureBox$)": {
        "size": 121,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithLazyInitialValue$lambda.invoke()": {
        "size": 309,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithLazyInitialValue$lambda.$start": {
        "size": 51,
        "type": "field"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithLazyInitialValue$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithLazyInitialValue$lambda.invoke(Int)": {
        "size": 187,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceFromFunctionWithLazyInitialValue$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceExtensions$lambda": {
        "size": 578,
        "type": "class"
    },
    "test.collections.SequenceTest$sequenceExtensions$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceExtensions$lambda.invoke(Int)": {
        "size": 88,
        "type": "function"
    },
    "test.collections.SequenceTest$sequenceExtensions$lambda.invoke(P1)": {
        "size": 295,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapAndTakeExtractTheTransformedElements$lambda": {
        "size": 605,
        "type": "class"
    },
    "test.collections.SequenceTest$flatMapAndTakeExtractTheTransformedElements$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapAndTakeExtractTheTransformedElements$lambda.invoke(Int)": {
        "size": 112,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapAndTakeExtractTheTransformedElements$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMap$lambda": {
        "size": 582,
        "type": "class"
    },
    "test.collections.SequenceTest$flatMap$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMap$lambda.invoke(Int)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMap$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapOnEmpty$lambda": {
        "size": 591,
        "type": "class"
    },
    "test.collections.SequenceTest$flatMapOnEmpty$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapOnEmpty$lambda.invoke(Int)": {
        "size": 128,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapOnEmpty$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapWithEmptyItems$lambda": {
        "size": 752,
        "type": "class"
    },
    "test.collections.SequenceTest$flatMapWithEmptyItems$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapWithEmptyItems$lambda.invoke(Int)": {
        "size": 276,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapWithEmptyItems$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapIndexed$lambda": {
        "size": 898,
        "type": "class"
    },
    "test.collections.SequenceTest$flatMapIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapIndexed$lambda.invoke(Int, Int)": {
        "size": 175,
        "type": "function"
    },
    "test.collections.SequenceTest$flatMapIndexed$lambda.invoke(P1, P2)": {
        "size": 474,
        "type": "function"
    },
    "test.collections.SequenceTest$flatten$lambda": {
        "size": 582,
        "type": "class"
    },
    "test.collections.SequenceTest$flatten$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$flatten$lambda.invoke(Int)": {
        "size": 126,
        "type": "function"
    },
    "test.collections.SequenceTest$flatten$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SequenceTest$distinct$lambda": {
        "size": 572,
        "type": "class"
    },
    "test.collections.SequenceTest$distinct$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$distinct$lambda.invoke(Int)": {
        "size": 94,
        "type": "function"
    },
    "test.collections.SequenceTest$distinct$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$distinctBy$lambda": {
        "size": 574,
        "type": "class"
    },
    "test.collections.SequenceTest$distinctBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$distinctBy$lambda.invoke(Int)": {
        "size": 94,
        "type": "function"
    },
    "test.collections.SequenceTest$distinctBy$lambda.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.SequenceTest$sorted$lambda": {
        "size": 800,
        "type": "class"
    },
    "test.collections.SequenceTest$sorted$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$sorted$lambda.invoke(Int, Int)": {
        "size": 96,
        "type": "function"
    },
    "test.collections.SequenceTest$sorted$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.collections.SequenceTest$sortedBy$lambda": {
        "size": 1254,
        "type": "class"
    },
    "test.collections.SequenceTest$sortedBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$sortedBy$lambda.invoke(String, String)": {
        "size": 506,
        "type": "function"
    },
    "test.collections.SequenceTest$sortedBy$lambda.invoke(P1, P2)": {
        "size": 512,
        "type": "function"
    },
    "test.collections.SequenceTest$sortedBy$lambda.invoke(Char?, Char?)": {
        "size": 380,
        "type": "function"
    },
    "test.collections.SequenceTest$sortedWith$lambda": {
        "size": 1588,
        "type": "class"
    },
    "test.collections.SequenceTest$sortedWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SequenceTest$sortedWith$lambda.invoke(String, String)": {
        "size": 818,
        "type": "function"
    },
    "test.collections.SequenceTest$sortedWith$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.<no name provided>.counter": {
        "size": 25,
        "type": "field"
    },
    "test.collections.<no name provided>.nextBits(Int)": {
        "size": 525,
        "type": "function"
    },
    "test.collections.<no name provided>.nextInt()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.<no name provided>.nextInt(Int)": {
        "size": 50,
        "type": "function"
    },
    "test.collections.<no name provided>.nextInt(Int, Int)": {
        "size": 61,
        "type": "function"
    },
    "test.collections.<no name provided>.nextLong()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.<no name provided>.nextLong(Long)": {
        "size": 53,
        "type": "function"
    },
    "test.collections.<no name provided>.nextLong(Long, Long)": {
        "size": 65,
        "type": "function"
    },
    "test.collections.<no name provided>.nextBoolean()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.<no name provided>.nextDouble()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.<no name provided>.nextDouble(Double)": {
        "size": 59,
        "type": "function"
    },
    "test.collections.<no name provided>.nextDouble(Double, Double)": {
        "size": 73,
        "type": "function"
    },
    "test.collections.<no name provided>.nextFloat()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.<no name provided>.nextBytes(ByteArray, Int, Int)": {
        "size": 94,
        "type": "function"
    },
    "test.collections.<no name provided>.nextBytes(ByteArray)": {
        "size": 64,
        "type": "function"
    },
    "test.collections.<no name provided>.nextBytes(Int)": {
        "size": 57,
        "type": "function"
    },
    "test.collections.SequenceTest": {
        "size": 135031,
        "type": "class"
    },
    "test.collections.SequenceTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.SequenceTest.ensureIsIntermediate(Sequence<T>, Function1<Sequence<T>, Sequence<*>>)": {
        "size": 964,
        "type": "function"
    },
    "test.collections.SequenceTest.filterEmptySequence()": {
        "size": 1247,
        "type": "function"
    },
    "test.collections.SequenceTest.mapEmptySequence()": {
        "size": 890,
        "type": "function"
    },
    "test.collections.SequenceTest.requireNoNulls()": {
        "size": 1907,
        "type": "function"
    },
    "test.collections.SequenceTest.filterIndexed()": {
        "size": 502,
        "type": "function"
    },
    "test.collections.SequenceTest.filterNullable()": {
        "size": 482,
        "type": "function"
    },
    "test.collections.SequenceTest.filterNot()": {
        "size": 469,
        "type": "function"
    },
    "test.collections.SequenceTest.filterNotNull()": {
        "size": 382,
        "type": "function"
    },
    "test.collections.SequenceTest.mapIndexed()": {
        "size": 589,
        "type": "function"
    },
    "test.collections.SequenceTest.mapNotNull()": {
        "size": 470,
        "type": "function"
    },
    "test.collections.SequenceTest.mapIndexedNotNull()": {
        "size": 420,
        "type": "function"
    },
    "test.collections.SequenceTest.mapAndJoinToString()": {
        "size": 729,
        "type": "function"
    },
    "test.collections.SequenceTest.withIndex()": {
        "size": 478,
        "type": "function"
    },
    "test.collections.SequenceTest.onEach()": {
        "size": 2186,
        "type": "function"
    },
    "test.collections.SequenceTest.onEachIndexed()": {
        "size": 3433,
        "type": "function"
    },
    "test.collections.SequenceTest.filterAndTakeWhileExtractTheElementsWithinRange()": {
        "size": 700,
        "type": "function"
    },
    "test.collections.SequenceTest.foldReducesTheFirstNElements()": {
        "size": 1915,
        "type": "function"
    },
    "test.collections.SequenceTest.takeExtractsTheFirstNElements()": {
        "size": 564,
        "type": "function"
    },
    "test.collections.SequenceTest.mapAndTakeWhileExtractTheTransformedElements()": {
        "size": 716,
        "type": "function"
    },
    "test.collections.SequenceTest.joinConcatenatesTheFirstNElementsAboveAThreshold()": {
        "size": 647,
        "type": "function"
    },
    "test.collections.SequenceTest.scan()": {
        "size": 1402,
        "type": "function"
    },
    "test.collections.SequenceTest.scanIndexed()": {
        "size": 1638,
        "type": "function"
    },
    "test.collections.SequenceTest.runningReduce()": {
        "size": 1215,
        "type": "function"
    },
    "test.collections.SequenceTest.runningReduceIndexed()": {
        "size": 1154,
        "type": "function"
    },
    "test.collections.SequenceTest.drop()": {
        "size": 4592,
        "type": "function"
    },
    "test.collections.SequenceTest.take()": {
        "size": 4260,
        "type": "function"
    },
    "test.collections.SequenceTest.subSequence()": {
        "size": 1760,
        "type": "function"
    },
    "test.collections.SequenceTest.dropWhile()": {
        "size": 1200,
        "type": "function"
    },
    "test.collections.SequenceTest.zipWithNext()": {
        "size": 687,
        "type": "function"
    },
    "test.collections.SequenceTest.zipWithNextPairs()": {
        "size": 1215,
        "type": "function"
    },
    "test.collections.SequenceTest.chunked()": {
        "size": 6539,
        "type": "function"
    },
    "test.collections.SequenceTest.windowed()": {
        "size": 21993,
        "type": "function"
    },
    "test.collections.SequenceTest.zip()": {
        "size": 877,
        "type": "function"
    },
    "test.collections.SequenceTest.toStringJoinsNoMoreThanTheFirstTenElements()": {
        "size": 1898,
        "type": "function"
    },
    "test.collections.SequenceTest.testPlus(Function1<Sequence<String>, Sequence<String>>)": {
        "size": 647,
        "type": "function"
    },
    "test.collections.SequenceTest.plusElement()": {
        "size": 146,
        "type": "function"
    },
    "test.collections.SequenceTest.plusCollection()": {
        "size": 152,
        "type": "function"
    },
    "test.collections.SequenceTest.plusArray()": {
        "size": 142,
        "type": "function"
    },
    "test.collections.SequenceTest.plusSequence()": {
        "size": 148,
        "type": "function"
    },
    "test.collections.SequenceTest.plusAssign()": {
        "size": 652,
        "type": "function"
    },
    "test.collections.SequenceTest.testMinus(List<String>?, Function1<Sequence<String>, Sequence<String>>)": {
        "size": 659,
        "type": "function"
    },
    "test.collections.SequenceTest.testMinus$default(List<String>?, Function1<Sequence<String>, Sequence<String>>, Int, Any?)": {
        "size": 412,
        "type": "function"
    },
    "test.collections.SequenceTest.reduceOrNullOnEmpty()": {
        "size": 1764,
        "type": "function"
    },
    "test.collections.SequenceTest.reduceIndexedOrNullOnEmpty()": {
        "size": 3126,
        "type": "function"
    },
    "test.collections.SequenceTest.minusElement()": {
        "size": 204,
        "type": "function"
    },
    "test.collections.SequenceTest.minusCollection()": {
        "size": 234,
        "type": "function"
    },
    "test.collections.SequenceTest.minusArray()": {
        "size": 224,
        "type": "function"
    },
    "test.collections.SequenceTest.minusSequence()": {
        "size": 230,
        "type": "function"
    },
    "test.collections.SequenceTest.minusIsLazyIterated()": {
        "size": 888,
        "type": "function"
    },
    "test.collections.SequenceTest.minusAssign()": {
        "size": 1005,
        "type": "function"
    },
    "test.collections.SequenceTest.iterationOverSequence()": {
        "size": 744,
        "type": "function"
    },
    "test.collections.SequenceTest.sequenceFromFunction()": {
        "size": 1938,
        "type": "function"
    },
    "test.collections.SequenceTest.sequenceFromFunctionWithInitialValue()": {
        "size": 747,
        "type": "function"
    },
    "test.collections.SequenceTest.sequenceFromFunctionWithLazyInitialValue()": {
        "size": 2886,
        "type": "function"
    },
    "test.collections.SequenceTest.sequenceFromIterator()": {
        "size": 1825,
        "type": "function"
    },
    "test.collections.SequenceTest.makeSequenceOneTimeConstrained()": {
        "size": 2609,
        "type": "function"
    },
    "test.collections.SequenceTest.takeWhileTo(C, Function1<T, Boolean>)": {
        "size": 492,
        "type": "function"
    },
    "test.collections.SequenceTest.sequenceExtensions()": {
        "size": 711,
        "type": "function"
    },
    "test.collections.SequenceTest.flatMapAndTakeExtractTheTransformedElements()": {
        "size": 810,
        "type": "function"
    },
    "test.collections.SequenceTest.flatMap()": {
        "size": 1016,
        "type": "function"
    },
    "test.collections.SequenceTest.flatMapOnEmpty()": {
        "size": 600,
        "type": "function"
    },
    "test.collections.SequenceTest.flatMapWithEmptyItems()": {
        "size": 1090,
        "type": "function"
    },
    "test.collections.SequenceTest.flatMapIndexed()": {
        "size": 1083,
        "type": "function"
    },
    "test.collections.SequenceTest.flatten()": {
        "size": 1764,
        "type": "function"
    },
    "test.collections.SequenceTest.distinct()": {
        "size": 618,
        "type": "function"
    },
    "test.collections.SequenceTest.distinctBy()": {
        "size": 619,
        "type": "function"
    },
    "test.collections.SequenceTest.unzip()": {
        "size": 1139,
        "type": "function"
    },
    "test.collections.SequenceTest.sorted()": {
        "size": 1007,
        "type": "function"
    },
    "test.collections.SequenceTest.sortedBy()": {
        "size": 4304,
        "type": "function"
    },
    "test.collections.SequenceTest.sortedWith()": {
        "size": 661,
        "type": "function"
    },
    "test.collections.SequenceTest.shuffled()": {
        "size": 1476,
        "type": "function"
    },
    "test.collections.SequenceTest.shuffledPredictably()": {
        "size": 2587,
        "type": "function"
    },
    "test.collections.SequenceTest.shuffledPartially()": {
        "size": 962,
        "type": "function"
    },
    "test.collections.SequenceTest.associateWith()": {
        "size": 4550,
        "type": "function"
    },
    "test.collections.SequenceTest.orEmpty()": {
        "size": 1014,
        "type": "function"
    },
    "test.collections.SequenceTest.firstNotNullOf()": {
        "size": 7836,
        "type": "function"
    },
    "test.collections.SequenceTest.toSet()": {
        "size": 1307,
        "type": "function"
    },
    "test.collections.SequenceTest.toList()": {
        "size": 1416,
        "type": "function"
    },
    "test.collections.SequenceTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.SequenceTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.SequenceTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.fibonacci$lambda": {
        "size": 795,
        "type": "class"
    },
    "test.collections.fibonacci$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.fibonacci$lambda.invoke(Pair<Int, Int>)": {
        "size": 315,
        "type": "function"
    },
    "test.collections.fibonacci$lambda.invoke(P1)": {
        "size": 314,
        "type": "function"
    },
    "test.collections.indexSequence$lambda": {
        "size": 565,
        "type": "class"
    },
    "test.collections.indexSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.indexSequence$lambda.invoke(Int)": {
        "size": 125,
        "type": "function"
    },
    "test.collections.indexSequence$lambda.invoke(P1)": {
        "size": 266,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusElement$lambda": {
        "size": 661,
        "type": "class"
    },
    "test.collections.SetOperationsTest$plusElement$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusElement$lambda.invoke(Set<String>)": {
        "size": 170,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusElement$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusCollection$lambda": {
        "size": 648,
        "type": "class"
    },
    "test.collections.SetOperationsTest$plusCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusCollection$lambda.invoke(Set<String>)": {
        "size": 154,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusCollection$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusArray$lambda": {
        "size": 701,
        "type": "class"
    },
    "test.collections.SetOperationsTest$plusArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusArray$lambda.invoke(Set<String>)": {
        "size": 204,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusArray$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusSequence$lambda": {
        "size": 650,
        "type": "class"
    },
    "test.collections.SetOperationsTest$plusSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusSequence$lambda.invoke(Set<String>)": {
        "size": 158,
        "type": "function"
    },
    "test.collections.SetOperationsTest$plusSequence$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusElement$lambda": {
        "size": 630,
        "type": "class"
    },
    "test.collections.SetOperationsTest$minusElement$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusElement$lambda.invoke(Set<String>)": {
        "size": 138,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusElement$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusCollection$lambda": {
        "size": 639,
        "type": "class"
    },
    "test.collections.SetOperationsTest$minusCollection$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusCollection$lambda.invoke(Set<String>)": {
        "size": 144,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusCollection$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusArray$lambda": {
        "size": 692,
        "type": "class"
    },
    "test.collections.SetOperationsTest$minusArray$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusArray$lambda.invoke(Set<String>)": {
        "size": 194,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusArray$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusSequence$lambda": {
        "size": 641,
        "type": "class"
    },
    "test.collections.SetOperationsTest$minusSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusSequence$lambda.invoke(Set<String>)": {
        "size": 148,
        "type": "function"
    },
    "test.collections.SetOperationsTest$minusSequence$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.SetOperationsTest": {
        "size": 12606,
        "type": "class"
    },
    "test.collections.SetOperationsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.SetOperationsTest.distinct()": {
        "size": 811,
        "type": "function"
    },
    "test.collections.SetOperationsTest.distinctBy()": {
        "size": 2909,
        "type": "function"
    },
    "test.collections.SetOperationsTest.union()": {
        "size": 798,
        "type": "function"
    },
    "test.collections.SetOperationsTest.subtract()": {
        "size": 1497,
        "type": "function"
    },
    "test.collections.SetOperationsTest.intersect()": {
        "size": 1496,
        "type": "function"
    },
    "test.collections.SetOperationsTest.testPlus(Function1<Set<String>, Set<String>>)": {
        "size": 579,
        "type": "function"
    },
    "test.collections.SetOperationsTest.plusElement()": {
        "size": 151,
        "type": "function"
    },
    "test.collections.SetOperationsTest.plusCollection()": {
        "size": 157,
        "type": "function"
    },
    "test.collections.SetOperationsTest.plusArray()": {
        "size": 147,
        "type": "function"
    },
    "test.collections.SetOperationsTest.plusSequence()": {
        "size": 153,
        "type": "function"
    },
    "test.collections.SetOperationsTest.plusAssign()": {
        "size": 2048,
        "type": "function"
    },
    "test.collections.SetOperationsTest.testMinus(Function1<Set<String>, Set<String>>)": {
        "size": 380,
        "type": "function"
    },
    "test.collections.SetOperationsTest.minusElement()": {
        "size": 155,
        "type": "function"
    },
    "test.collections.SetOperationsTest.minusCollection()": {
        "size": 161,
        "type": "function"
    },
    "test.collections.SetOperationsTest.minusArray()": {
        "size": 151,
        "type": "function"
    },
    "test.collections.SetOperationsTest.minusSequence()": {
        "size": 157,
        "type": "function"
    },
    "test.collections.SetOperationsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.SetOperationsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.SetOperationsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.withIndex$assertIterableContentEquals(Iterable<T>, Iterable<T>)": {
        "size": 316,
        "type": "function"
    },
    "test.collections.fill$test(UIntArray, @ExtensionFunctionType Function4<A, E, Int, Int, Unit>, List<OperationOnRange<UInt, UIntArray>>, @ExtensionFunctionType Function1<UIntArray, A>, @ExtensionFunctionType Function1<UInt, E>, @ExtensionFunctionType Function2<A, A, Boolean>)": {
        "size": 1398,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$collectionBehavior$lambda": {
        "size": 850,
        "type": "class"
    },
    "test.collections.UnsignedArraysTest$collectionBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$collectionBehavior$lambda.invoke(CompareContext<Collection<UByte>>)": {
        "size": 206,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$collectionBehavior$lambda.invoke(P1)": {
        "size": 380,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$collectionBehavior$lambda.invoke(CompareContext<Collection<UShort>>)": {
        "size": 208,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$collectionBehavior$lambda.invoke(CompareContext<Collection<UInt>>)": {
        "size": 204,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$collectionBehavior$lambda.invoke(CompareContext<Collection<ULong>>)": {
        "size": 206,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$asList$lambda": {
        "size": 726,
        "type": "class"
    },
    "test.collections.UnsignedArraysTest$asList$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$asList$lambda.invoke(CompareContext<List<UByte>>)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$asList$lambda.invoke(P1)": {
        "size": 368,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$asList$lambda.invoke(CompareContext<List<UShort>>)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$asList$lambda.invoke(CompareContext<List<UInt>>)": {
        "size": 114,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$sortedBy$lambda": {
        "size": 1514,
        "type": "class"
    },
    "test.collections.UnsignedArraysTest$sortedBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$sortedBy$lambda.invoke(UInt, UInt)": {
        "size": 740,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$sortedBy$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$sortedBy$lambda.invoke(UByte, UByte)": {
        "size": 746,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$sortedBy$lambda.invoke(UShort, UShort)": {
        "size": 752,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$sortedBy$lambda.invoke(ULong, ULong)": {
        "size": 746,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(UByteArray, UByte, Int, Int)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(UShortArray, UShort, Int, Int)": {
        "size": 142,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(UIntArray, UInt, Int, Int)": {
        "size": 138,
        "type": "function"
    },
    "test.collections.fill$ref.invoke(ULongArray, ULong, Int, Int)": {
        "size": 140,
        "type": "function"
    },
    "test.collections.toUByteArray$ref": {
        "size": 685,
        "type": "class"
    },
    "test.collections.toUByteArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toUByteArray$ref.invoke(UIntArray)": {
        "size": 88,
        "type": "function"
    },
    "test.collections.toUByteArray$ref.invoke(P1)": {
        "size": 311,
        "type": "function"
    },
    "test.collections.toUByteArray$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.collections.UInt$toUByte$ref": {
        "size": 648,
        "type": "class"
    },
    "test.collections.UInt$toUByte$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UInt$toUByte$ref.invoke(UInt)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.UInt$toUByte$ref.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.UInt$toUByte$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(UByteArray, UByteArray?)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.toUShortArray$ref": {
        "size": 692,
        "type": "class"
    },
    "test.collections.toUShortArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toUShortArray$ref.invoke(UIntArray)": {
        "size": 90,
        "type": "function"
    },
    "test.collections.toUShortArray$ref.invoke(P1)": {
        "size": 312,
        "type": "function"
    },
    "test.collections.toUShortArray$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.collections.UInt$toUShort$ref": {
        "size": 655,
        "type": "class"
    },
    "test.collections.UInt$toUShort$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UInt$toUShort$ref.invoke(UInt)": {
        "size": 93,
        "type": "function"
    },
    "test.collections.UInt$toUShort$ref.invoke(P1)": {
        "size": 297,
        "type": "function"
    },
    "test.collections.UInt$toUShort$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(UShortArray, UShortArray?)": {
        "size": 161,
        "type": "function"
    },
    "test.collections.copyOf$ref.invoke(UIntArray)": {
        "size": 81,
        "type": "function"
    },
    "test.collections.UInt$toUInt$ref": {
        "size": 641,
        "type": "class"
    },
    "test.collections.UInt$toUInt$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UInt$toUInt$ref.invoke(UInt)": {
        "size": 89,
        "type": "function"
    },
    "test.collections.UInt$toUInt$ref.invoke(P1)": {
        "size": 295,
        "type": "function"
    },
    "test.collections.UInt$toUInt$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(UIntArray, UIntArray?)": {
        "size": 153,
        "type": "function"
    },
    "test.collections.toULongArray$ref": {
        "size": 685,
        "type": "class"
    },
    "test.collections.toULongArray$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.toULongArray$ref.invoke(UIntArray)": {
        "size": 88,
        "type": "function"
    },
    "test.collections.toULongArray$ref.invoke(P1)": {
        "size": 311,
        "type": "function"
    },
    "test.collections.toULongArray$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.collections.UInt$toULong$ref": {
        "size": 648,
        "type": "class"
    },
    "test.collections.UInt$toULong$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UInt$toULong$ref.invoke(UInt)": {
        "size": 91,
        "type": "function"
    },
    "test.collections.UInt$toULong$ref.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.collections.UInt$toULong$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.collections.contentEquals$ref.invoke(ULongArray, ULongArray?)": {
        "size": 157,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$withIndex$assertIterableContentEquals$lambda": {
        "size": 752,
        "type": "class"
    },
    "test.collections.UnsignedArraysTest$withIndex$assertIterableContentEquals$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$withIndex$assertIterableContentEquals$lambda.invoke(CompareContext<Iterator<T>>)": {
        "size": 116,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest$withIndex$assertIterableContentEquals$lambda.invoke(P1)": {
        "size": 366,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest": {
        "size": 1180665,
        "type": "class"
    },
    "test.collections.UnsignedArraysTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.collectionBehavior()": {
        "size": 1650,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.ubyteArrayInit()": {
        "size": 4738,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.ushortArrayInit()": {
        "size": 4765,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.uintArrayInit()": {
        "size": 4660,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.ulongArrayInit()": {
        "size": 4738,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.contentHashCode()": {
        "size": 6675,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.contentToString()": {
        "size": 5617,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.contentEquals()": {
        "size": 26227,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.asArray()": {
        "size": 3284,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.toArray()": {
        "size": 2926,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.toTypedArray()": {
        "size": 5356,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.copyOf()": {
        "size": 3645,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.copyAndResize()": {
        "size": 9937,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.copyOfRange()": {
        "size": 14649,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.plus()": {
        "size": 2220,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.indexOf()": {
        "size": 4594,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.indexOfFirst()": {
        "size": 15919,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.lastIndexOf()": {
        "size": 4646,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.indexOfLast()": {
        "size": 15726,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.indices()": {
        "size": 4233,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.lastIndex()": {
        "size": 3972,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.all()": {
        "size": 5855,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.none()": {
        "size": 5783,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.any()": {
        "size": 5133,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.count()": {
        "size": 7779,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sumBy()": {
        "size": 9288,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sumByDouble()": {
        "size": 7756,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.toUnsignedArray()": {
        "size": 2000,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reversed()": {
        "size": 3392,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reversedArray()": {
        "size": 2813,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.asList()": {
        "size": 2464,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.slice()": {
        "size": 6696,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sliceArray()": {
        "size": 6943,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.minOrNull()": {
        "size": 2701,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.minOrNullInUnsignedArrays()": {
        "size": 2555,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.maxOrNull()": {
        "size": 2701,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.maxOrNullInUnsignedArrays()": {
        "size": 2555,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.minWitOrNullh()": {
        "size": 2857,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.minWithOrNullInUnsignedArrays()": {
        "size": 2711,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.maxWithOrNull()": {
        "size": 2857,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.maxWithOrNullInUnsignedArrays()": {
        "size": 2711,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.minByOrNull()": {
        "size": 22158,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.minByOrNullInUnsignedArrays()": {
        "size": 22200,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.maxByOrNull()": {
        "size": 20281,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.maxByOrNullInUnsignedArrays()": {
        "size": 20323,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduce()": {
        "size": 22659,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduceOrNull()": {
        "size": 19404,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduceIndexed()": {
        "size": 26529,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduceIndexedOrNull()": {
        "size": 23813,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduceRight()": {
        "size": 16523,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduceRightOrNull()": {
        "size": 19604,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduceRightIndexed()": {
        "size": 23903,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.reduceRightIndexedOrNull()": {
        "size": 21253,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.forEach()": {
        "size": 1317,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.forEachIndexed()": {
        "size": 1401,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sum()": {
        "size": 2859,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sumInUnsignedArrays()": {
        "size": 8302,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.fold()": {
        "size": 9483,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.foldIndexed()": {
        "size": 13255,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.foldRight()": {
        "size": 10682,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.foldRightIndexed()": {
        "size": 12776,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.scan()": {
        "size": 21577,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.runningFold()": {
        "size": 20556,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.scanIndexed()": {
        "size": 30168,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.runningFoldIndexed()": {
        "size": 28503,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.runningReduce()": {
        "size": 33488,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.runningReduceIndexed()": {
        "size": 37529,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.associateWithPrimitives()": {
        "size": 7203,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.associateWithToPrimitives()": {
        "size": 14681,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.elementAt()": {
        "size": 8311,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.elementAtOrElse()": {
        "size": 7081,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.elementAtOrNull()": {
        "size": 3804,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.find()": {
        "size": 8517,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.findLast()": {
        "size": 12339,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.first()": {
        "size": 12344,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.firstOrNull()": {
        "size": 7213,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.getOrElse()": {
        "size": 7003,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.getOrNull()": {
        "size": 2606,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.last()": {
        "size": 15243,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.lastOrNull()": {
        "size": 9814,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.single()": {
        "size": 19026,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.singleOrNull()": {
        "size": 8659,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.map()": {
        "size": 5814,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.mapIndexed()": {
        "size": 7744,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.groupBy()": {
        "size": 11374,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.flatMap()": {
        "size": 6152,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.flatMapIndexed()": {
        "size": 13001,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.withIndex()": {
        "size": 5352,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.zip()": {
        "size": 6750,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.onEach()": {
        "size": 8842,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.onEachIndexed()": {
        "size": 21521,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.drop()": {
        "size": 4883,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.dropLast()": {
        "size": 4752,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.dropWhile()": {
        "size": 11602,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.dropLastWhile()": {
        "size": 13826,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.take()": {
        "size": 4728,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.takeLast()": {
        "size": 4753,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.takeWhile()": {
        "size": 10239,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.takeLastWhile()": {
        "size": 13760,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.filter()": {
        "size": 10255,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.filterIndexed()": {
        "size": 16582,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.filterNot()": {
        "size": 11291,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sort()": {
        "size": 6632,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sortDescending()": {
        "size": 6682,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sorted()": {
        "size": 5823,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sortedDescending()": {
        "size": 5893,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sortedBy()": {
        "size": 9035,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sortedArray()": {
        "size": 5359,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.sortedArrayDescending()": {
        "size": 5409,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.fill()": {
        "size": 14197,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.UnsignedArraysTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.toUByteArray()": {
        "size": 3149,
        "type": "function"
    },
    "test.collections.toUShortArray()": {
        "size": 3168,
        "type": "function"
    },
    "test.collections.toULongArray()": {
        "size": 2709,
        "type": "function"
    },
    "test.comparisons.<get-STRING_CASE_INSENSITIVE_ORDER>()": {
        "size": 145,
        "type": "function"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER": {
        "size": 87,
        "type": "field"
    },
    "test.comparisons.Item$compareTo$lambda": {
        "size": 573,
        "type": "class"
    },
    "test.comparisons.Item$compareTo$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.Item$compareTo$lambda.invoke(Item)": {
        "size": 119,
        "type": "function"
    },
    "test.comparisons.Item$compareTo$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.comparisons.Item": {
        "size": 2650,
        "type": "class"
    },
    "test.comparisons.Item.<init>(String, Int)": {
        "size": 144,
        "type": "function"
    },
    "test.comparisons.Item.name": {
        "size": 43,
        "type": "field"
    },
    "test.comparisons.Item.rating": {
        "size": 42,
        "type": "field"
    },
    "test.comparisons.Item.compareTo(Item)": {
        "size": 337,
        "type": "function"
    },
    "test.comparisons.Item.compareTo(T)": {
        "size": 290,
        "type": "function"
    },
    "test.comparisons.Item.toString()": {
        "size": 429,
        "type": "function"
    },
    "test.comparisons.Item.hashCode()": {
        "size": 298,
        "type": "function"
    },
    "test.comparisons.Item.equals(Any?)": {
        "size": 863,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortUsingCustomComparator$o$compare$lambda": {
        "size": 607,
        "type": "class"
    },
    "test.comparisons.OrderingTest$sortUsingCustomComparator$o$compare$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortUsingCustomComparator$o$compare$lambda.invoke(Item)": {
        "size": 119,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortUsingCustomComparator$o$compare$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.comparisons.sam$kotlin_Comparator$0": {
        "size": 721,
        "type": "class"
    },
    "test.comparisons.sam$kotlin_Comparator$0.function": {
        "size": 61,
        "type": "field"
    },
    "test.comparisons.sam$kotlin_Comparator$0.<init>(Function2<P1, P2, R>)": {
        "size": 133,
        "type": "function"
    },
    "test.comparisons.sam$kotlin_Comparator$0.compare(T, T)": {
        "size": 288,
        "type": "function"
    },
    "test.comparisons.sam$kotlin_Comparator$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.comparisons.sam$kotlin_Comparator$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.comparisons.sam$kotlin_Comparator$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareByNameFirst$lambda": {
        "size": 590,
        "type": "class"
    },
    "test.comparisons.OrderingTest$compareByNameFirst$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareByNameFirst$lambda.invoke(Item)": {
        "size": 119,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareByNameFirst$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareByRatingFirst$lambda": {
        "size": 592,
        "type": "class"
    },
    "test.comparisons.OrderingTest$compareByRatingFirst$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareByRatingFirst$lambda.invoke(Item)": {
        "size": 119,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareByRatingFirst$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareSameObjectsByRatingFirst$lambda": {
        "size": 603,
        "type": "class"
    },
    "test.comparisons.OrderingTest$compareSameObjectsByRatingFirst$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareSameObjectsByRatingFirst$lambda.invoke(Item)": {
        "size": 119,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareSameObjectsByRatingFirst$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareNullables$lambda": {
        "size": 1671,
        "type": "class"
    },
    "test.comparisons.OrderingTest$compareNullables$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareNullables$lambda.invoke(Item, Item)": {
        "size": 786,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareNullables$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareNullables$lambda.<init>(Comparator<Item>)": {
        "size": 143,
        "type": "function"
    },
    "test.comparisons.OrderingTest$compareNullables$lambda.$tmp0_thenBy": {
        "size": 61,
        "type": "field"
    },
    "test.comparisons.OrderingTest$sortComparatorThenComparator$lambda": {
        "size": 2016,
        "type": "class"
    },
    "test.comparisons.OrderingTest$sortComparatorThenComparator$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortComparatorThenComparator$lambda.invoke(Item, Item)": {
        "size": 1073,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortComparatorThenComparator$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortComparatorThenComparator$lambda.<init>(Comparator<Item>)": {
        "size": 167,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortComparatorThenComparator$lambda.$tmp0_thenComparator": {
        "size": 69,
        "type": "field"
    },
    "test.comparisons.OrderingTest$combineComparators$lambda": {
        "size": 1210,
        "type": "class"
    },
    "test.comparisons.OrderingTest$combineComparators$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$combineComparators$lambda.invoke(Item, Item)": {
        "size": 472,
        "type": "function"
    },
    "test.comparisons.OrderingTest$combineComparators$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest$reversedComparator$lambda": {
        "size": 1128,
        "type": "class"
    },
    "test.comparisons.OrderingTest$reversedComparator$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$reversedComparator$lambda.invoke(Item, Item)": {
        "size": 390,
        "type": "function"
    },
    "test.comparisons.OrderingTest$reversedComparator$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenBy$lambda": {
        "size": 1659,
        "type": "class"
    },
    "test.comparisons.OrderingTest$sortByThenBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenBy$lambda.invoke(Item, Item)": {
        "size": 778,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenBy$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenBy$lambda.<init>(Comparator<Item>)": {
        "size": 143,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenBy$lambda.$tmp0_thenBy": {
        "size": 61,
        "type": "field"
    },
    "test.comparisons.OrderingTest$sortByThenByDescending$lambda": {
        "size": 1739,
        "type": "class"
    },
    "test.comparisons.OrderingTest$sortByThenByDescending$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenByDescending$lambda.invoke(Item, Item)": {
        "size": 808,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenByDescending$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenByDescending$lambda.<init>(Comparator<Item>)": {
        "size": 173,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortByThenByDescending$lambda.$tmp0_thenByDescending": {
        "size": 71,
        "type": "field"
    },
    "test.comparisons.OrderingTest$sortUsingFunctionalComparator$lambda": {
        "size": 601,
        "type": "class"
    },
    "test.comparisons.OrderingTest$sortUsingFunctionalComparator$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortUsingFunctionalComparator$lambda.invoke(Item)": {
        "size": 119,
        "type": "function"
    },
    "test.comparisons.OrderingTest$sortUsingFunctionalComparator$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.comparisons.<no name provided>": {
        "size": 1268,
        "type": "class"
    },
    "test.comparisons.<no name provided>.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.<no name provided>.compare(Item, Item)": {
        "size": 322,
        "type": "function"
    },
    "test.comparisons.<no name provided>.compare(T, T)": {
        "size": 459,
        "type": "function"
    },
    "test.comparisons.<no name provided>.equals(Any?)": {
        "size": 190,
        "type": "function"
    },
    "test.comparisons.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.comparisons.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.comparisons.OrderingTest$maxOfWith$lambda": {
        "size": 1201,
        "type": "class"
    },
    "test.comparisons.OrderingTest$maxOfWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$maxOfWith$lambda.invoke(Item, Item)": {
        "size": 472,
        "type": "function"
    },
    "test.comparisons.OrderingTest$maxOfWith$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest$minOfWith$lambda": {
        "size": 1201,
        "type": "class"
    },
    "test.comparisons.OrderingTest$minOfWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.OrderingTest$minOfWith$lambda.invoke(Item, Item)": {
        "size": 472,
        "type": "function"
    },
    "test.comparisons.OrderingTest$minOfWith$lambda.invoke(P1, P2)": {
        "size": 500,
        "type": "function"
    },
    "test.comparisons.OrderingTest": {
        "size": 41382,
        "type": "class"
    },
    "test.comparisons.OrderingTest.<init>()": {
        "size": 268,
        "type": "function"
    },
    "test.comparisons.OrderingTest.v1": {
        "size": 39,
        "type": "field"
    },
    "test.comparisons.OrderingTest.v2": {
        "size": 39,
        "type": "field"
    },
    "test.comparisons.OrderingTest.v3": {
        "size": 39,
        "type": "field"
    },
    "test.comparisons.OrderingTest.v4": {
        "size": 39,
        "type": "field"
    },
    "test.comparisons.OrderingTest.compareByCompareTo()": {
        "size": 735,
        "type": "function"
    },
    "test.comparisons.OrderingTest.compareByNameFirst()": {
        "size": 433,
        "type": "function"
    },
    "test.comparisons.OrderingTest.compareByRatingFirst()": {
        "size": 439,
        "type": "function"
    },
    "test.comparisons.OrderingTest.compareSameObjectsByRatingFirst()": {
        "size": 470,
        "type": "function"
    },
    "test.comparisons.OrderingTest.compareNullables()": {
        "size": 2168,
        "type": "function"
    },
    "test.comparisons.OrderingTest.sortComparatorThenComparator()": {
        "size": 1538,
        "type": "function"
    },
    "test.comparisons.OrderingTest.combineComparators()": {
        "size": 2457,
        "type": "function"
    },
    "test.comparisons.OrderingTest.reversedComparator()": {
        "size": 879,
        "type": "function"
    },
    "test.comparisons.OrderingTest.naturalOrderComparator()": {
        "size": 895,
        "type": "function"
    },
    "test.comparisons.OrderingTest.sortByThenBy()": {
        "size": 1541,
        "type": "function"
    },
    "test.comparisons.OrderingTest.sortByThenByDescending()": {
        "size": 1601,
        "type": "function"
    },
    "test.comparisons.OrderingTest.sortUsingFunctionalComparator()": {
        "size": 1003,
        "type": "function"
    },
    "test.comparisons.OrderingTest.sortUsingCustomComparator()": {
        "size": 837,
        "type": "function"
    },
    "test.comparisons.OrderingTest.maxOf()": {
        "size": 8203,
        "type": "function"
    },
    "test.comparisons.OrderingTest.maxOfWith()": {
        "size": 3197,
        "type": "function"
    },
    "test.comparisons.OrderingTest.minOf()": {
        "size": 8819,
        "type": "function"
    },
    "test.comparisons.OrderingTest.minOfWith()": {
        "size": 3197,
        "type": "function"
    },
    "test.comparisons.OrderingTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.comparisons.OrderingTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.comparisons.OrderingTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER$lambda": {
        "size": 1705,
        "type": "class"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER$lambda.invoke(String, String)": {
        "size": 804,
        "type": "function"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER$lambda.invoke(P1, P2)": {
        "size": 508,
        "type": "function"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER$lambda.<init>(Comparator<String>)": {
        "size": 145,
        "type": "function"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER$lambda.$tmp0_thenBy": {
        "size": 63,
        "type": "field"
    },
    "test.comparisons.STRING_CASE_INSENSITIVE_ORDER$lambda.$tmp1_thenBy": {
        "size": 63,
        "type": "field"
    },
    "test.comparisons.properties initialized OrderingTest.kt": {
        "size": 77,
        "type": "field"
    },
    "test.comparisons.<init properties OrderingTest.kt>()": {
        "size": 1763,
        "type": "function"
    },
    "test.coroutines.Key": {
        "size": 798,
        "type": "class"
    },
    "test.coroutines.Key.<init>()": {
        "size": 352,
        "type": "function"
    },
    "test.coroutines.Key.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.Key.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.Key.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.Key_instance": {
        "size": 42,
        "type": "field"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$DerivedWithKey$Key$<init>$lambda": {
        "size": 772,
        "type": "class"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$DerivedWithKey$Key$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$DerivedWithKey$Key$<init>$lambda.invoke(Element)": {
        "size": 214,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$DerivedWithKey$Key$<init>$lambda.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.coroutines.Key.tryCast(Element)": {
        "size": 96,
        "type": "function"
    },
    "test.coroutines.Key.isSubKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.Key_getInstance()": {
        "size": 141,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKey$Key$<init>$lambda": {
        "size": 787,
        "type": "class"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKey$Key$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKey$Key$<init>$lambda.invoke(Element)": {
        "size": 223,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKey$Key$<init>$lambda.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKeyAndDifferentBase$Key$<init>$lambda": {
        "size": 867,
        "type": "class"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKeyAndDifferentBase$Key$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKeyAndDifferentBase$Key$<init>$lambda.invoke(Element)": {
        "size": 271,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$SubDerivedWithKeyAndDifferentBase$Key$<init>$lambda.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.coroutines.Base": {
        "size": 936,
        "type": "class"
    },
    "test.coroutines.Base.<init>()": {
        "size": 114,
        "type": "function"
    },
    "test.coroutines.Base.get(Key<E>)": {
        "size": 182,
        "type": "function"
    },
    "test.coroutines.Base.minusKey(Key<*>)": {
        "size": 173,
        "type": "function"
    },
    "test.coroutines.Base.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.Base.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.Base.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.Base.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.Base.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.Base.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey": {
        "size": 634,
        "type": "class"
    },
    "test.coroutines.DerivedWithoutKey.<init>()": {
        "size": 68,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.DerivedWithoutKey.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey": {
        "size": 636,
        "type": "class"
    },
    "test.coroutines.DerivedWithKey.<init>()": {
        "size": 68,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.DerivedWithKey.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey": {
        "size": 654,
        "type": "class"
    },
    "test.coroutines.SubDerivedWithKey.<init>()": {
        "size": 78,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKey.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase": {
        "size": 670,
        "type": "class"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.<init>()": {
        "size": 78,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SubDerivedWithKeyAndDifferentBase.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement": {
        "size": 757,
        "type": "class"
    },
    "test.coroutines.IrrelevantElement.<init>()": {
        "size": 161,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.IrrelevantElement_instance": {
        "size": 70,
        "type": "field"
    },
    "test.coroutines.IrrelevantElement_getInstance()": {
        "size": 211,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$<get-size>$lambda": {
        "size": 894,
        "type": "class"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$<get-size>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$<get-size>$lambda.invoke(Int, Element)": {
        "size": 131,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest$<get-size>$lambda.invoke(P1, P2)": {
        "size": 532,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest": {
        "size": 40208,
        "type": "class"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.<get-size>()": {
        "size": 265,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testDerivedWithoutKey()": {
        "size": 484,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testDerivedWithoutKeyOverridesDerived()": {
        "size": 1292,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testDerivedWithoutKey(CoroutineContext, Element)": {
        "size": 1259,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testDerivedWithKey()": {
        "size": 457,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testDerivedWithKey(CoroutineContext, Element)": {
        "size": 1419,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testSubDerivedWithKey()": {
        "size": 484,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testSubDerivedWithKey(CoroutineContext, Element)": {
        "size": 2356,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testSubDerivedWithKeyAndDifferentBase()": {
        "size": 628,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testSubDerivedWithKeyAndDifferentBase(CoroutineContext, Element)": {
        "size": 2388,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testDerivedWithKeyOverridesDerived()": {
        "size": 2071,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testSubDerivedOverrides()": {
        "size": 12564,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.testSubDerivedWithDifferentBaseOverrides()": {
        "size": 12341,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.AbstractCoroutineContextElementTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$BaseElement$Key$<init>$lambda": {
        "size": 752,
        "type": "class"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$BaseElement$Key$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$BaseElement$Key$<init>$lambda.invoke(Element)": {
        "size": 205,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$BaseElement$Key$<init>$lambda.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$DerivedElementWithPolyKey$Key$<init>$lambda": {
        "size": 822,
        "type": "class"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$DerivedElementWithPolyKey$Key$<init>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$DerivedElementWithPolyKey$Key$<init>$lambda.invoke(Element)": {
        "size": 247,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$DerivedElementWithPolyKey$Key$<init>$lambda.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.coroutines.BaseElement": {
        "size": 951,
        "type": "class"
    },
    "test.coroutines.BaseElement.<init>()": {
        "size": 114,
        "type": "function"
    },
    "test.coroutines.BaseElement.interceptContinuation(Continuation<T>)": {
        "size": 121,
        "type": "function"
    },
    "test.coroutines.BaseElement.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.BaseElement.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.BaseElement.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.BaseElement.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.BaseElement.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.BaseElement.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.BaseElement.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.BaseElement.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.BaseElement.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey": {
        "size": 872,
        "type": "class"
    },
    "test.coroutines.DerivedElementWithOldKey.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.<get-key>()": {
        "size": 61,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.interceptContinuation(Continuation<T>)": {
        "size": 106,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithOldKey.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey": {
        "size": 853,
        "type": "class"
    },
    "test.coroutines.DerivedElementWithPolyKey.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.interceptContinuation(Continuation<T>)": {
        "size": 106,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.DerivedElementWithPolyKey.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor": {
        "size": 888,
        "type": "class"
    },
    "test.coroutines.CustomInterceptor.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.<get-key>()": {
        "size": 61,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.interceptContinuation(Continuation<T>)": {
        "size": 121,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.CustomInterceptor.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$<get-size>$lambda": {
        "size": 889,
        "type": "class"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$<get-size>$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$<get-size>$lambda.invoke(Int, Element)": {
        "size": 131,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest$<get-size>$lambda.invoke(P1, P2)": {
        "size": 532,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest": {
        "size": 12080,
        "type": "class"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.<get-size>()": {
        "size": 260,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.testKeyIsNotOverridden()": {
        "size": 438,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.testKeyIsNotOverridden(CoroutineContext, Element)": {
        "size": 2471,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.testKeyIsOverridden()": {
        "size": 436,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.testKeyIsOverridden(CoroutineContext, Element)": {
        "size": 1379,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.testInterceptorKeyIsNotOverridden()": {
        "size": 347,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.testInterceptorKeyIsNotOverridden(CoroutineContext, Element)": {
        "size": 1372,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.testContextOperations()": {
        "size": 4624,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.ContinuationInterceptorKeyTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.CtxA": {
        "size": 1891,
        "type": "class"
    },
    "test.coroutines.CtxA.<init>(Int)": {
        "size": 138,
        "type": "function"
    },
    "test.coroutines.CtxA.i": {
        "size": 37,
        "type": "field"
    },
    "test.coroutines.CtxA.toString()": {
        "size": 316,
        "type": "function"
    },
    "test.coroutines.CtxA.hashCode()": {
        "size": 149,
        "type": "function"
    },
    "test.coroutines.CtxA.equals(Any?)": {
        "size": 732,
        "type": "function"
    },
    "test.coroutines.CtxA.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.CtxA.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.CtxA.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.CtxA.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.CtxA.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.CtxB": {
        "size": 1891,
        "type": "class"
    },
    "test.coroutines.CtxB.<init>(Int)": {
        "size": 138,
        "type": "function"
    },
    "test.coroutines.CtxB.i": {
        "size": 37,
        "type": "field"
    },
    "test.coroutines.CtxB.toString()": {
        "size": 316,
        "type": "function"
    },
    "test.coroutines.CtxB.hashCode()": {
        "size": 149,
        "type": "function"
    },
    "test.coroutines.CtxB.equals(Any?)": {
        "size": 732,
        "type": "function"
    },
    "test.coroutines.CtxB.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.CtxB.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.CtxB.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.CtxB.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.CtxB.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.CtxC": {
        "size": 1891,
        "type": "class"
    },
    "test.coroutines.CtxC.<init>(Int)": {
        "size": 138,
        "type": "function"
    },
    "test.coroutines.CtxC.i": {
        "size": 37,
        "type": "field"
    },
    "test.coroutines.CtxC.toString()": {
        "size": 316,
        "type": "function"
    },
    "test.coroutines.CtxC.hashCode()": {
        "size": 149,
        "type": "function"
    },
    "test.coroutines.CtxC.equals(Any?)": {
        "size": 732,
        "type": "function"
    },
    "test.coroutines.CtxC.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.CtxC.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.CtxC.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.CtxC.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.CtxC.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.Disp1": {
        "size": 988,
        "type": "class"
    },
    "test.coroutines.Disp1.<init>()": {
        "size": 149,
        "type": "function"
    },
    "test.coroutines.Disp1.interceptContinuation(Continuation<T>)": {
        "size": 121,
        "type": "function"
    },
    "test.coroutines.Disp1.toString()": {
        "size": 54,
        "type": "function"
    },
    "test.coroutines.Disp1.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.Disp1.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.Disp1.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.Disp1.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.Disp1.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.Disp1.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.Disp1.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.Disp1.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.coroutines.Disp1_instance": {
        "size": 46,
        "type": "field"
    },
    "test.coroutines.Disp1_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "test.coroutines.Disp2": {
        "size": 988,
        "type": "class"
    },
    "test.coroutines.Disp2.<init>()": {
        "size": 149,
        "type": "function"
    },
    "test.coroutines.Disp2.interceptContinuation(Continuation<T>)": {
        "size": 121,
        "type": "function"
    },
    "test.coroutines.Disp2.toString()": {
        "size": 54,
        "type": "function"
    },
    "test.coroutines.Disp2.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.Disp2.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.Disp2.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.Disp2.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.Disp2.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.Disp2.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.Disp2.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.Disp2.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.coroutines.Disp2_instance": {
        "size": 46,
        "type": "field"
    },
    "test.coroutines.Disp2_getInstance()": {
        "size": 151,
        "type": "function"
    },
    "test.coroutines.DataElement": {
        "size": 778,
        "type": "class"
    },
    "test.coroutines.DataElement.<init>(Int)": {
        "size": 147,
        "type": "function"
    },
    "test.coroutines.DataElement.data": {
        "size": 40,
        "type": "field"
    },
    "test.coroutines.DataElement.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.DataElement.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.DataElement.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.DataElement.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.DataElement.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.DataElement.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.DataElement.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.DataElement.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.OtherElement": {
        "size": 779,
        "type": "class"
    },
    "test.coroutines.OtherElement.<init>(Int)": {
        "size": 147,
        "type": "function"
    },
    "test.coroutines.OtherElement.data": {
        "size": 40,
        "type": "field"
    },
    "test.coroutines.OtherElement.<get-key>()": {
        "size": 45,
        "type": "function"
    },
    "test.coroutines.OtherElement.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.OtherElement.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.OtherElement.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.OtherElement.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.OtherElement.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.OtherElement.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.OtherElement.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.WrapperKey": {
        "size": 1539,
        "type": "class"
    },
    "test.coroutines.WrapperKey.<init>(String)": {
        "size": 100,
        "type": "function"
    },
    "test.coroutines.WrapperKey.key": {
        "size": 42,
        "type": "field"
    },
    "test.coroutines.WrapperKey.toString()": {
        "size": 338,
        "type": "function"
    },
    "test.coroutines.WrapperKey.hashCode()": {
        "size": 146,
        "type": "function"
    },
    "test.coroutines.WrapperKey.equals(Any?)": {
        "size": 766,
        "type": "function"
    },
    "test.coroutines.WrapperElement": {
        "size": 918,
        "type": "class"
    },
    "test.coroutines.WrapperElement.<init>(String)": {
        "size": 118,
        "type": "function"
    },
    "test.coroutines.WrapperElement.<get-key>()": {
        "size": 151,
        "type": "function"
    },
    "test.coroutines.WrapperElement.key": {
        "size": 46,
        "type": "field"
    },
    "test.coroutines.WrapperElement.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.WrapperElement.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.WrapperElement.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.WrapperElement.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.WrapperElement.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.WrapperElement.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.WrapperElement.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor": {
        "size": 900,
        "type": "class"
    },
    "test.coroutines.CustomContinuationInterceptor.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.<get-key>()": {
        "size": 61,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.interceptContinuation(Continuation<T>)": {
        "size": 121,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.releaseInterceptedContinuation(Continuation<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.get(Key<E>)": {
        "size": 69,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.minusKey(Key<*>)": {
        "size": 65,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.fold(R, Function2<R, Element, R>)": {
        "size": 93,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.plus(CoroutineContext)": {
        "size": 84,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.CustomContinuationInterceptor.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest$assertContents$lambda": {
        "size": 920,
        "type": "class"
    },
    "test.coroutines.CoroutineContextTest$assertContents$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest$assertContents$lambda.invoke(Set<CoroutineContext>, Element)": {
        "size": 142,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest$assertContents$lambda.invoke(P1, P2)": {
        "size": 522,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest$checkContents$lambda": {
        "size": 1180,
        "type": "class"
    },
    "test.coroutines.CoroutineContextTest$checkContents$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest$checkContents$lambda.invoke(Int, Element)": {
        "size": 127,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest$checkContents$lambda.invoke(P1, P2)": {
        "size": 530,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest$checkContents$lambda.invoke(MutableSet<Element>, Element)": {
        "size": 385,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest": {
        "size": 22487,
        "type": "class"
    },
    "test.coroutines.CoroutineContextTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testGetPlusFold()": {
        "size": 4721,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testMinusKey()": {
        "size": 4052,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testPlusCombined()": {
        "size": 1175,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testLastDispatcher()": {
        "size": 1023,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testEquals()": {
        "size": 1698,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.assertContents(CoroutineContext, Array<out Element>)": {
        "size": 1659,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testBasicOperations()": {
        "size": 1006,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testWrapperEquality()": {
        "size": 542,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.testInterceptor()": {
        "size": 1262,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.checkContentsAndRemoves(CoroutineContext, Array<out Element>)": {
        "size": 1763,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.checkContents(CoroutineContext, Array<out Element>)": {
        "size": 2423,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.CoroutineContextTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.BadClass": {
        "size": 651,
        "type": "class"
    },
    "test.coroutines.BadClass.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.BadClass.equals(Any?)": {
        "size": 183,
        "type": "function"
    },
    "test.coroutines.BadClass.hashCode()": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.BadClass.toString()": {
        "size": 166,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda": {
        "size": 3898,
        "type": "class"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.<init>(CoroutinesReferenceValuesTest, Continuation<Any?>?)": {
        "size": 228,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.invoke(Continuation<BadClass>)": {
        "size": 419,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.invoke(Continuation<R>)": {
        "size": 120,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.this$0": {
        "size": 68,
        "type": "field"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.doResume()": {
        "size": 1989,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.create(Continuation<*>)": {
        "size": 458,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest$testBadClass$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.<no name provided>": {
        "size": 1326,
        "type": "class"
    },
    "test.coroutines.<no name provided>.<init>($closureBox$)": {
        "size": 178,
        "type": "function"
    },
    "test.coroutines.<no name provided>.<get-context>()": {
        "size": 173,
        "type": "function"
    },
    "test.coroutines.<no name provided>.context": {
        "size": 56,
        "type": "field"
    },
    "test.coroutines.<no name provided>.resumeWith(Result<BadClass>)": {
        "size": 600,
        "type": "function"
    },
    "test.coroutines.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.<no name provided>.$result": {
        "size": 52,
        "type": "field"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0": {
        "size": 4124,
        "type": "class"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.<this>": {
        "size": 68,
        "type": "field"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.<init>(CoroutinesReferenceValuesTest, Continuation<BadClass>)": {
        "size": 223,
        "type": "function"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.doResume()": {
        "size": 3222,
        "type": "function"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.$getBadClassViaSuspendCOROUTINE$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1": {
        "size": 4247,
        "type": "class"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.<this>": {
        "size": 68,
        "type": "field"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.<init>(CoroutinesReferenceValuesTest, Continuation<Unit>)": {
        "size": 219,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.doResume()": {
        "size": 3287,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.tmp0_assertStaticAndRuntimeTypeIs0": {
        "size": 75,
        "type": "field"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.$checkBadClassTwiceCOROUTINE$1.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest": {
        "size": 1930,
        "type": "class"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.<init>()": {
        "size": 91,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.counter": {
        "size": 25,
        "type": "field"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.getBadClassViaSuspend(Continuation<BadClass>)": {
        "size": 284,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.checkBadClassTwice(Continuation<Unit>)": {
        "size": 271,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.suspend(SuspendFunction0<T>)": {
        "size": 92,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.testBadClass()": {
        "size": 876,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.CoroutinesReferenceValuesTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.kotlin.CustomException": {
        "size": 626,
        "type": "class"
    },
    "test.kotlin.CustomException.<init>(String)": {
        "size": 105,
        "type": "function"
    },
    "test.kotlin.CustomException.toString()": {
        "size": 193,
        "type": "function"
    },
    "test.kotlin.CustomException.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "test.kotlin.CustomException.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "test.kotlin.CustomException.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "test.kotlin.CustomException.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.kotlin.CustomException.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.kotlin.ResultTest": {
        "size": 50328,
        "type": "class"
    },
    "test.kotlin.ResultTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.kotlin.ResultTest.error(String)": {
        "size": 84,
        "type": "function"
    },
    "test.kotlin.ResultTest.testRunCatchingSuccess()": {
        "size": 1115,
        "type": "function"
    },
    "test.kotlin.ResultTest.testRunCatchingFailure()": {
        "size": 1150,
        "type": "function"
    },
    "test.kotlin.ResultTest.testConstructedSuccess()": {
        "size": 369,
        "type": "function"
    },
    "test.kotlin.ResultTest.testConstructedFailure()": {
        "size": 505,
        "type": "function"
    },
    "test.kotlin.ResultTest.checkSuccess(Result<T>, T, Boolean)": {
        "size": 19878,
        "type": "function"
    },
    "test.kotlin.ResultTest.checkSuccess$default(Result<T>, T, Boolean?, Int, Any?)": {
        "size": 466,
        "type": "function"
    },
    "test.kotlin.ResultTest.checkFailure(Result<T>, String, Boolean)": {
        "size": 23389,
        "type": "function"
    },
    "test.kotlin.ResultTest.checkFailure$default(Result<T>, String, Boolean?, Int, Any?)": {
        "size": 483,
        "type": "function"
    },
    "test.kotlin.ResultTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.kotlin.ResultTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.kotlin.ResultTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda": {
        "size": 4538,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 448,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.doResume()": {
        "size": 2397,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.tmp0_iterator0": {
        "size": 58,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.i1": {
        "size": 38,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 310,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testSimple$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda": {
        "size": 3837,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 499,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.doResume()": {
        "size": 1721,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 361,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testCallHasNextSeveralTimes$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda": {
        "size": 4809,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 475,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.doResume()": {
        "size": 2693,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 337,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testManualIteration$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda": {
        "size": 2889,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 469,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.doResume()": {
        "size": 887,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 331,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testEmptySequence$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda": {
        "size": 5289,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.<init>($closureBox$, Continuation<Any?>?)": {
        "size": 223,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 454,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.$sharedVar": {
        "size": 55,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.doResume()": {
        "size": 2859,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.tmp0_subject0": {
        "size": 49,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 489,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testLaziness$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda": {
        "size": 5330,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.<init>($closureBox$, Continuation<Any?>?)": {
        "size": 223,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 490,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.$sharedVar": {
        "size": 55,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.doResume()": {
        "size": 2800,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.tmp0_subject0": {
        "size": 49,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 549,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testExceptionInCoroutine$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda": {
        "size": 5302,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.<init>($closureBox$, Continuation<Any?>?)": {
        "size": 205,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 481,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.$inc": {
        "size": 49,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.doResume()": {
        "size": 2790,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.tmp0_iterator0": {
        "size": 58,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.i1": {
        "size": 38,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 522,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testParallelIteration$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda": {
        "size": 3954,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 478,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.doResume()": {
        "size": 1881,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 340,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllIterator$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda": {
        "size": 3802,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 478,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.doResume()": {
        "size": 1741,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 340,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSequence$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda": {
        "size": 3816,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 484,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.doResume()": {
        "size": 1741,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 346,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollection$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda": {
        "size": 4428,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 514,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.doResume()": {
        "size": 2255,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 376,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedFirst$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda": {
        "size": 4419,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 511,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.doResume()": {
        "size": 2253,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 373,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLast$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda": {
        "size": 4941,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 511,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.doResume()": {
        "size": 2747,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 373,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedBoth$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda": {
        "size": 7508,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 511,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.doResume()": {
        "size": 5178,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 373,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionMixedLong$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda": {
        "size": 3867,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 508,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.doResume()": {
        "size": 1728,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 370,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionOneEmpty$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda": {
        "size": 4926,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 511,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.doResume()": {
        "size": 2720,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 373,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllCollectionManyEmpty$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda": {
        "size": 7133,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.<init>(ArrayList<Any>, Continuation<Any?>?)": {
        "size": 219,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 487,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.$effects": {
        "size": 55,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.$this$sequence": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.doResume()": {
        "size": 4593,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 540,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testYieldAllSideEffects$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda": {
        "size": 5169,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.invoke(SequenceScope<Int>, Continuation<Unit>)": {
        "size": 478,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.invoke(P1, Continuation<R>)": {
        "size": 368,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.$this$iterator": {
        "size": 65,
        "type": "field"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.doResume()": {
        "size": 3022,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.create(SequenceScope<Int>, Continuation<*>)": {
        "size": 340,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest$testInfiniteYieldAll$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest": {
        "size": 30604,
        "type": "class"
    },
    "test.coroutines.SequenceBuilderTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testSimple()": {
        "size": 729,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testCallHasNextSeveralTimes()": {
        "size": 3246,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testManualIteration()": {
        "size": 3948,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testEmptySequence()": {
        "size": 2529,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testLaziness()": {
        "size": 3715,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testExceptionInCoroutine()": {
        "size": 6755,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testParallelIteration()": {
        "size": 813,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllIterator()": {
        "size": 482,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllSequence()": {
        "size": 482,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllCollection()": {
        "size": 486,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllCollectionMixedFirst()": {
        "size": 538,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllCollectionMixedLast()": {
        "size": 536,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllCollectionMixedBoth()": {
        "size": 568,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllCollectionMixedLong()": {
        "size": 696,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllCollectionOneEmpty()": {
        "size": 475,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllCollectionManyEmpty()": {
        "size": 477,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testYieldAllSideEffects()": {
        "size": 1229,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.testInfiniteYieldAll()": {
        "size": 1248,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.SequenceBuilderTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.coroutines.cancellation.CancellationExceptionTest": {
        "size": 1843,
        "type": "class"
    },
    "test.coroutines.cancellation.CancellationExceptionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.coroutines.cancellation.CancellationExceptionTest.testAllConstructors()": {
        "size": 1025,
        "type": "function"
    },
    "test.coroutines.cancellation.CancellationExceptionTest.defaultMessage()": {
        "size": 80,
        "type": "function"
    },
    "test.coroutines.cancellation.CancellationExceptionTest.checkException(CancellationException, Throwable?, String?)": {
        "size": 424,
        "type": "function"
    },
    "test.coroutines.cancellation.CancellationExceptionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.coroutines.cancellation.CancellationExceptionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.coroutines.cancellation.CancellationExceptionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.enums.values()": {
        "size": 139,
        "type": "function"
    },
    "test.enums.NonEmptyEnum_A_instance": {
        "size": 62,
        "type": "field"
    },
    "test.enums.NonEmptyEnum_B_instance": {
        "size": 62,
        "type": "field"
    },
    "test.enums.NonEmptyEnum_C_instance": {
        "size": 62,
        "type": "field"
    },
    "test.enums.NonEmptyEnum_entriesInitialized": {
        "size": 72,
        "type": "field"
    },
    "test.enums.NonEmptyEnum_initEntries()": {
        "size": 354,
        "type": "function"
    },
    "test.enums.E1_A_instance": {
        "size": 42,
        "type": "field"
    },
    "test.enums.E1_entriesInitialized": {
        "size": 62,
        "type": "field"
    },
    "test.enums.E1_initEntries()": {
        "size": 170,
        "type": "function"
    },
    "test.enums.E2_A_instance": {
        "size": 42,
        "type": "field"
    },
    "test.enums.E2_B_instance": {
        "size": 42,
        "type": "field"
    },
    "test.enums.E2_entriesInitialized": {
        "size": 62,
        "type": "field"
    },
    "test.enums.E2_initEntries()": {
        "size": 217,
        "type": "function"
    },
    "test.enums.EmptyEnum": {
        "size": 44,
        "type": "class"
    },
    "test.enums.NonEmptyEnum": {
        "size": 432,
        "type": "class"
    },
    "test.enums.NonEmptyEnum.<init>(String, Int)": {
        "size": 146,
        "type": "function"
    },
    "test.enums.NonEmptyEnum.compareTo(NonEmptyEnum)": {
        "size": 70,
        "type": "function"
    },
    "test.enums.NonEmptyEnum.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.enums.NonEmptyEnum.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.enums.NonEmptyEnum.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.enums.E1": {
        "size": 392,
        "type": "class"
    },
    "test.enums.E1.<init>(String, Int)": {
        "size": 136,
        "type": "function"
    },
    "test.enums.E1.compareTo(E1)": {
        "size": 60,
        "type": "function"
    },
    "test.enums.E1.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.enums.E1.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.enums.E1.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.enums.E2": {
        "size": 392,
        "type": "class"
    },
    "test.enums.E2.<init>(String, Int)": {
        "size": 136,
        "type": "function"
    },
    "test.enums.E2.compareTo(E2)": {
        "size": 60,
        "type": "function"
    },
    "test.enums.E2.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.enums.E2.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.enums.E2.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.enums.NonEmptyEnum_A_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "test.enums.NonEmptyEnum_B_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "test.enums.NonEmptyEnum_C_getInstance()": {
        "size": 115,
        "type": "function"
    },
    "test.enums.E1_A_getInstance()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.E2_A_getInstance()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.E2_B_getInstance()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$EmptyEnum$values$ref": {
        "size": 414,
        "type": "class"
    },
    "test.enums.EnumEntriesListTest$EmptyEnum$values$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$EmptyEnum$values$ref.invoke()": {
        "size": 72,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$EmptyEnum$values$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$testEmptyEnumBehaviour$lambda": {
        "size": 758,
        "type": "class"
    },
    "test.enums.EnumEntriesListTest$testEmptyEnumBehaviour$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$testEmptyEnumBehaviour$lambda.invoke(CompareContext<List<EmptyEnum>>)": {
        "size": 124,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$testEmptyEnumBehaviour$lambda.invoke(P1)": {
        "size": 374,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$NonEmptyEnum$values$ref": {
        "size": 426,
        "type": "class"
    },
    "test.enums.EnumEntriesListTest$NonEmptyEnum$values$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$NonEmptyEnum$values$ref.invoke()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$NonEmptyEnum$values$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$testyEnumBehaviour$lambda": {
        "size": 769,
        "type": "class"
    },
    "test.enums.EnumEntriesListTest$testyEnumBehaviour$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$testyEnumBehaviour$lambda.invoke(CompareContext<List<NonEmptyEnum>>)": {
        "size": 130,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$testyEnumBehaviour$lambda.invoke(P1)": {
        "size": 380,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$E1$values$ref": {
        "size": 386,
        "type": "class"
    },
    "test.enums.EnumEntriesListTest$E1$values$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$E1$values$ref.invoke()": {
        "size": 65,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest$E1$values$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest": {
        "size": 15663,
        "type": "class"
    },
    "test.enums.EnumEntriesListTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.testCannotBeCasted()": {
        "size": 666,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.testForEmptyEnum()": {
        "size": 5072,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.testEmptyEnumBehaviour()": {
        "size": 402,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.testForEnum()": {
        "size": 6080,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.testyEnumBehaviour()": {
        "size": 409,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.testVariantEnumBehaviour()": {
        "size": 2010,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.enums.EnumEntriesListTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.exceptions.exceptionDetailedTrace$root()": {
        "size": 125,
        "type": "function"
    },
    "test.exceptions.exceptionDetailedTrace$suppressedError(Int)": {
        "size": 191,
        "type": "function"
    },
    "test.exceptions.exceptionDetailedTrace$induced()": {
        "size": 850,
        "type": "function"
    },
    "test.exceptions.exceptionDetailedTrace$assertInTrace(String, Any)": {
        "size": 579,
        "type": "function"
    },
    "test.exceptions.circularSuppressedDetailedTrace$assertAppearsInTrace(String, Any, Int)": {
        "size": 749,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref": {
        "size": 927,
        "type": "class"
    },
    "test.exceptions.Throwable$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref.invoke()": {
        "size": 68,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref.invoke(String?)": {
        "size": 91,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref.invoke(Throwable?)": {
        "size": 92,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref.invoke(String?, Throwable?)": {
        "size": 119,
        "type": "function"
    },
    "test.exceptions.Throwable$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref": {
        "size": 907,
        "type": "class"
    },
    "test.exceptions.Error$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref.invoke()": {
        "size": 64,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref.invoke(String?)": {
        "size": 83,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref.invoke(Throwable?)": {
        "size": 84,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref.invoke(String?, Throwable?)": {
        "size": 111,
        "type": "function"
    },
    "test.exceptions.Error$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref": {
        "size": 927,
        "type": "class"
    },
    "test.exceptions.Exception$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref.invoke()": {
        "size": 68,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref.invoke(String?)": {
        "size": 91,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref.invoke(Throwable?)": {
        "size": 92,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref.invoke(String?, Throwable?)": {
        "size": 119,
        "type": "function"
    },
    "test.exceptions.Exception$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref": {
        "size": 962,
        "type": "class"
    },
    "test.exceptions.RuntimeException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref.invoke()": {
        "size": 82,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref.invoke(String?)": {
        "size": 105,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref.invoke(Throwable?)": {
        "size": 106,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref.invoke(String?, Throwable?)": {
        "size": 133,
        "type": "function"
    },
    "test.exceptions.RuntimeException$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref": {
        "size": 1002,
        "type": "class"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.invoke()": {
        "size": 98,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.invoke(String?)": {
        "size": 121,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.invoke(Throwable?)": {
        "size": 122,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.invoke(String?, Throwable?)": {
        "size": 149,
        "type": "function"
    },
    "test.exceptions.IllegalArgumentException$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref": {
        "size": 987,
        "type": "class"
    },
    "test.exceptions.IllegalStateException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref.invoke()": {
        "size": 92,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref.invoke(String?)": {
        "size": 115,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref.invoke(Throwable?)": {
        "size": 116,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref.invoke(String?, Throwable?)": {
        "size": 143,
        "type": "function"
    },
    "test.exceptions.IllegalStateException$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.IndexOutOfBoundsException$<init>$ref": {
        "size": 721,
        "type": "class"
    },
    "test.exceptions.IndexOutOfBoundsException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.IndexOutOfBoundsException$<init>$ref.invoke()": {
        "size": 100,
        "type": "function"
    },
    "test.exceptions.IndexOutOfBoundsException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.IndexOutOfBoundsException$<init>$ref.invoke(String?)": {
        "size": 123,
        "type": "function"
    },
    "test.exceptions.IndexOutOfBoundsException$<init>$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref": {
        "size": 1027,
        "type": "class"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.invoke()": {
        "size": 108,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.invoke(String?)": {
        "size": 131,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.invoke(Throwable?)": {
        "size": 132,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.invoke(String?, Throwable?)": {
        "size": 159,
        "type": "function"
    },
    "test.exceptions.UnsupportedOperationException$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.NumberFormatException$<init>$ref": {
        "size": 701,
        "type": "class"
    },
    "test.exceptions.NumberFormatException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.NumberFormatException$<init>$ref.invoke()": {
        "size": 92,
        "type": "function"
    },
    "test.exceptions.NumberFormatException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.NumberFormatException$<init>$ref.invoke(String?)": {
        "size": 115,
        "type": "function"
    },
    "test.exceptions.NumberFormatException$<init>$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.exceptions.NullPointerException$<init>$ref": {
        "size": 696,
        "type": "class"
    },
    "test.exceptions.NullPointerException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.NullPointerException$<init>$ref.invoke()": {
        "size": 90,
        "type": "function"
    },
    "test.exceptions.NullPointerException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.NullPointerException$<init>$ref.invoke(String?)": {
        "size": 113,
        "type": "function"
    },
    "test.exceptions.NullPointerException$<init>$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.exceptions.ClassCastException$<init>$ref": {
        "size": 686,
        "type": "class"
    },
    "test.exceptions.ClassCastException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.ClassCastException$<init>$ref.invoke()": {
        "size": 86,
        "type": "function"
    },
    "test.exceptions.ClassCastException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.ClassCastException$<init>$ref.invoke(String?)": {
        "size": 109,
        "type": "function"
    },
    "test.exceptions.ClassCastException$<init>$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.exceptions.NoSuchElementException$<init>$ref": {
        "size": 706,
        "type": "class"
    },
    "test.exceptions.NoSuchElementException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.NoSuchElementException$<init>$ref.invoke()": {
        "size": 94,
        "type": "function"
    },
    "test.exceptions.NoSuchElementException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.NoSuchElementException$<init>$ref.invoke(String?)": {
        "size": 117,
        "type": "function"
    },
    "test.exceptions.NoSuchElementException$<init>$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref": {
        "size": 1037,
        "type": "class"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.invoke()": {
        "size": 112,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.invoke(String?)": {
        "size": 135,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.invoke(Throwable?)": {
        "size": 136,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.invoke(String?, Throwable?)": {
        "size": 163,
        "type": "function"
    },
    "test.exceptions.ConcurrentModificationException$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.ArithmeticException$<init>$ref": {
        "size": 691,
        "type": "class"
    },
    "test.exceptions.ArithmeticException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.ArithmeticException$<init>$ref.invoke()": {
        "size": 88,
        "type": "function"
    },
    "test.exceptions.ArithmeticException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.ArithmeticException$<init>$ref.invoke(String?)": {
        "size": 111,
        "type": "function"
    },
    "test.exceptions.ArithmeticException$<init>$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref": {
        "size": 1022,
        "type": "class"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.invoke()": {
        "size": 106,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.invoke(String?)": {
        "size": 129,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.invoke(Throwable?)": {
        "size": 130,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.invoke(String?, Throwable?)": {
        "size": 157,
        "type": "function"
    },
    "test.exceptions.NoWhenBranchMatchedException$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref": {
        "size": 1062,
        "type": "class"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.invoke()": {
        "size": 122,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.invoke(String?)": {
        "size": 145,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.invoke(P1)": {
        "size": 278,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.invoke(Throwable?)": {
        "size": 146,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.invoke(String?, Throwable?)": {
        "size": 173,
        "type": "function"
    },
    "test.exceptions.UninitializedPropertyAccessException$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref": {
        "size": 952,
        "type": "class"
    },
    "test.exceptions.AssertionError$<init>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref.invoke()": {
        "size": 78,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref.invoke(String?)": {
        "size": 101,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref.invoke(Any?)": {
        "size": 98,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref.invoke(String?, Throwable?)": {
        "size": 129,
        "type": "function"
    },
    "test.exceptions.AssertionError$<init>$ref.invoke(P1, P2)": {
        "size": 490,
        "type": "function"
    },
    "test.exceptions.ExceptionTest": {
        "size": 21698,
        "type": "class"
    },
    "test.exceptions.ExceptionTest.<init>()": {
        "size": 116,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.cause": {
        "size": 47,
        "type": "field"
    },
    "test.exceptions.ExceptionTest.throwable()": {
        "size": 415,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.error()": {
        "size": 391,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.exception()": {
        "size": 415,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.runtimeException()": {
        "size": 457,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.illegalArgumentException()": {
        "size": 505,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.illegalStateException()": {
        "size": 487,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.indexOutOfBoundsException()": {
        "size": 433,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.unsupportedOperationException()": {
        "size": 535,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.numberFormatException()": {
        "size": 417,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.nullPointerException()": {
        "size": 413,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.classCastException()": {
        "size": 405,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.noSuchElementException()": {
        "size": 421,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.concurrentModificationException()": {
        "size": 547,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.arithmeticException()": {
        "size": 409,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.noWhenBranchMatchedException()": {
        "size": 529,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.uninitializedPropertyAccessException()": {
        "size": 577,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.assertionError()": {
        "size": 445,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.testCreateException(Function0<T>, Function1<String?, T>, Function1<Throwable?, T>?, Function2<String?, Throwable?, T>?)": {
        "size": 5923,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.testCreateException$default(Function0<T>, Function1<String?, T>, Function1<Throwable?, T>?, Function2<String?, Throwable?, T>?, Int, Any?)": {
        "size": 799,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.suppressedExceptions()": {
        "size": 648,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.exceptionDetailedTrace()": {
        "size": 1990,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.circularSuppressedDetailedTrace()": {
        "size": 2847,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.exceptions.ExceptionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.io.encoding.common$testEncode(Base64Test, ByteArray, String)": {
        "size": 363,
        "type": "function"
    },
    "test.io.encoding.common$testDecode(Base64Test, String, ByteArray)": {
        "size": 369,
        "type": "function"
    },
    "test.io.encoding.common$testCoding(Base64Test, String, String)": {
        "size": 278,
        "type": "function"
    },
    "test.io.encoding.Base64Test": {
        "size": 153252,
        "type": "class"
    },
    "test.io.encoding.Base64Test.<init>()": {
        "size": 2687,
        "type": "function"
    },
    "test.io.encoding.Base64Test.testEncode(Base64, ByteArray, String)": {
        "size": 671,
        "type": "function"
    },
    "test.io.encoding.Base64Test.testDecode(Base64, String, ByteArray)": {
        "size": 665,
        "type": "function"
    },
    "test.io.encoding.Base64Test.testCoding(Base64, ByteArray, String)": {
        "size": 220,
        "type": "function"
    },
    "test.io.encoding.Base64Test.bytes(IntArray)": {
        "size": 1307,
        "type": "function"
    },
    "test.io.encoding.Base64Test.codecs": {
        "size": 65,
        "type": "field"
    },
    "test.io.encoding.Base64Test.index()": {
        "size": 77603,
        "type": "function"
    },
    "test.io.encoding.Base64Test.common()": {
        "size": 12842,
        "type": "function"
    },
    "test.io.encoding.Base64Test.basicAlphabet": {
        "size": 52,
        "type": "field"
    },
    "test.io.encoding.Base64Test.urlSafeAlphabet": {
        "size": 54,
        "type": "field"
    },
    "test.io.encoding.Base64Test.alphabetBytes": {
        "size": 55,
        "type": "field"
    },
    "test.io.encoding.Base64Test.basic()": {
        "size": 23061,
        "type": "function"
    },
    "test.io.encoding.Base64Test.urlSafe()": {
        "size": 23182,
        "type": "function"
    },
    "test.io.encoding.Base64Test.mime()": {
        "size": 4224,
        "type": "function"
    },
    "test.io.encoding.Base64Test.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.io.encoding.Base64Test.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.io.encoding.Base64Test.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.JsArrayTest": {
        "size": 2902,
        "type": "class"
    },
    "test.collections.js.JsArrayTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.JsArrayTest.arraySizeAndToList()": {
        "size": 1561,
        "type": "function"
    },
    "test.collections.js.JsArrayTest.arrayListFromCollection()": {
        "size": 955,
        "type": "function"
    },
    "test.collections.js.JsArrayTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.JsArrayTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.JsArrayTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toListDoesNotCreateArrayView$lambda": {
        "size": 607,
        "type": "class"
    },
    "test.collections.js.JsCollectionsTest$toListDoesNotCreateArrayView$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toListDoesNotCreateArrayView$lambda.invoke(Array<String>)": {
        "size": 96,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toListDoesNotCreateArrayView$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toListDoesNotCreateArrayView$lambda.invoke(Array<Any>)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toMutableListDoesNotCreateArrayView$lambda": {
        "size": 621,
        "type": "class"
    },
    "test.collections.js.JsCollectionsTest$toMutableListDoesNotCreateArrayView$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toMutableListDoesNotCreateArrayView$lambda.invoke(Array<String>)": {
        "size": 103,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toMutableListDoesNotCreateArrayView$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$toMutableListDoesNotCreateArrayView$lambda.invoke(Array<Any>)": {
        "size": 94,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$listOfDoesNotCreateView$lambda": {
        "size": 951,
        "type": "class"
    },
    "test.collections.js.JsCollectionsTest$listOfDoesNotCreateView$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$listOfDoesNotCreateView$lambda.invoke(Array<String>)": {
        "size": 435,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$listOfDoesNotCreateView$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$listOfDoesNotCreateView$lambda.invoke(Array<Any>)": {
        "size": 414,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$mutableListOfDoesNotCreateView$lambda": {
        "size": 965,
        "type": "class"
    },
    "test.collections.js.JsCollectionsTest$mutableListOfDoesNotCreateView$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$mutableListOfDoesNotCreateView$lambda.invoke(Array<String>)": {
        "size": 442,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$mutableListOfDoesNotCreateView$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$mutableListOfDoesNotCreateView$lambda.invoke(Array<Any>)": {
        "size": 421,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$arrayListDoesNotCreateArrayView$lambda": {
        "size": 931,
        "type": "class"
    },
    "test.collections.js.JsCollectionsTest$arrayListDoesNotCreateArrayView$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$arrayListDoesNotCreateArrayView$lambda.invoke(Array<Int>)": {
        "size": 419,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$arrayListDoesNotCreateArrayView$lambda.invoke(P1)": {
        "size": 280,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest$arrayListDoesNotCreateArrayView$lambda.invoke(Array<Any>)": {
        "size": 419,
        "type": "function"
    },
    "test.collections.js.<no name provided>": {
        "size": 574,
        "type": "class"
    },
    "test.collections.js.<no name provided>.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest": {
        "size": 26224,
        "type": "class"
    },
    "test.collections.js.JsCollectionsTest.<init>()": {
        "size": 351,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.TEST_LIST": {
        "size": 51,
        "type": "field"
    },
    "test.collections.js.JsCollectionsTest.collectionToArray()": {
        "size": 468,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.toListDoesNotCreateArrayView()": {
        "size": 592,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.toMutableListDoesNotCreateArrayView()": {
        "size": 613,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.listOfDoesNotCreateView()": {
        "size": 577,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.mutableListOfDoesNotCreateView()": {
        "size": 598,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.arrayListDoesNotCreateArrayView()": {
        "size": 622,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.asListHidesPrimitivenessOfArray()": {
        "size": 1470,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.arrayListCapacity()": {
        "size": 277,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.listEqualsOperatesOnAny()": {
        "size": 401,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.arrayListValidatesIndexRange()": {
        "size": 15839,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.mutableIteratorRemove()": {
        "size": 2377,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.snapshotDoesNotCreateView(Array<T>, Function1<Array<T>, List<T>>)": {
        "size": 583,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.JsCollectionsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest": {
        "size": 4010,
        "type": "class"
    },
    "test.collections.js.ComplexMapJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.doTest()": {
        "size": 972,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.constructors()": {
        "size": 157,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.toNormalizedList()": {
        "size": 108,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.emptyMutableMap()": {
        "size": 237,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.emptyMutableMapWithNullableKeyValue()": {
        "size": 261,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.getOrElse()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.getOrPut()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.emptyMapGet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapGet()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapPut()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.sizeAndEmptyForEmptyMap()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.sizeAndEmpty()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.emptyMapValues()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapValues()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapKeySet()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapEntrySet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapContainsKey()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapContainsValue()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapPutAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapPutAllFromCustomMap()": {
        "size": 56,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapRemove()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapClear()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.nullAsKey()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.setViaIndexOperators()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.createUsingPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.createUsingTo()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapIteratorImplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapIteratorExplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapMutableIterator()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapCollectionPropertiesAreViews()": {
        "size": 65,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.mapCollectionPropertiesDoNotSupportAdd()": {
        "size": 72,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.specialNamesNotContainsInEmptyMap()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.specialNamesNotContainsInNonEmptyMap()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.putAndGetSpecialNamesToMap()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.emptyMap()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.createTestMap()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.createTestMutableMap()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.genericHashMapOf(Array<out Pair<K, V>>)": {
        "size": 105,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.ComplexMapJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest$compareBehavior$lambda": {
        "size": 787,
        "type": "class"
    },
    "test.collections.js.PrimitiveMapJsTest$compareBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest$compareBehavior$lambda.invoke(CompareContext<HashMap<String, out Any>>)": {
        "size": 134,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest$compareBehavior$lambda.invoke(P1)": {
        "size": 392,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest$compareBehavior$lambda.invoke(CompareContext<HashMap<Int, out Any>>)": {
        "size": 128,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest": {
        "size": 5785,
        "type": "class"
    },
    "test.collections.js.PrimitiveMapJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.constructors()": {
        "size": 918,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.toNormalizedList()": {
        "size": 108,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.emptyMutableMap()": {
        "size": 124,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.emptyMutableMapWithNullableKeyValue()": {
        "size": 117,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.compareBehavior()": {
        "size": 942,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.putNull()": {
        "size": 1225,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.getOrElse()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.getOrPut()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.emptyMapGet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapGet()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapPut()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.sizeAndEmptyForEmptyMap()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.sizeAndEmpty()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.emptyMapValues()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapValues()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapKeySet()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapEntrySet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapContainsKey()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapContainsValue()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapPutAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapPutAllFromCustomMap()": {
        "size": 56,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapRemove()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapClear()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.nullAsKey()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.setViaIndexOperators()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.createUsingPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.createUsingTo()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapIteratorImplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapIteratorExplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapMutableIterator()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapCollectionPropertiesAreViews()": {
        "size": 65,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.mapCollectionPropertiesDoNotSupportAdd()": {
        "size": 72,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.specialNamesNotContainsInEmptyMap()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.specialNamesNotContainsInNonEmptyMap()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.putAndGetSpecialNamesToMap()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.emptyMap()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.createTestMap()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.createTestMutableMap()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.genericHashMapOf(Array<out Pair<K, V>>)": {
        "size": 105,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.PrimitiveMapJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest": {
        "size": 3385,
        "type": "class"
    },
    "test.collections.js.LinkedHashMapJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.constructors()": {
        "size": 920,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.toNormalizedList()": {
        "size": 108,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.emptyMutableMap()": {
        "size": 93,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.emptyMutableMapWithNullableKeyValue()": {
        "size": 117,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.getOrElse()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.getOrPut()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.emptyMapGet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapGet()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapPut()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.sizeAndEmptyForEmptyMap()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.sizeAndEmpty()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.emptyMapValues()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapValues()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapKeySet()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapEntrySet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapContainsKey()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapContainsValue()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapPutAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapPutAllFromCustomMap()": {
        "size": 56,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapRemove()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapClear()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.nullAsKey()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.setViaIndexOperators()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.createUsingPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.createUsingTo()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapIteratorImplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapIteratorExplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapMutableIterator()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapCollectionPropertiesAreViews()": {
        "size": 65,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.mapCollectionPropertiesDoNotSupportAdd()": {
        "size": 72,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.specialNamesNotContainsInEmptyMap()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.specialNamesNotContainsInNonEmptyMap()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.putAndGetSpecialNamesToMap()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.emptyMap()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.createTestMap()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.createTestMutableMap()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.LinkedHashMapJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest": {
        "size": 3190,
        "type": "class"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.constructors()": {
        "size": 689,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.toNormalizedList()": {
        "size": 108,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.emptyMutableMap()": {
        "size": 130,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.emptyMutableMapWithNullableKeyValue()": {
        "size": 117,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.getOrElse()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.getOrPut()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.emptyMapGet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapGet()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapPut()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.sizeAndEmptyForEmptyMap()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.sizeAndEmpty()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.emptyMapValues()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapValues()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapKeySet()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapEntrySet()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapContainsKey()": {
        "size": 48,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapContainsValue()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapPutAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapPutAllFromCustomMap()": {
        "size": 56,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapRemove()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapClear()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.nullAsKey()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.setViaIndexOperators()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.createUsingPairs()": {
        "size": 50,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.createUsingTo()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapIteratorImplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapIteratorExplicitly()": {
        "size": 55,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapMutableIterator()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapCollectionPropertiesAreViews()": {
        "size": 65,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.mapCollectionPropertiesDoNotSupportAdd()": {
        "size": 72,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.specialNamesNotContainsInEmptyMap()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.specialNamesNotContainsInNonEmptyMap()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.putAndGetSpecialNamesToMap()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.emptyMap()": {
        "size": 54,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.createTestMap()": {
        "size": 59,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.createTestMutableMap()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveMapJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.<no name provided>.<get-key>()": {
        "size": 61,
        "type": "function"
    },
    "test.collections.js.<no name provided>.<get-value>()": {
        "size": 91,
        "type": "function"
    },
    "test.collections.js.ConstMap": {
        "size": 2913,
        "type": "class"
    },
    "test.collections.js.ConstMap.<init>()": {
        "size": 178,
        "type": "function"
    },
    "test.collections.js.ConstMap.<get-entries>()": {
        "size": 173,
        "type": "function"
    },
    "test.collections.js.ConstMap.<get-keys>()": {
        "size": 84,
        "type": "function"
    },
    "test.collections.js.ConstMap.<get-size>()": {
        "size": 47,
        "type": "function"
    },
    "test.collections.js.ConstMap.<get-values>()": {
        "size": 144,
        "type": "function"
    },
    "test.collections.js.ConstMap.values": {
        "size": 48,
        "type": "field"
    },
    "test.collections.js.ConstMap.containsKey(String)": {
        "size": 87,
        "type": "function"
    },
    "test.collections.js.ConstMap.containsKey(K)": {
        "size": 449,
        "type": "function"
    },
    "test.collections.js.ConstMap.containsValue(Int)": {
        "size": 93,
        "type": "function"
    },
    "test.collections.js.ConstMap.containsValue(@UnsafeVariance V)": {
        "size": 489,
        "type": "function"
    },
    "test.collections.js.ConstMap.get(String)": {
        "size": 152,
        "type": "function"
    },
    "test.collections.js.ConstMap.get(K)": {
        "size": 436,
        "type": "function"
    },
    "test.collections.js.ConstMap.isEmpty()": {
        "size": 52,
        "type": "function"
    },
    "test.collections.js.ConstMap.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.ConstMap.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.ConstMap.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.ConstMap_instance": {
        "size": 52,
        "type": "field"
    },
    "test.collections.js.ConstMap_getInstance()": {
        "size": 174,
        "type": "function"
    },
    "test.collections.js.MapJsTest$mapMutableIterator$lambda": {
        "size": 1056,
        "type": "class"
    },
    "test.collections.js.MapJsTest$mapMutableIterator$lambda.<init>(MapJsTest)": {
        "size": 118,
        "type": "function"
    },
    "test.collections.js.MapJsTest$mapMutableIterator$lambda.invoke(String)": {
        "size": 332,
        "type": "function"
    },
    "test.collections.js.MapJsTest$mapMutableIterator$lambda.invoke(P1)": {
        "size": 344,
        "type": "function"
    },
    "test.collections.js.MapJsTest$mapMutableIterator$lambda.this$0": {
        "size": 48,
        "type": "field"
    },
    "test.collections.js.MapJsTest$mapMutableIterator$lambda.invoke(MutableEntry<String, Int>)": {
        "size": 395,
        "type": "function"
    },
    "test.collections.js.MapJsTest$mapMutableIterator$lambda.invoke(Int)": {
        "size": 333,
        "type": "function"
    },
    "test.collections.js.MapJsTest": {
        "size": 53150,
        "type": "class"
    },
    "test.collections.js.MapJsTest.<init>()": {
        "size": 636,
        "type": "function"
    },
    "test.collections.js.MapJsTest.KEYS": {
        "size": 49,
        "type": "field"
    },
    "test.collections.js.MapJsTest.VALUES": {
        "size": 48,
        "type": "field"
    },
    "test.collections.js.MapJsTest.SPECIAL_NAMES": {
        "size": 59,
        "type": "field"
    },
    "test.collections.js.MapJsTest.getOrElse()": {
        "size": 1513,
        "type": "function"
    },
    "test.collections.js.MapJsTest.getOrPut()": {
        "size": 1852,
        "type": "function"
    },
    "test.collections.js.MapJsTest.emptyMapGet()": {
        "size": 351,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapGet()": {
        "size": 2139,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapPut()": {
        "size": 1717,
        "type": "function"
    },
    "test.collections.js.MapJsTest.sizeAndEmptyForEmptyMap()": {
        "size": 712,
        "type": "function"
    },
    "test.collections.js.MapJsTest.sizeAndEmpty()": {
        "size": 592,
        "type": "function"
    },
    "test.collections.js.MapJsTest.emptyMapValues()": {
        "size": 271,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapValues()": {
        "size": 307,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapKeySet()": {
        "size": 312,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapEntrySet()": {
        "size": 1216,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapContainsKey()": {
        "size": 1324,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapContainsValue()": {
        "size": 1529,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapPutAll()": {
        "size": 441,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapPutAllFromCustomMap()": {
        "size": 1226,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapRemove()": {
        "size": 2665,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapClear()": {
        "size": 336,
        "type": "function"
    },
    "test.collections.js.MapJsTest.nullAsKey()": {
        "size": 1272,
        "type": "function"
    },
    "test.collections.js.MapJsTest.nullAsValue()": {
        "size": 1054,
        "type": "function"
    },
    "test.collections.js.MapJsTest.setViaIndexOperators()": {
        "size": 1619,
        "type": "function"
    },
    "test.collections.js.MapJsTest.createUsingPairs()": {
        "size": 817,
        "type": "function"
    },
    "test.collections.js.MapJsTest.createUsingTo()": {
        "size": 788,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapIteratorImplicitly()": {
        "size": 1323,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapIteratorExplicitly()": {
        "size": 1450,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapMutableIterator()": {
        "size": 850,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapCollectionPropertiesAreViews()": {
        "size": 8498,
        "type": "function"
    },
    "test.collections.js.MapJsTest.mapCollectionPropertiesDoNotSupportAdd()": {
        "size": 8601,
        "type": "function"
    },
    "test.collections.js.MapJsTest.specialNamesNotContainsInEmptyMap()": {
        "size": 751,
        "type": "function"
    },
    "test.collections.js.MapJsTest.specialNamesNotContainsInNonEmptyMap()": {
        "size": 759,
        "type": "function"
    },
    "test.collections.js.MapJsTest.putAndGetSpecialNamesToMap()": {
        "size": 1427,
        "type": "function"
    },
    "test.collections.js.MapJsTest.toNormalizedList()": {
        "size": 76,
        "type": "function"
    },
    "test.collections.js.MapJsTest.emptyMap()": {
        "size": 72,
        "type": "function"
    },
    "test.collections.js.MapJsTest.emptyMutableMap()": {
        "size": 57,
        "type": "function"
    },
    "test.collections.js.MapJsTest.emptyMutableMapWithNullableKeyValue()": {
        "size": 79,
        "type": "function"
    },
    "test.collections.js.MapJsTest.createTestMap()": {
        "size": 82,
        "type": "function"
    },
    "test.collections.js.MapJsTest.createTestMutableMap()": {
        "size": 1117,
        "type": "function"
    },
    "test.collections.js.MapJsTest.genericHashMapOf(Array<out Pair<K, V>>)": {
        "size": 479,
        "type": "function"
    },
    "test.collections.js.MapJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.MapJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.MapJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest": {
        "size": 2661,
        "type": "class"
    },
    "test.collections.js.ComplexSetJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.doTest()": {
        "size": 648,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.constructors()": {
        "size": 157,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.createEmptyMutableSet()": {
        "size": 233,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.createEmptyMutableSetWithNullableValues()": {
        "size": 253,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.size()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.isEmpty()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.equalsMethod()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.iterator()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.containsAll()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.add()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.remove()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.addAll()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.removeAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.retainAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.clear()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.specialNamesNotContainsInEmptySet()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.specialNamesNotContainsInNonEmptySet()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.putAndGetSpecialNamesToSet()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.createTestMutableSet()": {
        "size": 68,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.createTestMutableSetReversed()": {
        "size": 76,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.genericHashSetOf(Array<out T>)": {
        "size": 83,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.ComplexSetJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest$compareBehavior$lambda": {
        "size": 828,
        "type": "class"
    },
    "test.collections.js.PrimitiveSetJsTest$compareBehavior$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest$compareBehavior$lambda.invoke(CompareContext<HashSet<String>>)": {
        "size": 198,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest$compareBehavior$lambda.invoke(P1)": {
        "size": 374,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest$compareBehavior$lambda.invoke(CompareContext<HashSet<Double>>)": {
        "size": 198,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest": {
        "size": 2957,
        "type": "class"
    },
    "test.collections.js.PrimitiveSetJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.createEmptyMutableSet()": {
        "size": 123,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.createEmptyMutableSetWithNullableValues()": {
        "size": 109,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.constructors()": {
        "size": 543,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.compareBehavior()": {
        "size": 800,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.size()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.isEmpty()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.equalsMethod()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.iterator()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.containsAll()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.add()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.remove()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.addAll()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.removeAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.retainAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.clear()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.specialNamesNotContainsInEmptySet()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.specialNamesNotContainsInNonEmptySet()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.putAndGetSpecialNamesToSet()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.createTestMutableSet()": {
        "size": 68,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.createTestMutableSetReversed()": {
        "size": 76,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.genericHashSetOf(Array<out T>)": {
        "size": 83,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.PrimitiveSetJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest": {
        "size": 2007,
        "type": "class"
    },
    "test.collections.js.LinkedHashSetJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.createEmptyMutableSet()": {
        "size": 89,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.createEmptyMutableSetWithNullableValues()": {
        "size": 109,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.constructors()": {
        "size": 545,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.size()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.isEmpty()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.equalsMethod()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.iterator()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.containsAll()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.add()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.remove()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.addAll()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.removeAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.retainAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.clear()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.specialNamesNotContainsInEmptySet()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.specialNamesNotContainsInNonEmptySet()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.putAndGetSpecialNamesToSet()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.createTestMutableSet()": {
        "size": 68,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.createTestMutableSetReversed()": {
        "size": 76,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.LinkedHashSetJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest": {
        "size": 2404,
        "type": "class"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.createEmptyMutableSet()": {
        "size": 129,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.createEmptyMutableSetWithNullableValues()": {
        "size": 109,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.constructors()": {
        "size": 883,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.size()": {
        "size": 38,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.isEmpty()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.equalsMethod()": {
        "size": 46,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.contains()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.iterator()": {
        "size": 42,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.containsAll()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.add()": {
        "size": 37,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.remove()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.addAll()": {
        "size": 40,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.removeAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.retainAll()": {
        "size": 43,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.clear()": {
        "size": 39,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.specialNamesNotContainsInEmptySet()": {
        "size": 67,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.specialNamesNotContainsInNonEmptySet()": {
        "size": 70,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.putAndGetSpecialNamesToSet()": {
        "size": 60,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.nullAsValue()": {
        "size": 45,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.createTestMutableSet()": {
        "size": 68,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.createTestMutableSetReversed()": {
        "size": 76,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.LinkedPrimitiveSetJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.SetJsTest": {
        "size": 17470,
        "type": "class"
    },
    "test.collections.js.SetJsTest.<init>()": {
        "size": 409,
        "type": "function"
    },
    "test.collections.js.SetJsTest.data": {
        "size": 48,
        "type": "field"
    },
    "test.collections.js.SetJsTest.empty": {
        "size": 49,
        "type": "field"
    },
    "test.collections.js.SetJsTest.SPECIAL_NAMES": {
        "size": 59,
        "type": "field"
    },
    "test.collections.js.SetJsTest.size()": {
        "size": 521,
        "type": "function"
    },
    "test.collections.js.SetJsTest.isEmpty()": {
        "size": 373,
        "type": "function"
    },
    "test.collections.js.SetJsTest.equalsMethod()": {
        "size": 709,
        "type": "function"
    },
    "test.collections.js.SetJsTest.contains()": {
        "size": 1502,
        "type": "function"
    },
    "test.collections.js.SetJsTest.iterator()": {
        "size": 583,
        "type": "function"
    },
    "test.collections.js.SetJsTest.containsAll()": {
        "size": 1025,
        "type": "function"
    },
    "test.collections.js.SetJsTest.add()": {
        "size": 1257,
        "type": "function"
    },
    "test.collections.js.SetJsTest.remove()": {
        "size": 1282,
        "type": "function"
    },
    "test.collections.js.SetJsTest.addAll()": {
        "size": 1030,
        "type": "function"
    },
    "test.collections.js.SetJsTest.removeAll()": {
        "size": 2023,
        "type": "function"
    },
    "test.collections.js.SetJsTest.retainAll()": {
        "size": 931,
        "type": "function"
    },
    "test.collections.js.SetJsTest.clear()": {
        "size": 346,
        "type": "function"
    },
    "test.collections.js.SetJsTest.specialNamesNotContainsInEmptySet()": {
        "size": 792,
        "type": "function"
    },
    "test.collections.js.SetJsTest.specialNamesNotContainsInNonEmptySet()": {
        "size": 794,
        "type": "function"
    },
    "test.collections.js.SetJsTest.putAndGetSpecialNamesToSet()": {
        "size": 1131,
        "type": "function"
    },
    "test.collections.js.SetJsTest.nullAsValue()": {
        "size": 564,
        "type": "function"
    },
    "test.collections.js.SetJsTest.createEmptyMutableSet()": {
        "size": 58,
        "type": "function"
    },
    "test.collections.js.SetJsTest.createEmptyMutableSetWithNullableValues()": {
        "size": 77,
        "type": "function"
    },
    "test.collections.js.SetJsTest.createTestMutableSet()": {
        "size": 238,
        "type": "function"
    },
    "test.collections.js.SetJsTest.createTestMutableSetReversed()": {
        "size": 246,
        "type": "function"
    },
    "test.collections.js.SetJsTest.genericHashSetOf(Array<out T>)": {
        "size": 421,
        "type": "function"
    },
    "test.collections.js.SetJsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.collections.js.SetJsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.collections.js.SetJsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest": {
        "size": 12922,
        "type": "class"
    },
    "test.numbers.BitwiseOperationsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.orForInt()": {
        "size": 234,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.andForInt()": {
        "size": 236,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.xorForInt()": {
        "size": 236,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shlForInt()": {
        "size": 452,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shrForInt()": {
        "size": 452,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.ushrForInt()": {
        "size": 475,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shlForUInt()": {
        "size": 735,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shrForUInt()": {
        "size": 2310,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shlForLong()": {
        "size": 645,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shrForLong()": {
        "size": 649,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.ushrForLong()": {
        "size": 774,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shlForULong()": {
        "size": 1194,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.shrForULong()": {
        "size": 3267,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.invForInt()": {
        "size": 315,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.BitwiseOperationsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest": {
        "size": 2582,
        "type": "class"
    },
    "test.numbers.BuiltinCompanionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.intTest()": {
        "size": 248,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.doubleTest()": {
        "size": 247,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.floatTest()": {
        "size": 252,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.longTest()": {
        "size": 260,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.shortTest()": {
        "size": 249,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.byteTest()": {
        "size": 244,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.charTest()": {
        "size": 250,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.stringTest()": {
        "size": 214,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.booleanTest()": {
        "size": 215,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.BuiltinCompanionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.doubleToLong$testEquals(Long, Double)": {
        "size": 289,
        "type": "function"
    },
    "test.numbers.doubleToLong$testTrailingBits(Double, Int)": {
        "size": 508,
        "type": "function"
    },
    "test.numbers.doubleToInt$testEquals$0(Int, Double)": {
        "size": 285,
        "type": "function"
    },
    "test.numbers.floatToLong$testEquals$1(Long, Float)": {
        "size": 288,
        "type": "function"
    },
    "test.numbers.floatToInt$testEquals$2(Int, Float)": {
        "size": 282,
        "type": "function"
    },
    "test.numbers.ConversionTest": {
        "size": 25594,
        "type": "class"
    },
    "test.numbers.ConversionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.ConversionTest.doubleToLong()": {
        "size": 8343,
        "type": "function"
    },
    "test.numbers.ConversionTest.doubleToInt()": {
        "size": 5257,
        "type": "function"
    },
    "test.numbers.ConversionTest.floatToLong()": {
        "size": 5230,
        "type": "function"
    },
    "test.numbers.ConversionTest.floatToInt()": {
        "size": 4947,
        "type": "function"
    },
    "test.numbers.ConversionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.ConversionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.ConversionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.intDivMod$check(Int, Int, Int?, Int?)": {
        "size": 4584,
        "type": "function"
    },
    "test.numbers.intDivMod$check$default(Int, Int, Int?, Int?, Int, Any?)": {
        "size": 629,
        "type": "function"
    },
    "test.numbers.longDivMod$check$0(Long, Long, Long?, Long?)": {
        "size": 5287,
        "type": "function"
    },
    "test.numbers.longDivMod$check$0$default(Long, Long, Long?, Long?, Int, Any?)": {
        "size": 639,
        "type": "function"
    },
    "test.numbers.byteDivMod$check$1(Byte, Byte, Int?, Byte?)": {
        "size": 6125,
        "type": "function"
    },
    "test.numbers.byteDivMod$check$1$default(Byte, Byte, Int?, Byte?, Int, Any?)": {
        "size": 638,
        "type": "function"
    },
    "test.numbers.shortDivMod$check$2(Short, Short, Int?, Short?)": {
        "size": 6150,
        "type": "function"
    },
    "test.numbers.shortDivMod$check$2$default(Short, Short, Int?, Short?, Int, Any?)": {
        "size": 643,
        "type": "function"
    },
    "test.numbers.longIntMod$check$3(Long, Int, Long?, Int?)": {
        "size": 6279,
        "type": "function"
    },
    "test.numbers.longIntMod$check$3$default(Long, Int, Long?, Int?, Int, Any?)": {
        "size": 637,
        "type": "function"
    },
    "test.numbers.shortIntMod$check$4(Short, Int, Int?, Int?)": {
        "size": 5418,
        "type": "function"
    },
    "test.numbers.doubleMod$check$5(Double, Double, Double?)": {
        "size": 2620,
        "type": "function"
    },
    "test.numbers.doubleMod$check$5$default(Double, Double, Double?, Int, Any?)": {
        "size": 388,
        "type": "function"
    },
    "test.numbers.floatMod$check$6(Float, Float, Float?)": {
        "size": 2630,
        "type": "function"
    },
    "test.numbers.floatMod$check$6$default(Float, Float, Float?, Int, Any?)": {
        "size": 383,
        "type": "function"
    },
    "test.numbers.FloorDivModTest": {
        "size": 29969,
        "type": "class"
    },
    "test.numbers.FloorDivModTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.intDivMod()": {
        "size": 3742,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.longDivMod()": {
        "size": 3845,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.byteDivMod()": {
        "size": 3928,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.shortDivMod()": {
        "size": 3973,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.longIntMod()": {
        "size": 1717,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.shortIntMod()": {
        "size": 1290,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.doubleMod()": {
        "size": 4865,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.floatMod()": {
        "size": 4829,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.FloorDivModTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.assertAlmostEquals(Double, Double, Double?)": {
        "size": 1297,
        "type": "function"
    },
    "test.numbers.assertAlmostEquals$default(Double, Double, Double?, Int, Any?)": {
        "size": 418,
        "type": "function"
    },
    "test.numbers.assertAlmostEquals(Float, Float, Double?)": {
        "size": 1320,
        "type": "function"
    },
    "test.numbers.assertAlmostEquals$default(Float, Float, Double?, Int, Any?)": {
        "size": 416,
        "type": "function"
    },
    "test.numbers.<get-ulpCommon>()": {
        "size": 923,
        "type": "function"
    },
    "test.numbers.DoubleMathTest": {
        "size": 67450,
        "type": "class"
    },
    "test.numbers.DoubleMathTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.trigonometric()": {
        "size": 7468,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.hyperbolic()": {
        "size": 3020,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.inverseHyperbolicSin()": {
        "size": 2336,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.inverseHyperbolicCos()": {
        "size": 2605,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.inverseHyperbolicTan()": {
        "size": 2814,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.cubeRoots()": {
        "size": 3481,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.powers()": {
        "size": 5783,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.logarithms()": {
        "size": 5651,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.rounding()": {
        "size": 6037,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.roundingConversion()": {
        "size": 8193,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.absoluteValue()": {
        "size": 2164,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.signs()": {
        "size": 7007,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.nextAndPrev()": {
        "size": 7400,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.DoubleMathTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.Companion": {
        "size": 423,
        "type": "class"
    },
    "test.numbers.Companion.<init>()": {
        "size": 130,
        "type": "function"
    },
    "test.numbers.Companion.PI": {
        "size": 45,
        "type": "field"
    },
    "test.numbers.Companion.E": {
        "size": 44,
        "type": "field"
    },
    "test.numbers.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "test.numbers.FloatMathTest": {
        "size": 58440,
        "type": "class"
    },
    "test.numbers.FloatMathTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.FloatMathTest.floatRangeConversion()": {
        "size": 604,
        "type": "function"
    },
    "test.numbers.FloatMathTest.trigonometric()": {
        "size": 7884,
        "type": "function"
    },
    "test.numbers.FloatMathTest.hyperbolic()": {
        "size": 3025,
        "type": "function"
    },
    "test.numbers.FloatMathTest.inverseHyperbolicSin()": {
        "size": 2280,
        "type": "function"
    },
    "test.numbers.FloatMathTest.inverseHyperbolicCos()": {
        "size": 2545,
        "type": "function"
    },
    "test.numbers.FloatMathTest.inverseHyperbolicTan()": {
        "size": 2775,
        "type": "function"
    },
    "test.numbers.FloatMathTest.cubeRoots()": {
        "size": 3346,
        "type": "function"
    },
    "test.numbers.FloatMathTest.powers()": {
        "size": 5301,
        "type": "function"
    },
    "test.numbers.FloatMathTest.logarithms()": {
        "size": 5134,
        "type": "function"
    },
    "test.numbers.FloatMathTest.rounding()": {
        "size": 6059,
        "type": "function"
    },
    "test.numbers.FloatMathTest.roundingConversion()": {
        "size": 7939,
        "type": "function"
    },
    "test.numbers.FloatMathTest.absoluteValue()": {
        "size": 2137,
        "type": "function"
    },
    "test.numbers.FloatMathTest.signs()": {
        "size": 6259,
        "type": "function"
    },
    "test.numbers.FloatMathTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.FloatMathTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.FloatMathTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.IntegerMathTest": {
        "size": 9198,
        "type": "class"
    },
    "test.numbers.IntegerMathTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.IntegerMathTest.intSigns()": {
        "size": 4193,
        "type": "function"
    },
    "test.numbers.IntegerMathTest.longSigns()": {
        "size": 4287,
        "type": "function"
    },
    "test.numbers.IntegerMathTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.IntegerMathTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.IntegerMathTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.<get-values>()": {
        "size": 342,
        "type": "function"
    },
    "test.numbers.minOf$ref": {
        "size": 1164,
        "type": "class"
    },
    "test.numbers.minOf$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.minOf$ref.invoke(Double, Double)": {
        "size": 97,
        "type": "function"
    },
    "test.numbers.minOf$ref.invoke(P1, P2)": {
        "size": 528,
        "type": "function"
    },
    "test.numbers.minOf$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.numbers.minOf$ref.invoke(Float, Float)": {
        "size": 94,
        "type": "function"
    },
    "test.numbers.minOf$ref.invoke(Double, Double, Double)": {
        "size": 117,
        "type": "function"
    },
    "test.numbers.minOf$ref.invoke(P1, P2, P3)": {
        "size": 725,
        "type": "function"
    },
    "test.numbers.minOf$ref.invoke(Float, Float, Float)": {
        "size": 113,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$minOfVararg$lambda": {
        "size": 1485,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$minOfVararg$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$minOfVararg$lambda.invoke(Double, Double, Double)": {
        "size": 501,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$minOfVararg$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$minOfVararg$lambda.invoke(Float, Float, Float)": {
        "size": 494,
        "type": "function"
    },
    "test.numbers.maxOf$ref": {
        "size": 1164,
        "type": "class"
    },
    "test.numbers.maxOf$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.maxOf$ref.invoke(Double, Double)": {
        "size": 97,
        "type": "function"
    },
    "test.numbers.maxOf$ref.invoke(P1, P2)": {
        "size": 528,
        "type": "function"
    },
    "test.numbers.maxOf$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.numbers.maxOf$ref.invoke(Float, Float)": {
        "size": 94,
        "type": "function"
    },
    "test.numbers.maxOf$ref.invoke(Double, Double, Double)": {
        "size": 117,
        "type": "function"
    },
    "test.numbers.maxOf$ref.invoke(P1, P2, P3)": {
        "size": 725,
        "type": "function"
    },
    "test.numbers.maxOf$ref.invoke(Float, Float, Float)": {
        "size": 113,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$maxOfVararg$lambda": {
        "size": 1485,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$maxOfVararg$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$maxOfVararg$lambda.invoke(Double, Double, Double)": {
        "size": 501,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$maxOfVararg$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$maxOfVararg$lambda.invoke(Float, Float, Float)": {
        "size": 494,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOrNull$lambda": {
        "size": 1144,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$arrayMinOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOrNull$lambda.invoke(Double, Double)": {
        "size": 390,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOrNull$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOrNull$lambda.invoke(Float, Float)": {
        "size": 382,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOrNull$lambda": {
        "size": 1144,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOrNull$lambda.invoke(Double, Double)": {
        "size": 390,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOrNull$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOrNull$lambda.invoke(Float, Float)": {
        "size": 382,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOf$lambda": {
        "size": 3712,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$arrayMinOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOf$lambda.invoke(Double, Double, Double)": {
        "size": 2593,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMinOf$lambda.invoke(Float, Float, Float)": {
        "size": 2576,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOf$lambda": {
        "size": 3563,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOf$lambda.invoke(Double, Double, Double)": {
        "size": 2452,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$arrayMaxOf$lambda.invoke(Float, Float, Float)": {
        "size": 2435,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOrNull$lambda": {
        "size": 1089,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOrNull$lambda.invoke(Double, Double)": {
        "size": 326,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOrNull$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOrNull$lambda.invoke(Float, Float)": {
        "size": 320,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMax$lambda": {
        "size": 1083,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMax$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMax$lambda.invoke(Double, Double)": {
        "size": 326,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMax$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMax$lambda.invoke(Float, Float)": {
        "size": 320,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOf$lambda": {
        "size": 3694,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOf$lambda.invoke(Double, Double, Double)": {
        "size": 2556,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMinOf$lambda.invoke(Float, Float, Float)": {
        "size": 2547,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMaxOf$lambda": {
        "size": 3545,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMaxOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMaxOf$lambda.invoke(Double, Double, Double)": {
        "size": 2415,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMaxOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$primitiveArrayMaxOf$lambda.invoke(Float, Float, Float)": {
        "size": 2406,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOrNull$lambda": {
        "size": 1085,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$listMinOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOrNull$lambda.invoke(Double, Double)": {
        "size": 340,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOrNull$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOrNull$lambda.invoke(Float, Float)": {
        "size": 331,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOrNull$lambda": {
        "size": 1088,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$listMaxOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOrNull$lambda.invoke(Double, Double)": {
        "size": 343,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOrNull$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOrNull$lambda.invoke(Float, Float)": {
        "size": 334,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOf$lambda": {
        "size": 2831,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$listMinOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOf$lambda.invoke(Double, Double, Double)": {
        "size": 1763,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMinOf$lambda.invoke(Float, Float, Float)": {
        "size": 1745,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOf$lambda": {
        "size": 2698,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$listMaxOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOf$lambda.invoke(Double, Double, Double)": {
        "size": 1638,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$listMaxOf$lambda.invoke(Float, Float, Float)": {
        "size": 1620,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOrNull$lambda": {
        "size": 1096,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOrNull$lambda.invoke(Double, Double)": {
        "size": 347,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOrNull$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOrNull$lambda.invoke(Float, Float)": {
        "size": 338,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOrNull$lambda": {
        "size": 1096,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOrNull$lambda.invoke(Double, Double)": {
        "size": 347,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOrNull$lambda.invoke(P1, P2)": {
        "size": 511,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOrNull$lambda.invoke(Float, Float)": {
        "size": 338,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOf$lambda": {
        "size": 2843,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOf$lambda.invoke(Double, Double, Double)": {
        "size": 1771,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMinOf$lambda.invoke(Float, Float, Float)": {
        "size": 1753,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOf$lambda": {
        "size": 2710,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOf$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOf$lambda.invoke(Double, Double, Double)": {
        "size": 1646,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOf$lambda.invoke(P1, P2, P3)": {
        "size": 722,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest$sequenceMaxOf$lambda.invoke(Float, Float, Float)": {
        "size": 1628,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest": {
        "size": 16270,
        "type": "class"
    },
    "test.numbers.NaNPropagationTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.propagateOf2(Function2<Double, Double, Double>, Function2<Float, Float, Float>, String)": {
        "size": 3666,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.propagateOf3(Function3<Double, Double, Double, Double>, Function3<Float, Float, Float, Float>, String)": {
        "size": 4937,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.minOf()": {
        "size": 375,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.minOfVararg()": {
        "size": 278,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.maxOf()": {
        "size": 375,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.maxOfVararg()": {
        "size": 278,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.arrayMinOrNull()": {
        "size": 286,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.arrayMaxOrNull()": {
        "size": 286,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.arrayMinOf()": {
        "size": 270,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.arrayMaxOf()": {
        "size": 270,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.primitiveArrayMinOrNull()": {
        "size": 322,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.primitiveArrayMax()": {
        "size": 304,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.primitiveArrayMinOf()": {
        "size": 569,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.primitiveArrayMaxOf()": {
        "size": 569,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.listMinOrNull()": {
        "size": 282,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.listMaxOrNull()": {
        "size": 282,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.listMinOf()": {
        "size": 266,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.listMaxOf()": {
        "size": 266,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.sequenceMinOrNull()": {
        "size": 298,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.sequenceMaxOrNull()": {
        "size": 298,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.sequenceMinOf()": {
        "size": 282,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.sequenceMaxOf()": {
        "size": 282,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.NaNPropagationTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.minOf$ref.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 127,
        "type": "function"
    },
    "test.numbers.maxOf$ref.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 127,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMinOrNull$lambda": {
        "size": 1141,
        "type": "class"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMinOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMinOrNull$lambda.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 345,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMinOrNull$lambda.invoke(P1, P2)": {
        "size": 526,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMaxOrNull$lambda": {
        "size": 1141,
        "type": "class"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMaxOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMaxOrNull$lambda.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 345,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$arrayTMaxOrNull$lambda.invoke(P1, P2)": {
        "size": 526,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$listTMinOrNull$lambda": {
        "size": 1091,
        "type": "class"
    },
    "test.numbers.NaNTotalOrderTest$listTMinOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$listTMinOrNull$lambda.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 304,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$listTMinOrNull$lambda.invoke(P1, P2)": {
        "size": 526,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$listTMaxOrNull$lambda": {
        "size": 1091,
        "type": "class"
    },
    "test.numbers.NaNTotalOrderTest$listTMaxOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$listTMaxOrNull$lambda.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 304,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$listTMaxOrNull$lambda.invoke(P1, P2)": {
        "size": 526,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMinOrNull$lambda": {
        "size": 1099,
        "type": "class"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMinOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMinOrNull$lambda.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 308,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMinOrNull$lambda.invoke(P1, P2)": {
        "size": 526,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMaxOrNull$lambda": {
        "size": 1099,
        "type": "class"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMaxOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMaxOrNull$lambda.invoke(Comparable<Any>, Comparable<Any>)": {
        "size": 308,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest$sequenceTMaxOrNull$lambda.invoke(P1, P2)": {
        "size": 526,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest": {
        "size": 4246,
        "type": "class"
    },
    "test.numbers.NaNTotalOrderTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.totalOrderMinOf2(Function2<T, T, T>, String)": {
        "size": 934,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.totalOrderMaxOf2(Function2<T, T, T>, String)": {
        "size": 1236,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.minOfT()": {
        "size": 154,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.maxOfT()": {
        "size": 154,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.arrayTMinOrNull()": {
        "size": 210,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.arrayTMaxOrNull()": {
        "size": 210,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.listTMinOrNull()": {
        "size": 207,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.listTMaxOrNull()": {
        "size": 207,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.sequenceTMinOrNull()": {
        "size": 219,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.sequenceTMaxOrNull()": {
        "size": 219,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.NaNTotalOrderTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.NumbersTestConstants": {
        "size": 1450,
        "type": "class"
    },
    "test.numbers.NumbersTestConstants.<init>()": {
        "size": 541,
        "type": "function"
    },
    "test.numbers.NumbersTestConstants.byteMinSucc": {
        "size": 48,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.byteMaxPred": {
        "size": 47,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.shortMinSucc": {
        "size": 52,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.shortMaxPred": {
        "size": 51,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.intMinSucc": {
        "size": 52,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.intMaxPred": {
        "size": 51,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.longMinSucc": {
        "size": 64,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.longMaxPred": {
        "size": 63,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.doubleMaxHalf": {
        "size": 68,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.doubleMinTwice": {
        "size": 56,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.floatMaxHalf": {
        "size": 58,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.floatMinTwice": {
        "size": 54,
        "type": "field"
    },
    "test.numbers.NumbersTestConstants.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.NumbersTestConstants.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.NumbersTestConstants.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.numbers.NumbersTestConstants_instance": {
        "size": 76,
        "type": "field"
    },
    "test.numbers.sizeInBitsAndBytes$testSizes(Any, Int, Int, Int)": {
        "size": 460,
        "type": "function"
    },
    "test.numbers.byteBits$test(Byte, Int, Int, Int)": {
        "size": 2612,
        "type": "function"
    },
    "test.numbers.shortBits$test$0(Short, Int, Int, Int)": {
        "size": 2645,
        "type": "function"
    },
    "test.numbers.intBits$test$1(Int, Int, Int, Int)": {
        "size": 1660,
        "type": "function"
    },
    "test.numbers.longBits$test$2(Long, Int, Int, Int)": {
        "size": 2688,
        "type": "function"
    },
    "test.numbers.intRotate$test$3(Int, Int, Int)": {
        "size": 605,
        "type": "function"
    },
    "test.numbers.intRotate$testCyclic(Int)": {
        "size": 2797,
        "type": "function"
    },
    "test.numbers.byteRotate$test$4(Byte, Int, Byte)": {
        "size": 614,
        "type": "function"
    },
    "test.numbers.byteRotate$testCyclic$5(Byte)": {
        "size": 2814,
        "type": "function"
    },
    "test.numbers.longRotate$test$6(Long, Int, Long)": {
        "size": 1293,
        "type": "function"
    },
    "test.numbers.longRotate$testCyclic$7(Long)": {
        "size": 6111,
        "type": "function"
    },
    "test.numbers.shortRotate$test$8(Short, Int, Short)": {
        "size": 623,
        "type": "function"
    },
    "test.numbers.shortRotate$testCyclic$9(Short)": {
        "size": 2837,
        "type": "function"
    },
    "test.numbers.NumbersTest": {
        "size": 77799,
        "type": "class"
    },
    "test.numbers.NumbersTest.<init>()": {
        "size": 151,
        "type": "function"
    },
    "test.numbers.NumbersTest.one": {
        "size": 21,
        "type": "field"
    },
    "test.numbers.NumbersTest.oneS": {
        "size": 24,
        "type": "field"
    },
    "test.numbers.NumbersTest.oneB": {
        "size": 23,
        "type": "field"
    },
    "test.numbers.NumbersTest.two": {
        "size": 21,
        "type": "field"
    },
    "test.numbers.NumbersTest.intMinMaxValues()": {
        "size": 4273,
        "type": "function"
    },
    "test.numbers.NumbersTest.longMinMaxValues()": {
        "size": 6241,
        "type": "function"
    },
    "test.numbers.NumbersTest.shortMinMaxValues()": {
        "size": 6831,
        "type": "function"
    },
    "test.numbers.NumbersTest.byteMinMaxValues()": {
        "size": 6758,
        "type": "function"
    },
    "test.numbers.NumbersTest.doubleMinMaxValues()": {
        "size": 4840,
        "type": "function"
    },
    "test.numbers.NumbersTest.floatMinMaxValues()": {
        "size": 7366,
        "type": "function"
    },
    "test.numbers.NumbersTest.charMinMaxValues()": {
        "size": 3197,
        "type": "function"
    },
    "test.numbers.NumbersTest.doubleProperties()": {
        "size": 1749,
        "type": "function"
    },
    "test.numbers.NumbersTest.floatProperties()": {
        "size": 1730,
        "type": "function"
    },
    "test.numbers.NumbersTest.floatFitsInFloatArray()": {
        "size": 2054,
        "type": "function"
    },
    "test.numbers.NumbersTest.doTestNumber(Double, Boolean, Boolean)": {
        "size": 1119,
        "type": "function"
    },
    "test.numbers.NumbersTest.doTestNumber$default(Double, Boolean?, Boolean?, Int, Any?)": {
        "size": 768,
        "type": "function"
    },
    "test.numbers.NumbersTest.doTestNumber(Float, Boolean, Boolean)": {
        "size": 1118,
        "type": "function"
    },
    "test.numbers.NumbersTest.doTestNumber$default(Float, Boolean?, Boolean?, Int, Any?)": {
        "size": 767,
        "type": "function"
    },
    "test.numbers.NumbersTest.doubleToBits()": {
        "size": 6184,
        "type": "function"
    },
    "test.numbers.NumbersTest.floatToBits()": {
        "size": 7825,
        "type": "function"
    },
    "test.numbers.NumbersTest.sizeInBitsAndBytes()": {
        "size": 2291,
        "type": "function"
    },
    "test.numbers.NumbersTest.byteBits()": {
        "size": 585,
        "type": "function"
    },
    "test.numbers.NumbersTest.shortBits()": {
        "size": 616,
        "type": "function"
    },
    "test.numbers.NumbersTest.intBits()": {
        "size": 495,
        "type": "function"
    },
    "test.numbers.NumbersTest.longBits()": {
        "size": 652,
        "type": "function"
    },
    "test.numbers.NumbersTest.intRotate()": {
        "size": 1204,
        "type": "function"
    },
    "test.numbers.NumbersTest.byteRotate()": {
        "size": 1307,
        "type": "function"
    },
    "test.numbers.NumbersTest.longRotate()": {
        "size": 1582,
        "type": "function"
    },
    "test.numbers.NumbersTest.shortRotate()": {
        "size": 1334,
        "type": "function"
    },
    "test.numbers.NumbersTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.numbers.NumbersTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.numbers.NumbersTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.$KPROPERTIES": {
        "size": 83,
        "type": "field"
    },
    "test.properties.delegation.NotNullVarTest": {
        "size": 350,
        "type": "class"
    },
    "test.properties.delegation.NotNullVarTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTest.doTest()": {
        "size": 85,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric": {
        "size": 2823,
        "type": "class"
    },
    "test.properties.delegation.NotNullVarTestGeneric.<init>(String, T)": {
        "size": 287,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.a1": {
        "size": 41,
        "type": "field"
    },
    "test.properties.delegation.NotNullVarTestGeneric.b1": {
        "size": 36,
        "type": "field"
    },
    "test.properties.delegation.NotNullVarTestGeneric.<set-a>(String)": {
        "size": 217,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.<get-a>()": {
        "size": 225,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.a$delegate": {
        "size": 74,
        "type": "field"
    },
    "test.properties.delegation.NotNullVarTestGeneric.bDelegate": {
        "size": 68,
        "type": "field"
    },
    "test.properties.delegation.NotNullVarTestGeneric.<set-b>(T)": {
        "size": 207,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.<get-b>()": {
        "size": 183,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.b$delegate": {
        "size": 69,
        "type": "field"
    },
    "test.properties.delegation.NotNullVarTestGeneric.doTest()": {
        "size": 1080,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>": {
        "size": 2453,
        "type": "class"
    },
    "test.properties.delegation.<no name provided>.<init>(ObservablePropertyTest)": {
        "size": 193,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.afterChange(KProperty<*>, Int, Int)": {
        "size": 1012,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.afterChange(KProperty<*>, V, V)": {
        "size": 581,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.beforeChange(KProperty<*>, Int, Int)": {
        "size": 111,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.getValue(Any?, KProperty<*>)": {
        "size": 87,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.setValue(Any?, KProperty<*>, Int)": {
        "size": 94,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.this$0": {
        "size": 61,
        "type": "field"
    },
    "test.properties.delegation.ObservablePropertyTest": {
        "size": 2042,
        "type": "class"
    },
    "test.properties.delegation.ObservablePropertyTest.<init>()": {
        "size": 481,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest.result": {
        "size": 28,
        "type": "field"
    },
    "test.properties.delegation.ObservablePropertyTest.bDelegate": {
        "size": 70,
        "type": "field"
    },
    "test.properties.delegation.ObservablePropertyTest.<set-b>(Int)": {
        "size": 237,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest.<get-b>()": {
        "size": 218,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest.b$delegate": {
        "size": 71,
        "type": "field"
    },
    "test.properties.delegation.ObservablePropertyTest.doTest()": {
        "size": 641,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.A": {
        "size": 317,
        "type": "class"
    },
    "test.properties.delegation.A.<init>(Boolean)": {
        "size": 95,
        "type": "function"
    },
    "test.properties.delegation.A.p": {
        "size": 41,
        "type": "field"
    },
    "test.properties.delegation.A.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.A.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.A.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.<init>(A, VetoablePropertyTest)": {
        "size": 195,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.beforeChange(KProperty<*>, A, A)": {
        "size": 672,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.beforeChange(KProperty<*>, V, V)": {
        "size": 586,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.afterChange(KProperty<*>, A, A)": {
        "size": 97,
        "type": "function"
    },
    "test.properties.delegation.<no name provided>.setValue(Any?, KProperty<*>, A)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest": {
        "size": 1969,
        "type": "class"
    },
    "test.properties.delegation.VetoablePropertyTest.<init>()": {
        "size": 543,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest.result": {
        "size": 28,
        "type": "field"
    },
    "test.properties.delegation.VetoablePropertyTest.<set-b>(A)": {
        "size": 207,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest.<get-b>()": {
        "size": 210,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest.b$delegate": {
        "size": 69,
        "type": "field"
    },
    "test.properties.delegation.VetoablePropertyTest.doTest()": {
        "size": 620,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda$lambda": {
        "size": 1453,
        "type": "class"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda$lambda.<init>(Int)": {
        "size": 112,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda$lambda.invoke(DelegationInterfacesTest, KProperty<*>)": {
        "size": 476,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda$lambda.invoke(P1, P2)": {
        "size": 559,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda$lambda.$index": {
        "size": 42,
        "type": "field"
    },
    "test.properties.delegation.sam$kotlin_properties_ReadOnlyProperty$0": {
        "size": 786,
        "type": "class"
    },
    "test.properties.delegation.sam$kotlin_properties_ReadOnlyProperty$0.function": {
        "size": 61,
        "type": "field"
    },
    "test.properties.delegation.sam$kotlin_properties_ReadOnlyProperty$0.<init>(Function2<P1, P2, R>)": {
        "size": 133,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_ReadOnlyProperty$0.getValue(T, KProperty<*>)": {
        "size": 327,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_ReadOnlyProperty$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_ReadOnlyProperty$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_ReadOnlyProperty$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_PropertyDelegateProvider$0": {
        "size": 825,
        "type": "class"
    },
    "test.properties.delegation.sam$kotlin_properties_PropertyDelegateProvider$0.function": {
        "size": 61,
        "type": "field"
    },
    "test.properties.delegation.sam$kotlin_properties_PropertyDelegateProvider$0.<init>(Function2<P1, P2, R>)": {
        "size": 133,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_PropertyDelegateProvider$0.provideDelegate(T, KProperty<*>)": {
        "size": 350,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_PropertyDelegateProvider$0.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_PropertyDelegateProvider$0.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.sam$kotlin_properties_PropertyDelegateProvider$0.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$a$delegate$lambda": {
        "size": 1027,
        "type": "class"
    },
    "test.properties.delegation.DelegationInterfacesTest$a$delegate$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$a$delegate$lambda.invoke(DelegationInterfacesTest, KProperty<*>)": {
        "size": 148,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$a$delegate$lambda.invoke(P1, P2)": {
        "size": 563,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda": {
        "size": 1665,
        "type": "class"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda.invoke(DelegationInterfacesTest, KProperty<*>)": {
        "size": 763,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$provider$lambda.invoke(P1, P2)": {
        "size": 547,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest": {
        "size": 3847,
        "type": "class"
    },
    "test.properties.delegation.DelegationInterfacesTest.<init>()": {
        "size": 1613,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest.<get-a>()": {
        "size": 244,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest.a$delegate": {
        "size": 93,
        "type": "field"
    },
    "test.properties.delegation.DelegationInterfacesTest.delegatedToProvider": {
        "size": 71,
        "type": "field"
    },
    "test.properties.delegation.DelegationInterfacesTest.provider": {
        "size": 143,
        "type": "field"
    },
    "test.properties.delegation.DelegationInterfacesTest.<get-b>()": {
        "size": 244,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest.b$delegate": {
        "size": 93,
        "type": "field"
    },
    "test.properties.delegation.DelegationInterfacesTest.<get-c>()": {
        "size": 244,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest.c$delegate": {
        "size": 93,
        "type": "field"
    },
    "test.properties.delegation.DelegationInterfacesTest.doTest()": {
        "size": 675,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-a>$ref": {
        "size": 722,
        "type": "class"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-a>$ref.invoke(NotNullVarTestGeneric<T>)": {
        "size": 94,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-a>$ref.invoke(P1)": {
        "size": 308,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-a>$ref": {
        "size": 1025,
        "type": "class"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-a>$ref.invoke(NotNullVarTestGeneric<T>, String)": {
        "size": 110,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-a>$ref.invoke(P1, P2)": {
        "size": 561,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-b>$ref": {
        "size": 707,
        "type": "class"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-b>$ref.invoke(NotNullVarTestGeneric<T>)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-b>$ref.invoke(P1)": {
        "size": 308,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-b>$ref": {
        "size": 799,
        "type": "class"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-b>$ref.invoke(NotNullVarTestGeneric<T>, T)": {
        "size": 105,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-b>$ref.invoke(P1, P2)": {
        "size": 366,
        "type": "function"
    },
    "test.properties.delegation.NotNullVarTestGeneric$<set-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<get-b>$ref": {
        "size": 730,
        "type": "class"
    },
    "test.properties.delegation.ObservablePropertyTest$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<get-b>$ref.invoke(ObservablePropertyTest)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<get-b>$ref.invoke(P1)": {
        "size": 330,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<set-b>$ref": {
        "size": 1001,
        "type": "class"
    },
    "test.properties.delegation.ObservablePropertyTest$<set-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<set-b>$ref.invoke(ObservablePropertyTest, Int)": {
        "size": 105,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<set-b>$ref.invoke(P1, P2)": {
        "size": 551,
        "type": "function"
    },
    "test.properties.delegation.ObservablePropertyTest$<set-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<get-b>$ref": {
        "size": 686,
        "type": "class"
    },
    "test.properties.delegation.VetoablePropertyTest$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<get-b>$ref.invoke(VetoablePropertyTest)": {
        "size": 85,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<get-b>$ref.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<set-b>$ref": {
        "size": 979,
        "type": "class"
    },
    "test.properties.delegation.VetoablePropertyTest$<set-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<set-b>$ref.invoke(VetoablePropertyTest, A)": {
        "size": 101,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<set-b>$ref.invoke(P1, P2)": {
        "size": 543,
        "type": "function"
    },
    "test.properties.delegation.VetoablePropertyTest$<set-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-a>$ref": {
        "size": 725,
        "type": "class"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-a>$ref.invoke(DelegationInterfacesTest)": {
        "size": 94,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-a>$ref.invoke(P1)": {
        "size": 308,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-b>$ref": {
        "size": 725,
        "type": "class"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-b>$ref.invoke(DelegationInterfacesTest)": {
        "size": 94,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-b>$ref.invoke(P1)": {
        "size": 308,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-c>$ref": {
        "size": 725,
        "type": "class"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-c>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-c>$ref.invoke(DelegationInterfacesTest)": {
        "size": 94,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-c>$ref.invoke(P1)": {
        "size": 308,
        "type": "function"
    },
    "test.properties.delegation.DelegationInterfacesTest$<get-c>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.$KPROPERTIES": {
        "size": 83,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$e$delegate$lambda": {
        "size": 573,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$e$delegate$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$e$delegate$lambda.invoke(String)": {
        "size": 73,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$e$delegate$lambda.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$f$delegate$lambda": {
        "size": 570,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$f$delegate$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$f$delegate$lambda.invoke(String)": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$f$delegate$lambda.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest": {
        "size": 10185,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<init>()": {
        "size": 1282,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.map": {
        "size": 55,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.genericMap": {
        "size": 60,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.mmapOut": {
        "size": 70,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.genericMmapOut": {
        "size": 75,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-a>()": {
        "size": 391,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.a$delegate": {
        "size": 62,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-b>()": {
        "size": 391,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.b$delegate": {
        "size": 62,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-c>()": {
        "size": 385,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.c$delegate": {
        "size": 62,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-d>()": {
        "size": 393,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.d$delegate": {
        "size": 62,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-e>()": {
        "size": 391,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.e$delegate": {
        "size": 62,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-f>()": {
        "size": 395,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.f$delegate": {
        "size": 63,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-g>()": {
        "size": 391,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.g$delegate": {
        "size": 73,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-g1>()": {
        "size": 391,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.g1$delegate": {
        "size": 72,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-i>()": {
        "size": 382,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.i$delegate": {
        "size": 60,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.<get-x>()": {
        "size": 391,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.x$delegate": {
        "size": 60,
        "type": "field"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.doTest()": {
        "size": 3432,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$a2$delegate$lambda": {
        "size": 584,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$a2$delegate$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$a2$delegate$lambda.invoke(String)": {
        "size": 77,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$a2$delegate$lambda.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest": {
        "size": 9866,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<init>()": {
        "size": 763,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.map": {
        "size": 57,
        "type": "field"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.map2": {
        "size": 69,
        "type": "field"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<set-a>(String)": {
        "size": 438,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<get-a>()": {
        "size": 397,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.a$delegate": {
        "size": 64,
        "type": "field"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<set-b>(Any?)": {
        "size": 434,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<get-b>()": {
        "size": 361,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.b$delegate": {
        "size": 64,
        "type": "field"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<set-c>(Int)": {
        "size": 458,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<get-c>()": {
        "size": 390,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.c$delegate": {
        "size": 64,
        "type": "field"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<set-d>(String?)": {
        "size": 440,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<get-d>()": {
        "size": 400,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.d$delegate": {
        "size": 64,
        "type": "field"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<set-a2>(String)": {
        "size": 451,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.<get-a2>()": {
        "size": 445,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.a2$delegate": {
        "size": 76,
        "type": "field"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.doTest()": {
        "size": 3741,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-a>$ref": {
        "size": 713,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-a>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-a>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-b>$ref": {
        "size": 713,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-b>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-b>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-c>$ref": {
        "size": 704,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-c>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-c>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-c>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-c>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-d>$ref": {
        "size": 716,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-d>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-d>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-d>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-d>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-e>$ref": {
        "size": 713,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-e>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-e>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-e>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-e>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-f>$ref": {
        "size": 716,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-f>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-f>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-f>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-f>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g>$ref": {
        "size": 713,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g1>$ref": {
        "size": 716,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g1>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g1>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g1>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-g1>$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-i>$ref": {
        "size": 730,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-i>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-i>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-i>$ref.invoke(P1)": {
        "size": 330,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-i>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-x>$ref": {
        "size": 742,
        "type": "class"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-x>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-x>$ref.invoke(ValByMapExtensionsTest)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-x>$ref.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.properties.delegation.map.ValByMapExtensionsTest$<get-x>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a>$ref": {
        "size": 713,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a>$ref.invoke(VarByMapExtensionsTest)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a>$ref": {
        "size": 1016,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a>$ref.invoke(VarByMapExtensionsTest, String)": {
        "size": 108,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a>$ref.invoke(P1, P2)": {
        "size": 557,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-b>$ref": {
        "size": 707,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-b>$ref.invoke(VarByMapExtensionsTest)": {
        "size": 90,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-b>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-b>$ref": {
        "size": 799,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-b>$ref.invoke(VarByMapExtensionsTest, Any?)": {
        "size": 106,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-b>$ref.invoke(P1, P2)": {
        "size": 362,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-c>$ref": {
        "size": 730,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-c>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-c>$ref.invoke(VarByMapExtensionsTest)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-c>$ref.invoke(P1)": {
        "size": 330,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-c>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-c>$ref": {
        "size": 1001,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-c>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-c>$ref.invoke(VarByMapExtensionsTest, Int)": {
        "size": 105,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-c>$ref.invoke(P1, P2)": {
        "size": 551,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-c>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-d>$ref": {
        "size": 716,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-d>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-d>$ref.invoke(VarByMapExtensionsTest)": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-d>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-d>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-d>$ref": {
        "size": 1019,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-d>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-d>$ref.invoke(VarByMapExtensionsTest, String?)": {
        "size": 109,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-d>$ref.invoke(P1, P2)": {
        "size": 557,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-d>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a2>$ref": {
        "size": 716,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a2>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a2>$ref.invoke(VarByMapExtensionsTest)": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a2>$ref.invoke(P1)": {
        "size": 304,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<get-a2>$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a2>$ref": {
        "size": 1019,
        "type": "class"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a2>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a2>$ref.invoke(VarByMapExtensionsTest, String)": {
        "size": 109,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a2>$ref.invoke(P1, P2)": {
        "size": 557,
        "type": "function"
    },
    "test.properties.delegation.map.VarByMapExtensionsTest$<set-a2>$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.properties.delegation.references.$KPROPERTIES": {
        "size": 83,
        "type": "field"
    },
    "test.properties.delegation.references.<get-data>()": {
        "size": 90,
        "type": "function"
    },
    "test.properties.delegation.references.data": {
        "size": 48,
        "type": "field"
    },
    "test.properties.delegation.references.<set-topVar>(ULong)": {
        "size": 105,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVar>()": {
        "size": 95,
        "type": "function"
    },
    "test.properties.delegation.references.topVar": {
        "size": 45,
        "type": "field"
    },
    "test.properties.delegation.references.<get-tlValBoundVal>()": {
        "size": 437,
        "type": "function"
    },
    "test.properties.delegation.references.tlValBoundVal$delegate": {
        "size": 80,
        "type": "field"
    },
    "test.properties.delegation.references.<get-tlValBoundVar>()": {
        "size": 434,
        "type": "function"
    },
    "test.properties.delegation.references.tlValBoundVar$delegate": {
        "size": 84,
        "type": "field"
    },
    "test.properties.delegation.references.<set-tlVarBoundVar>(Int)": {
        "size": 451,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarBoundVar>()": {
        "size": 441,
        "type": "function"
    },
    "test.properties.delegation.references.tlVarBoundVar$delegate": {
        "size": 84,
        "type": "field"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVal>()": {
        "size": 445,
        "type": "function"
    },
    "test.properties.delegation.references.tlValTopLevelVal$delegate": {
        "size": 83,
        "type": "field"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVar>()": {
        "size": 448,
        "type": "function"
    },
    "test.properties.delegation.references.tlValTopLevelVar$delegate": {
        "size": 89,
        "type": "field"
    },
    "test.properties.delegation.references.<set-tlVarTopLevelVar>(ULong)": {
        "size": 465,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarTopLevelVar>()": {
        "size": 455,
        "type": "function"
    },
    "test.properties.delegation.references.tlVarTopLevelVar$delegate": {
        "size": 89,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValBoundVal>()": {
        "size": 450,
        "type": "function"
    },
    "test.properties.delegation.references.extValBoundVal$delegate": {
        "size": 81,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValBoundVar>()": {
        "size": 447,
        "type": "function"
    },
    "test.properties.delegation.references.extValBoundVar$delegate": {
        "size": 85,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>(Int)": {
        "size": 465,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>()": {
        "size": 455,
        "type": "function"
    },
    "test.properties.delegation.references.extVarBoundVar$delegate": {
        "size": 85,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>()": {
        "size": 459,
        "type": "function"
    },
    "test.properties.delegation.references.extValTopLevelVal$delegate": {
        "size": 84,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>()": {
        "size": 462,
        "type": "function"
    },
    "test.properties.delegation.references.extValTopLevelVar$delegate": {
        "size": 90,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>(ULong)": {
        "size": 479,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>()": {
        "size": 469,
        "type": "function"
    },
    "test.properties.delegation.references.extVarTopLevelVar$delegate": {
        "size": 90,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValMemberVal>()": {
        "size": 476,
        "type": "function"
    },
    "test.properties.delegation.references.extValMemberVal$delegate": {
        "size": 88,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValMemberVar>()": {
        "size": 473,
        "type": "function"
    },
    "test.properties.delegation.references.extValMemberVar$delegate": {
        "size": 92,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>(Int)": {
        "size": 492,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>()": {
        "size": 480,
        "type": "function"
    },
    "test.properties.delegation.references.extVarMemberVar$delegate": {
        "size": 92,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValExtVal>()": {
        "size": 470,
        "type": "function"
    },
    "test.properties.delegation.references.extValExtVal$delegate": {
        "size": 85,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValExtVar>()": {
        "size": 467,
        "type": "function"
    },
    "test.properties.delegation.references.extValExtVar$delegate": {
        "size": 89,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarExtVar>(Int)": {
        "size": 486,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarExtVar>()": {
        "size": 474,
        "type": "function"
    },
    "test.properties.delegation.references.extVarExtVar$delegate": {
        "size": 89,
        "type": "field"
    },
    "test.properties.delegation.references.<get-covariantVal>()": {
        "size": 472,
        "type": "function"
    },
    "test.properties.delegation.references.covariantVal$delegate": {
        "size": 79,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extCovariantVal>()": {
        "size": 509,
        "type": "function"
    },
    "test.properties.delegation.references.extCovariantVal$delegate": {
        "size": 102,
        "type": "field"
    },
    "test.properties.delegation.references.Data": {
        "size": 994,
        "type": "class"
    },
    "test.properties.delegation.references.Data.<init>(String, Int, StringBuilder)": {
        "size": 222,
        "type": "function"
    },
    "test.properties.delegation.references.Data.<init>(String, Int, StringBuilder?, Int, DefaultConstructorMarker?)": {
        "size": 447,
        "type": "function"
    },
    "test.properties.delegation.references.Data.stringVal": {
        "size": 48,
        "type": "field"
    },
    "test.properties.delegation.references.Data.intVar": {
        "size": 24,
        "type": "field"
    },
    "test.properties.delegation.references.Data.builderVar": {
        "size": 38,
        "type": "field"
    },
    "test.properties.delegation.references.Data.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.Data.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.references.Data.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>()": {
        "size": 140,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>(Int)": {
        "size": 153,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>()": {
        "size": 146,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVal>()": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-stringVal>$ref": {
        "size": 606,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-stringVal>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-stringVal>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-stringVal>$ref.invoke()": {
        "size": 197,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-stringVal>$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref": {
        "size": 630,
        "type": "class"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref.invoke()": {
        "size": 179,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref": {
        "size": 894,
        "type": "class"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.invoke(Int)": {
        "size": 186,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-intVar>$ref": {
        "size": 608,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-intVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-intVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-intVar>$ref.invoke()": {
        "size": 185,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-intVar>$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-intVar>$ref": {
        "size": 866,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<set-intVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<set-intVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-intVar>$ref.invoke(Int)": {
        "size": 192,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-intVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-intVar>$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt": {
        "size": 8138,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt.<init>()": {
        "size": 1793,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.<get-valTopLevelVal>()": {
        "size": 411,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.valTopLevelVal$delegate": {
        "size": 74,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<get-valTopLevelVar>()": {
        "size": 414,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.valTopLevelVar$delegate": {
        "size": 80,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<set-varTopLevelVar>(ULong)": {
        "size": 431,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.<get-varTopLevelVar>()": {
        "size": 421,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.varTopLevelVar$delegate": {
        "size": 80,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<get-valBoundVal>()": {
        "size": 403,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.valBoundVal$delegate": {
        "size": 71,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<get-valBoundVar>()": {
        "size": 400,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.valBoundVar$delegate": {
        "size": 75,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<set-varBoundVar>(Int)": {
        "size": 417,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.<get-varBoundVar>()": {
        "size": 407,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.varBoundVar$delegate": {
        "size": 75,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<get-valExtVal>()": {
        "size": 422,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.valExtVal$delegate": {
        "size": 75,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<get-valExtVar>()": {
        "size": 419,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.valExtVar$delegate": {
        "size": 79,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.<set-varExtVar>(Int)": {
        "size": 438,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.<get-varExtVar>()": {
        "size": 426,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.varExtVar$delegate": {
        "size": 79,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref": {
        "size": 622,
        "type": "class"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref.invoke()": {
        "size": 191,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref": {
        "size": 653,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref.invoke()": {
        "size": 210,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref.<get-name>()": {
        "size": 68,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref": {
        "size": 670,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref.invoke()": {
        "size": 207,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref.<get-name>()": {
        "size": 68,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref": {
        "size": 670,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref.invoke()": {
        "size": 207,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref.<get-name>()": {
        "size": 68,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref": {
        "size": 941,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.invoke(Int)": {
        "size": 221,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.<get-name>()": {
        "size": 68,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref": {
        "size": 691,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref.invoke()": {
        "size": 219,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref": {
        "size": 687,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref.invoke()": {
        "size": 218,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref": {
        "size": 687,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref.invoke()": {
        "size": 218,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref": {
        "size": 960,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.invoke(ULong)": {
        "size": 232,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.invoke(P1)": {
        "size": 311,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref": {
        "size": 647,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref.invoke()": {
        "size": 204,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref": {
        "size": 633,
        "type": "class"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.invoke()": {
        "size": 197,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref": {
        "size": 664,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref.invoke()": {
        "size": 201,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref": {
        "size": 650,
        "type": "class"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.invoke()": {
        "size": 194,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref": {
        "size": 919,
        "type": "class"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.invoke(Int)": {
        "size": 206,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref": {
        "size": 664,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref.invoke()": {
        "size": 201,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref": {
        "size": 935,
        "type": "class"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.$boundThis": {
        "size": 32,
        "type": "field"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.<init>(DataExt)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.invoke(Int)": {
        "size": 215,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.<get-name>()": {
        "size": 66,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref": {
        "size": 639,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref.invoke()": {
        "size": 203,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref": {
        "size": 656,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref.invoke()": {
        "size": 200,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref": {
        "size": 656,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref.invoke()": {
        "size": 200,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref": {
        "size": 927,
        "type": "class"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.invoke(Int)": {
        "size": 214,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.<get-name>()": {
        "size": 71,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref": {
        "size": 642,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref.invoke()": {
        "size": 206,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref.<get-name>()": {
        "size": 72,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref": {
        "size": 659,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref.invoke()": {
        "size": 203,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref.<get-name>()": {
        "size": 72,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref": {
        "size": 659,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref.invoke()": {
        "size": 203,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref.<get-name>()": {
        "size": 72,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref": {
        "size": 930,
        "type": "class"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.invoke(Int)": {
        "size": 217,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.<get-name>()": {
        "size": 72,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref": {
        "size": 677,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref.invoke()": {
        "size": 212,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref.<get-name>()": {
        "size": 74,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref": {
        "size": 673,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref.invoke()": {
        "size": 211,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref.<get-name>()": {
        "size": 74,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref": {
        "size": 673,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref.invoke()": {
        "size": 211,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref.<get-name>()": {
        "size": 74,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref": {
        "size": 946,
        "type": "class"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.invoke(ULong)": {
        "size": 225,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.invoke(P1)": {
        "size": 311,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.<get-name>()": {
        "size": 74,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref": {
        "size": 633,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref.invoke()": {
        "size": 197,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref": {
        "size": 650,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref.invoke()": {
        "size": 194,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref": {
        "size": 650,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref.invoke()": {
        "size": 194,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref": {
        "size": 921,
        "type": "class"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.invoke(Int)": {
        "size": 208,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref": {
        "size": 660,
        "type": "class"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref.invoke()": {
        "size": 212,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref.<get-name>()": {
        "size": 72,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref": {
        "size": 646,
        "type": "class"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref.invoke()": {
        "size": 201,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref.<get-name>()": {
        "size": 67,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref": {
        "size": 956,
        "type": "class"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.$boundThis": {
        "size": 29,
        "type": "field"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.<init>(Data)": {
        "size": 125,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.invoke(StringBuilder)": {
        "size": 208,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.invoke(P1)": {
        "size": 327,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.<get-name>()": {
        "size": 67,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest": {
        "size": 21125,
        "type": "class"
    },
    "test.properties.delegation.references.PropertyReferenceTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.checkDelegate0(KProperty0<@NoInfer V>, KProperty0<V>)": {
        "size": 256,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.checkDelegate1(KProperty0<@NoInfer V>, KMutableProperty0<V>, @NoInfer V)": {
        "size": 615,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.checkDelegate2(KMutableProperty0<@NoInfer V>, KMutableProperty0<V>, @NoInfer V, @NoInfer V)": {
        "size": 985,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.int()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.ulong()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.topLevelProperties()": {
        "size": 2059,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.memberProperties()": {
        "size": 6233,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.extensionProperties()": {
        "size": 8674,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.covariantProperties()": {
        "size": 918,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.references.PropertyReferenceTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValBoundVal>$ref": {
        "size": 393,
        "type": "class"
    },
    "test.properties.delegation.references.<get-tlValBoundVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValBoundVal>$ref.invoke()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValBoundVal>$ref.<get-name>()": {
        "size": 70,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValBoundVar>$ref": {
        "size": 410,
        "type": "class"
    },
    "test.properties.delegation.references.<get-tlValBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValBoundVar>$ref.invoke()": {
        "size": 90,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValBoundVar>$ref.<get-name>()": {
        "size": 70,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarBoundVar>$ref": {
        "size": 410,
        "type": "class"
    },
    "test.properties.delegation.references.<get-tlVarBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarBoundVar>$ref.invoke()": {
        "size": 90,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarBoundVar>$ref.<get-name>()": {
        "size": 70,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarBoundVar>$ref": {
        "size": 675,
        "type": "class"
    },
    "test.properties.delegation.references.<set-tlVarBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarBoundVar>$ref.invoke(Int)": {
        "size": 86,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarBoundVar>$ref.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarBoundVar>$ref.<get-name>()": {
        "size": 70,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVal>$ref": {
        "size": 401,
        "type": "class"
    },
    "test.properties.delegation.references.<get-topVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVal>$ref.invoke()": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVal>$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVal>$ref": {
        "size": 431,
        "type": "class"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVal>$ref.invoke()": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVal>$ref.<get-name>()": {
        "size": 73,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVar>$ref": {
        "size": 397,
        "type": "class"
    },
    "test.properties.delegation.references.<get-topVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVar>$ref.invoke()": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.references.<get-topVar>$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.<set-topVar>$ref": {
        "size": 664,
        "type": "class"
    },
    "test.properties.delegation.references.<set-topVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-topVar>$ref.invoke(ULong)": {
        "size": 81,
        "type": "function"
    },
    "test.properties.delegation.references.<set-topVar>$ref.invoke(P1)": {
        "size": 311,
        "type": "function"
    },
    "test.properties.delegation.references.<set-topVar>$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVar>$ref": {
        "size": 427,
        "type": "class"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVar>$ref.invoke()": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlValTopLevelVar>$ref.<get-name>()": {
        "size": 73,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarTopLevelVar>$ref": {
        "size": 427,
        "type": "class"
    },
    "test.properties.delegation.references.<get-tlVarTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarTopLevelVar>$ref.invoke()": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.references.<get-tlVarTopLevelVar>$ref.<get-name>()": {
        "size": 73,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarTopLevelVar>$ref": {
        "size": 694,
        "type": "class"
    },
    "test.properties.delegation.references.<set-tlVarTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarTopLevelVar>$ref.invoke(ULong)": {
        "size": 91,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarTopLevelVar>$ref.invoke(P1)": {
        "size": 311,
        "type": "function"
    },
    "test.properties.delegation.references.<set-tlVarTopLevelVar>$ref.<get-name>()": {
        "size": 73,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref.invoke(Data)": {
        "size": 87,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVal>$ref.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref.invoke(Data)": {
        "size": 84,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValBoundVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref.invoke(Data)": {
        "size": 84,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarBoundVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.invoke(Data, Int)": {
        "size": 100,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarBoundVar>$ref.invoke(P1, P2)": {
        "size": 515,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref.invoke(Data)": {
        "size": 90,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVal>$ref.invoke(P1)": {
        "size": 297,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref.invoke(Data)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValTopLevelVar>$ref.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref.invoke(Data)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarTopLevelVar>$ref.invoke(P1)": {
        "size": 296,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.invoke(Data, ULong)": {
        "size": 105,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarTopLevelVar>$ref.invoke(P1, P2)": {
        "size": 519,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref.invoke(Data)": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-stringVal>$ref.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref.invoke(Data)": {
        "size": 88,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVal>$ref.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref.invoke(Data)": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-intVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.invoke(Data, Int)": {
        "size": 78,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-intVar>$ref.invoke(P1, P2)": {
        "size": 515,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref.invoke(Data)": {
        "size": 85,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValMemberVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref.invoke(Data)": {
        "size": 85,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarMemberVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.invoke(Data, Int)": {
        "size": 101,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarMemberVar>$ref.invoke(P1, P2)": {
        "size": 515,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.invoke(Data)": {
        "size": 85,
        "type": "function"
    },
    "test.properties.delegation.references.<get-formattedVal>$ref.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref.invoke(Data)": {
        "size": 85,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVal>$ref.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.invoke(Data)": {
        "size": 82,
        "type": "function"
    },
    "test.properties.delegation.references.<get-displacedVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.invoke(Data, Int)": {
        "size": 96,
        "type": "function"
    },
    "test.properties.delegation.references.<set-displacedVar>$ref.invoke(P1, P2)": {
        "size": 515,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref.invoke(Data)": {
        "size": 82,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extValExtVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref.invoke(Data)": {
        "size": 82,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extVarExtVar>$ref.invoke(P1)": {
        "size": 294,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.invoke(Data, Int)": {
        "size": 98,
        "type": "function"
    },
    "test.properties.delegation.references.<set-extVarExtVar>$ref.invoke(P1, P2)": {
        "size": 515,
        "type": "function"
    },
    "test.properties.delegation.references.<get-covariantVal>$ref": {
        "size": 390,
        "type": "class"
    },
    "test.properties.delegation.references.<get-covariantVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-covariantVal>$ref.invoke()": {
        "size": 74,
        "type": "function"
    },
    "test.properties.delegation.references.<get-covariantVal>$ref.<get-name>()": {
        "size": 69,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref.invoke(Data)": {
        "size": 83,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<get-builderVar>$ref.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.invoke(Data, StringBuilder)": {
        "size": 92,
        "type": "function"
    },
    "test.properties.delegation.references.Data$<set-builderVar>$ref.invoke(P1, P2)": {
        "size": 535,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref.invoke(Data)": {
        "size": 94,
        "type": "function"
    },
    "test.properties.delegation.references.<get-extCovariantVal>$ref.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref.invoke(DataExt)": {
        "size": 90,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVal>$ref.invoke(P1)": {
        "size": 303,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref.invoke(DataExt)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valTopLevelVar>$ref.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref.invoke(DataExt)": {
        "size": 89,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varTopLevelVar>$ref.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.invoke(DataExt, ULong)": {
        "size": 105,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varTopLevelVar>$ref.invoke(P1, P2)": {
        "size": 525,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref.invoke(DataExt)": {
        "size": 87,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVal>$ref.invoke(P1)": {
        "size": 274,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref.invoke(DataExt)": {
        "size": 84,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valBoundVar>$ref.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref.invoke(DataExt)": {
        "size": 84,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varBoundVar>$ref.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.invoke(DataExt, Int)": {
        "size": 100,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varBoundVar>$ref.invoke(P1, P2)": {
        "size": 521,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref.invoke(DataExt)": {
        "size": 85,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVal>$ref.invoke(P1)": {
        "size": 274,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref.invoke(DataExt)": {
        "size": 82,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-valExtVar>$ref.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref.invoke(DataExt)": {
        "size": 82,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<get-varExtVar>$ref.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.invoke(DataExt, Int)": {
        "size": 98,
        "type": "function"
    },
    "test.properties.delegation.references.DataExt$<set-varExtVar>$ref.invoke(P1, P2)": {
        "size": 521,
        "type": "function"
    },
    "test.properties.delegation.references.properties initialized PropertyReferenceTest.kt": {
        "size": 86,
        "type": "field"
    },
    "test.properties.delegation.references.<init properties PropertyReferenceTest.kt>()": {
        "size": 3693,
        "type": "function"
    },
    "test.properties.delegation.lazy.$KPROPERTIES": {
        "size": 83,
        "type": "field"
    },
    "test.properties.delegation.lazy.LazyValTest$a$delegate$lambda": {
        "size": 944,
        "type": "class"
    },
    "test.properties.delegation.lazy.LazyValTest$a$delegate$lambda.<init>(LazyValTest)": {
        "size": 120,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest$a$delegate$lambda.invoke()": {
        "size": 562,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest$a$delegate$lambda.this$0": {
        "size": 50,
        "type": "field"
    },
    "test.properties.delegation.lazy.LazyValTest": {
        "size": 1130,
        "type": "class"
    },
    "test.properties.delegation.lazy.LazyValTest.<init>()": {
        "size": 243,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest.result": {
        "size": 24,
        "type": "field"
    },
    "test.properties.delegation.lazy.LazyValTest.<get-a>()": {
        "size": 378,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest.a$delegate": {
        "size": 52,
        "type": "field"
    },
    "test.properties.delegation.lazy.LazyValTest.doTest()": {
        "size": 190,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$a$delegate$lambda": {
        "size": 980,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$a$delegate$lambda.<init>(UnsafeLazyValTest)": {
        "size": 126,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$a$delegate$lambda.invoke()": {
        "size": 580,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$a$delegate$lambda.this$0": {
        "size": 56,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest": {
        "size": 1196,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.<init>()": {
        "size": 297,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.result": {
        "size": 24,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.<get-a>()": {
        "size": 384,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.a$delegate": {
        "size": 52,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.doTest()": {
        "size": 190,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$a$delegate$lambda": {
        "size": 903,
        "type": "class"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$a$delegate$lambda.<init>(NullableLazyValTest)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$a$delegate$lambda.invoke()": {
        "size": 524,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$a$delegate$lambda.this$0": {
        "size": 58,
        "type": "field"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$b$delegate$lambda": {
        "size": 563,
        "type": "class"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$b$delegate$lambda.<init>(NullableLazyValTest)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$b$delegate$lambda.invoke()": {
        "size": 209,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$b$delegate$lambda.this$0": {
        "size": 58,
        "type": "field"
    },
    "test.properties.delegation.lazy.NullableLazyValTest": {
        "size": 2677,
        "type": "class"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.<init>()": {
        "size": 446,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.resultA": {
        "size": 25,
        "type": "field"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.resultB": {
        "size": 25,
        "type": "field"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.<get-a>()": {
        "size": 405,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.a$delegate": {
        "size": 57,
        "type": "field"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.<get-b>()": {
        "size": 400,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.b$delegate": {
        "size": 56,
        "type": "field"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.doTest()": {
        "size": 562,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.foo()": {
        "size": 360,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$a$delegate$lambda": {
        "size": 939,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$a$delegate$lambda.<init>(UnsafeNullableLazyValTest)": {
        "size": 134,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$a$delegate$lambda.invoke()": {
        "size": 542,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$a$delegate$lambda.this$0": {
        "size": 64,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$b$delegate$lambda": {
        "size": 593,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$b$delegate$lambda.<init>(UnsafeNullableLazyValTest)": {
        "size": 134,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$b$delegate$lambda.invoke()": {
        "size": 221,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$b$delegate$lambda.this$0": {
        "size": 64,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest": {
        "size": 2809,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.<init>()": {
        "size": 554,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.resultA": {
        "size": 25,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.resultB": {
        "size": 25,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.<get-a>()": {
        "size": 411,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.a$delegate": {
        "size": 57,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.<get-b>()": {
        "size": 406,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.b$delegate": {
        "size": 56,
        "type": "field"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.doTest()": {
        "size": 562,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.foo()": {
        "size": 366,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda$lambda": {
        "size": 1083,
        "type": "class"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda$lambda.<init>(IdentityEqualsIsUsedToUnescapeLazyValTest)": {
        "size": 150,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda$lambda.invoke()": {
        "size": 590,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda$lambda.this$0": {
        "size": 80,
        "type": "field"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda": {
        "size": 874,
        "type": "class"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda.<init>(IdentityEqualsIsUsedToUnescapeLazyValTest)": {
        "size": 150,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda.invoke()": {
        "size": 430,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$a$delegate$lambda.this$0": {
        "size": 80,
        "type": "field"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest": {
        "size": 1576,
        "type": "class"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.<init>()": {
        "size": 299,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.equalsCalled": {
        "size": 30,
        "type": "field"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.<get-a>()": {
        "size": 494,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.a$delegate": {
        "size": 72,
        "type": "field"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.doTest()": {
        "size": 394,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.lazy.ClassWithCustomEquality": {
        "size": 688,
        "type": "class"
    },
    "test.properties.delegation.lazy.ClassWithCustomEquality.<init>(Function0<Unit>)": {
        "size": 142,
        "type": "function"
    },
    "test.properties.delegation.lazy.ClassWithCustomEquality.onEqualsCalled": {
        "size": 62,
        "type": "field"
    },
    "test.properties.delegation.lazy.ClassWithCustomEquality.equals(Any?)": {
        "size": 322,
        "type": "function"
    },
    "test.properties.delegation.lazy.ClassWithCustomEquality.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.properties.delegation.lazy.ClassWithCustomEquality.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest$<get-a>$ref": {
        "size": 664,
        "type": "class"
    },
    "test.properties.delegation.lazy.LazyValTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest$<get-a>$ref.invoke(LazyValTest)": {
        "size": 78,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest$<get-a>$ref.invoke(P1)": {
        "size": 308,
        "type": "function"
    },
    "test.properties.delegation.lazy.LazyValTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$<get-a>$ref": {
        "size": 700,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$<get-a>$ref.invoke(UnsafeLazyValTest)": {
        "size": 84,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$<get-a>$ref.invoke(P1)": {
        "size": 320,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeLazyValTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-a>$ref": {
        "size": 689,
        "type": "class"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-a>$ref.invoke(NullableLazyValTest)": {
        "size": 87,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-a>$ref.invoke(P1)": {
        "size": 298,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-b>$ref": {
        "size": 698,
        "type": "class"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-b>$ref.invoke(NullableLazyValTest)": {
        "size": 90,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-b>$ref.invoke(P1)": {
        "size": 298,
        "type": "function"
    },
    "test.properties.delegation.lazy.NullableLazyValTest$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-a>$ref": {
        "size": 725,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-a>$ref.invoke(UnsafeNullableLazyValTest)": {
        "size": 93,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-a>$ref.invoke(P1)": {
        "size": 310,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-b>$ref": {
        "size": 734,
        "type": "class"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-b>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-b>$ref.invoke(UnsafeNullableLazyValTest)": {
        "size": 96,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-b>$ref.invoke(P1)": {
        "size": 310,
        "type": "function"
    },
    "test.properties.delegation.lazy.UnsafeNullableLazyValTest$<get-b>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$<get-a>$ref": {
        "size": 878,
        "type": "class"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$<get-a>$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$<get-a>$ref.invoke(IdentityEqualsIsUsedToUnescapeLazyValTest)": {
        "size": 128,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$<get-a>$ref.invoke(P1)": {
        "size": 342,
        "type": "function"
    },
    "test.properties.delegation.lazy.IdentityEqualsIsUsedToUnescapeLazyValTest$<get-a>$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.random.<get-seededRandomSmokeTestSubject>()": {
        "size": 137,
        "type": "function"
    },
    "test.random.seededRandomSmokeTestSubject": {
        "size": 74,
        "type": "field"
    },
    "test.random.<no name provided>": {
        "size": 1241,
        "type": "class"
    },
    "test.random.<no name provided>.<init>(List<Boolean>)": {
        "size": 152,
        "type": "function"
    },
    "test.random.<no name provided>.sourceIterator()": {
        "size": 283,
        "type": "function"
    },
    "test.random.<no name provided>.keyOf(Boolean)": {
        "size": 145,
        "type": "function"
    },
    "test.random.<no name provided>.keyOf(T)": {
        "size": 316,
        "type": "function"
    },
    "test.random.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.random.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.random.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.random.<no name provided>.$tmp1_groupingBy": {
        "size": 62,
        "type": "field"
    },
    "test.random.RandomSmokeTest": {
        "size": 220876,
        "type": "class"
    },
    "test.random.RandomSmokeTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.random.RandomSmokeTest.<get-subject>()": {
        "size": 38,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextBits()": {
        "size": 4460,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextInt()": {
        "size": 1384,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextUInt()": {
        "size": 2179,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextIntUntil()": {
        "size": 10051,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextUIntUntil()": {
        "size": 5492,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextIntFromUntil()": {
        "size": 12081,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextUIntFromUntil()": {
        "size": 13567,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextIntInIntRange()": {
        "size": 10071,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextUIntInUIntRange()": {
        "size": 13739,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextLong()": {
        "size": 1401,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextULong()": {
        "size": 2207,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextLongUntil()": {
        "size": 10131,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextULongUntil()": {
        "size": 5630,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextLongFromUntil()": {
        "size": 11275,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextULongFromUntil()": {
        "size": 10988,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextLongInLongRange()": {
        "size": 10963,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextULongInULongRange()": {
        "size": 15216,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextDouble()": {
        "size": 1540,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextDoubleUntil()": {
        "size": 12607,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextDoubleFromUntil()": {
        "size": 20011,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextFloat()": {
        "size": 1512,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextBoolean()": {
        "size": 3264,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextBytes()": {
        "size": 2745,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextUBytes()": {
        "size": 2740,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextBytesRange()": {
        "size": 12197,
        "type": "function"
    },
    "test.random.RandomSmokeTest.nextUBytesRange()": {
        "size": 12466,
        "type": "function"
    },
    "test.random.RandomSmokeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.random.RandomSmokeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.random.RandomSmokeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest": {
        "size": 1782,
        "type": "class"
    },
    "test.random.DefaultRandomSmokeTest.<init>()": {
        "size": 79,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.<get-subject>()": {
        "size": 73,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextBits()": {
        "size": 42,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextInt()": {
        "size": 41,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextUInt()": {
        "size": 42,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextIntUntil()": {
        "size": 46,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextUIntUntil()": {
        "size": 47,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextIntFromUntil()": {
        "size": 50,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextUIntFromUntil()": {
        "size": 51,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextIntInIntRange()": {
        "size": 85,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextUIntInUIntRange()": {
        "size": 53,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextLong()": {
        "size": 42,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextULong()": {
        "size": 43,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextLongUntil()": {
        "size": 47,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextULongUntil()": {
        "size": 48,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextLongFromUntil()": {
        "size": 51,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextULongFromUntil()": {
        "size": 52,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextLongInLongRange()": {
        "size": 87,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextULongInULongRange()": {
        "size": 55,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextDouble()": {
        "size": 44,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextDoubleUntil()": {
        "size": 49,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextDoubleFromUntil()": {
        "size": 53,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextFloat()": {
        "size": 43,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextBoolean()": {
        "size": 45,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextBytes()": {
        "size": 43,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextUBytes()": {
        "size": 44,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextBytesRange()": {
        "size": 48,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.nextUBytesRange()": {
        "size": 49,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.random.DefaultRandomSmokeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest": {
        "size": 8127,
        "type": "class"
    },
    "test.random.SeededRandomSmokeTest.<init>()": {
        "size": 79,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.<get-subject>()": {
        "size": 88,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.sameIntSeed()": {
        "size": 854,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.sameLongSeed()": {
        "size": 876,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.sameIntLongSeed()": {
        "size": 916,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.testSameSeededRandoms(Random, Random, Any)": {
        "size": 3339,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextBits()": {
        "size": 42,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextInt()": {
        "size": 41,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextUInt()": {
        "size": 42,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextIntUntil()": {
        "size": 46,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextUIntUntil()": {
        "size": 47,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextIntFromUntil()": {
        "size": 50,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextUIntFromUntil()": {
        "size": 51,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextIntInIntRange()": {
        "size": 85,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextUIntInUIntRange()": {
        "size": 53,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextLong()": {
        "size": 42,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextULong()": {
        "size": 43,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextLongUntil()": {
        "size": 47,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextULongUntil()": {
        "size": 48,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextLongFromUntil()": {
        "size": 51,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextULongFromUntil()": {
        "size": 52,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextLongInLongRange()": {
        "size": 87,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextULongInULongRange()": {
        "size": 55,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextDouble()": {
        "size": 44,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextDoubleUntil()": {
        "size": 49,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextDoubleFromUntil()": {
        "size": 53,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextFloat()": {
        "size": 43,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextBoolean()": {
        "size": 45,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextBytes()": {
        "size": 43,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextUBytes()": {
        "size": 44,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextBytesRange()": {
        "size": 48,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.nextUBytesRange()": {
        "size": 49,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.random.SeededRandomSmokeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.random.properties initialized RandomTest.kt": {
        "size": 75,
        "type": "field"
    },
    "test.random.<init properties RandomTest.kt>()": {
        "size": 851,
        "type": "function"
    },
    "test.random.XorWowRandomImplTest": {
        "size": 1630,
        "type": "class"
    },
    "test.random.XorWowRandomImplTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.random.XorWowRandomImplTest.predefinedSequence()": {
        "size": 1311,
        "type": "function"
    },
    "test.random.XorWowRandomImplTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.random.XorWowRandomImplTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.random.XorWowRandomImplTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.ranges.CoercionTest": {
        "size": 50258,
        "type": "class"
    },
    "test.ranges.CoercionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.ranges.CoercionTest.coercionsInt()": {
        "size": 9884,
        "type": "function"
    },
    "test.ranges.CoercionTest.coercionsLong()": {
        "size": 9959,
        "type": "function"
    },
    "test.ranges.CoercionTest.coercionsDouble()": {
        "size": 13528,
        "type": "function"
    },
    "test.ranges.CoercionTest.coercionsComparable()": {
        "size": 13936,
        "type": "function"
    },
    "test.ranges.CoercionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.ranges.CoercionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.ranges.CoercionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.ranges.ComparableNumber": {
        "size": 1114,
        "type": "class"
    },
    "test.ranges.ComparableNumber.<init>(Int)": {
        "size": 103,
        "type": "function"
    },
    "test.ranges.ComparableNumber.value": {
        "size": 41,
        "type": "field"
    },
    "test.ranges.ComparableNumber.compareTo(ComparableNumber)": {
        "size": 229,
        "type": "function"
    },
    "test.ranges.ComparableNumber.compareTo(T)": {
        "size": 314,
        "type": "function"
    },
    "test.ranges.ComparableNumber.toString()": {
        "size": 200,
        "type": "function"
    },
    "test.ranges.ComparableNumber.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.ranges.ComparableNumber.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.ranges.ProgressionLastElementTest": {
        "size": 12848,
        "type": "class"
    },
    "test.ranges.ProgressionLastElementTest.<init>()": {
        "size": 511,
        "type": "function"
    },
    "test.ranges.ProgressionLastElementTest.MAX": {
        "size": 39,
        "type": "field"
    },
    "test.ranges.ProgressionLastElementTest.MIN": {
        "size": 39,
        "type": "field"
    },
    "test.ranges.ProgressionLastElementTest.INTERESTING": {
        "size": 52,
        "type": "field"
    },
    "test.ranges.ProgressionLastElementTest.doTest(Int, Int, Int, Int)": {
        "size": 805,
        "type": "function"
    },
    "test.ranges.ProgressionLastElementTest.calculateFinalElement()": {
        "size": 7202,
        "type": "function"
    },
    "test.ranges.ProgressionLastElementTest.iterateToFinalElement()": {
        "size": 3390,
        "type": "function"
    },
    "test.ranges.ProgressionLastElementTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.ranges.ProgressionLastElementTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.ranges.ProgressionLastElementTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase$doTest$lambda": {
        "size": 725,
        "type": "class"
    },
    "test.ranges.RangeIterationTestBase$doTest$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase$doTest$lambda.invoke(CompareContext<Iterator<N>>)": {
        "size": 116,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase$doTest$lambda.invoke(P1)": {
        "size": 366,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase": {
        "size": 4327,
        "type": "class"
    },
    "test.ranges.RangeIterationTestBase.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase.doTest(Iterable<N>, N, N, Number, List<N>)": {
        "size": 3895,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.ranges.RangeIterationTestBase.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.ranges.RangeIterationTest": {
        "size": 301682,
        "type": "class"
    },
    "test.ranges.RangeIterationTest.<init>()": {
        "size": 86,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.emptyConstant()": {
        "size": 1718,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.emptyRange()": {
        "size": 6554,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.oneElementRange()": {
        "size": 6161,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.simpleRange()": {
        "size": 6187,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.simpleRangeWithNonConstantEnds()": {
        "size": 22048,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.openRange()": {
        "size": 5003,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.openRangeUntil()": {
        "size": 7022,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.emptyDownto()": {
        "size": 4499,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.oneElementDownTo()": {
        "size": 4112,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.simpleDownTo()": {
        "size": 5350,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.simpleSteppedRange()": {
        "size": 7217,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.simpleSteppedDownTo()": {
        "size": 5168,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.inexactSteppedRange()": {
        "size": 6919,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.inexactSteppedDownTo()": {
        "size": 4870,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.reversedEmptyRange()": {
        "size": 6648,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.reversedEmptyBackSequence()": {
        "size": 4587,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.reversedRange()": {
        "size": 6919,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.reversedBackSequence()": {
        "size": 4858,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.reversedSimpleSteppedRange()": {
        "size": 7333,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.reversedInexactSteppedDownTo()": {
        "size": 4968,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.maxValueToMaxValue()": {
        "size": 2971,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.maxValueMinusTwoToMaxValue()": {
        "size": 14503,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.maxValueToMinValue()": {
        "size": 3172,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.progressionMaxValueToMaxValue()": {
        "size": 3089,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.progressionMaxValueMinusTwoToMaxValue()": {
        "size": 22432,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.progressionMaxValueToMinValue()": {
        "size": 6608,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.progressionMinValueToMinValue()": {
        "size": 6946,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.inexactToMaxValue()": {
        "size": 30992,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.overflowZeroToMinValue()": {
        "size": 15566,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.progressionDownToMinValue()": {
        "size": 24829,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.inexactDownToMinValue()": {
        "size": 28071,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.overflowZeroDownToMaxValue()": {
        "size": 1423,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.doTest(Iterable<N>, N, N, Number, List<N>)": {
        "size": 154,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.ranges.RangeIterationTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.ranges.RangeTest$illegalProgressionCreation$lambda": {
        "size": 461,
        "type": "class"
    },
    "test.ranges.RangeTest$illegalProgressionCreation$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.ranges.RangeTest$illegalProgressionCreation$lambda.invoke()": {
        "size": 174,
        "type": "function"
    },
    "test.ranges.RangeTest$stepSizeIsTooLow$lambda": {
        "size": 486,
        "type": "class"
    },
    "test.ranges.RangeTest$stepSizeIsTooLow$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.ranges.RangeTest$stepSizeIsTooLow$lambda.invoke()": {
        "size": 203,
        "type": "function"
    },
    "test.ranges.RangeTest": {
        "size": 106253,
        "type": "class"
    },
    "test.ranges.RangeTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.ranges.RangeTest.intRange()": {
        "size": 5427,
        "type": "function"
    },
    "test.ranges.RangeTest.byteRange()": {
        "size": 6066,
        "type": "function"
    },
    "test.ranges.RangeTest.shortRange()": {
        "size": 6099,
        "type": "function"
    },
    "test.ranges.RangeTest.longRange()": {
        "size": 5368,
        "type": "function"
    },
    "test.ranges.RangeTest.charRange()": {
        "size": 4088,
        "type": "function"
    },
    "test.ranges.RangeTest.doubleRange()": {
        "size": 6956,
        "type": "function"
    },
    "test.ranges.RangeTest.floatRange()": {
        "size": 6635,
        "type": "function"
    },
    "test.ranges.RangeTest.openRangeEndExclusive()": {
        "size": 2574,
        "type": "function"
    },
    "test.ranges.RangeTest.openRangeEndExclusiveThrows()": {
        "size": 6580,
        "type": "function"
    },
    "test.ranges.RangeTest.isEmpty()": {
        "size": 2682,
        "type": "function"
    },
    "test.ranges.RangeTest.emptyEquals()": {
        "size": 4542,
        "type": "function"
    },
    "test.ranges.RangeTest.emptyHashCode()": {
        "size": 4473,
        "type": "function"
    },
    "test.ranges.RangeTest.emptyOpenEquals()": {
        "size": 3035,
        "type": "function"
    },
    "test.ranges.RangeTest.comparableRange()": {
        "size": 1790,
        "type": "function"
    },
    "test.ranges.RangeTest.comparableOpenRange()": {
        "size": 1807,
        "type": "function"
    },
    "test.ranges.RangeTest.assertFailsWithIllegalArgument(Function0<Unit>)": {
        "size": 2122,
        "type": "function"
    },
    "test.ranges.RangeTest.illegalProgressionCreation()": {
        "size": 3793,
        "type": "function"
    },
    "test.ranges.RangeTest.stepSizeIsTooLow()": {
        "size": 493,
        "type": "function"
    },
    "test.ranges.RangeTest.randomInEmptyRange()": {
        "size": 7391,
        "type": "function"
    },
    "test.ranges.RangeTest.randomOrNullInEmptyRange()": {
        "size": 1154,
        "type": "function"
    },
    "test.ranges.RangeTest.firstInEmptyRange()": {
        "size": 8169,
        "type": "function"
    },
    "test.ranges.RangeTest.firstOrNullInEmptyRange()": {
        "size": 667,
        "type": "function"
    },
    "test.ranges.RangeTest.lastInEmptyRange()": {
        "size": 8164,
        "type": "function"
    },
    "test.ranges.RangeTest.lastOrNullInEmptyRange()": {
        "size": 662,
        "type": "function"
    },
    "test.ranges.RangeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.ranges.RangeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.ranges.RangeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.ranges.URangeTest$illegalProgressionCreation$lambda": {
        "size": 1474,
        "type": "class"
    },
    "test.ranges.URangeTest$illegalProgressionCreation$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.ranges.URangeTest$illegalProgressionCreation$lambda.invoke()": {
        "size": 1130,
        "type": "function"
    },
    "test.ranges.URangeTest$stepSizeIsTooLow$lambda": {
        "size": 487,
        "type": "class"
    },
    "test.ranges.URangeTest$stepSizeIsTooLow$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.ranges.URangeTest$stepSizeIsTooLow$lambda.invoke()": {
        "size": 203,
        "type": "function"
    },
    "test.ranges.URangeTest": {
        "size": 85504,
        "type": "class"
    },
    "test.ranges.URangeTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.ranges.URangeTest.uintRange()": {
        "size": 6565,
        "type": "function"
    },
    "test.ranges.URangeTest.ubyteRange()": {
        "size": 7567,
        "type": "function"
    },
    "test.ranges.URangeTest.ushortRange()": {
        "size": 7712,
        "type": "function"
    },
    "test.ranges.URangeTest.ulongRange()": {
        "size": 6388,
        "type": "function"
    },
    "test.ranges.URangeTest.openRangeEndExclusive()": {
        "size": 3069,
        "type": "function"
    },
    "test.ranges.URangeTest.openRangeEndExclusiveThrows()": {
        "size": 5220,
        "type": "function"
    },
    "test.ranges.URangeTest.isEmpty()": {
        "size": 3558,
        "type": "function"
    },
    "test.ranges.URangeTest.emptyEquals()": {
        "size": 10307,
        "type": "function"
    },
    "test.ranges.URangeTest.emptyHashCode()": {
        "size": 6744,
        "type": "function"
    },
    "test.ranges.URangeTest.assertFailsWithIllegalArgument(Function0<Unit>)": {
        "size": 2122,
        "type": "function"
    },
    "test.ranges.URangeTest.illegalProgressionCreation()": {
        "size": 2996,
        "type": "function"
    },
    "test.ranges.URangeTest.stepSizeIsTooLow()": {
        "size": 342,
        "type": "function"
    },
    "test.ranges.URangeTest.randomInEmptyRange()": {
        "size": 4941,
        "type": "function"
    },
    "test.ranges.URangeTest.firstInEmptyRange()": {
        "size": 6147,
        "type": "function"
    },
    "test.ranges.URangeTest.firstOrNullInEmptyRange()": {
        "size": 522,
        "type": "function"
    },
    "test.ranges.URangeTest.lastInEmptyRange()": {
        "size": 6143,
        "type": "function"
    },
    "test.ranges.URangeTest.lastOrNullInEmptyRange()": {
        "size": 518,
        "type": "function"
    },
    "test.ranges.URangeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.ranges.URangeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.ranges.URangeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.reflection.isInstanceCastSafeCast$checkIsInstance(KClass<T>, Any?, Boolean)": {
        "size": 3251,
        "type": "function"
    },
    "test.reflection.KClassTest": {
        "size": 2308,
        "type": "class"
    },
    "test.reflection.KClassTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.reflection.KClassTest.className()": {
        "size": 333,
        "type": "function"
    },
    "test.reflection.KClassTest.extendsKClassifier()": {
        "size": 988,
        "type": "function"
    },
    "test.reflection.KClassTest.isInstanceCastSafeCast()": {
        "size": 642,
        "type": "function"
    },
    "test.reflection.KClassTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.reflection.KClassTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.reflection.KClassTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.reflection.KTypeProjectionTest": {
        "size": 6729,
        "type": "class"
    },
    "test.reflection.KTypeProjectionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.reflection.KTypeProjectionTest.constructorArgumentsValidation()": {
        "size": 6173,
        "type": "function"
    },
    "test.reflection.KTypeProjectionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.reflection.KTypeProjectionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.reflection.KTypeProjectionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.TestPlatform_Jvm_instance": {
        "size": 64,
        "type": "field"
    },
    "test.TestPlatform_Js_instance": {
        "size": 63,
        "type": "field"
    },
    "test.TestPlatform_Native_instance": {
        "size": 67,
        "type": "field"
    },
    "test.TestPlatform_Wasm_instance": {
        "size": 65,
        "type": "field"
    },
    "test.Companion": {
        "size": 271,
        "type": "class"
    },
    "test.Companion.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "test.TestPlatform_entriesInitialized": {
        "size": 72,
        "type": "field"
    },
    "test.TestPlatform_initEntries()": {
        "size": 465,
        "type": "function"
    },
    "test.TestPlatform": {
        "size": 432,
        "type": "class"
    },
    "test.TestPlatform.<init>(String, Int)": {
        "size": 146,
        "type": "function"
    },
    "test.TestPlatform.compareTo(TestPlatform)": {
        "size": 70,
        "type": "function"
    },
    "test.TestPlatform.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.TestPlatform.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.TestPlatform.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.testOn(Function1<TestPlatform, Boolean>, Function0<Unit>)": {
        "size": 333,
        "type": "function"
    },
    "test.testOnlyOn(TestPlatform, Function0<Unit>)": {
        "size": 211,
        "type": "function"
    },
    "test.testExceptOn(TestPlatform, Function0<Unit>)": {
        "size": 215,
        "type": "function"
    },
    "test.assertStaticTypeIs(@NoInfer T)": {
        "size": 161,
        "type": "function"
    },
    "test.assertArrayContentEquals(ByteArray, ByteArray, String?)": {
        "size": 180,
        "type": "function"
    },
    "test.assertArrayContentEquals$default(ByteArray, ByteArray, String?, Int, Any?)": {
        "size": 428,
        "type": "function"
    },
    "test.assertArrayContentEquals(CharArray, CharArray, String?)": {
        "size": 180,
        "type": "function"
    },
    "test.assertArrayContentEquals$default(CharArray, CharArray, String?, Int, Any?)": {
        "size": 428,
        "type": "function"
    },
    "test.assertArrayContentEquals(UIntArray, UIntArray, String?)": {
        "size": 262,
        "type": "function"
    },
    "test.assertArrayContentEquals$default(UIntArray, UIntArray, String?, Int, Any?)": {
        "size": 428,
        "type": "function"
    },
    "test.assertArrayContentEquals(ULongArray, ULongArray, String?)": {
        "size": 268,
        "type": "function"
    },
    "test.assertArrayContentEquals$default(ULongArray, ULongArray, String?, Int, Any?)": {
        "size": 430,
        "type": "function"
    },
    "test.assertArrayContentEquals(UShortArray, UShortArray, String?)": {
        "size": 274,
        "type": "function"
    },
    "test.assertArrayContentEquals$default(UShortArray, UShortArray, String?, Int, Any?)": {
        "size": 432,
        "type": "function"
    },
    "test.assertArrayContentEquals(UByteArray, UByteArray, String?)": {
        "size": 268,
        "type": "function"
    },
    "test.assertArrayContentEquals$default(UByteArray, UByteArray, String?, Int, Any?)": {
        "size": 430,
        "type": "function"
    },
    "test.assertIsNegativeZero(Double)": {
        "size": 448,
        "type": "function"
    },
    "test.assertIsPositiveZero(Double)": {
        "size": 446,
        "type": "function"
    },
    "test.TestPlatform_Jvm_getInstance()": {
        "size": 119,
        "type": "function"
    },
    "test.TestPlatform_Js_getInstance()": {
        "size": 117,
        "type": "function"
    },
    "test.TestPlatform_Wasm_getInstance()": {
        "size": 121,
        "type": "function"
    },
    "test.testOnlyOn$lambda": {
        "size": 813,
        "type": "class"
    },
    "test.testOnlyOn$lambda.<init>(TestPlatform)": {
        "size": 130,
        "type": "function"
    },
    "test.testOnlyOn$lambda.invoke(TestPlatform)": {
        "size": 201,
        "type": "function"
    },
    "test.testOnlyOn$lambda.invoke(P1)": {
        "size": 314,
        "type": "function"
    },
    "test.testOnlyOn$lambda.$platform": {
        "size": 54,
        "type": "field"
    },
    "test.testExceptOn$lambda": {
        "size": 846,
        "type": "class"
    },
    "test.testExceptOn$lambda.<init>(TestPlatform)": {
        "size": 130,
        "type": "function"
    },
    "test.testExceptOn$lambda.invoke(TestPlatform)": {
        "size": 232,
        "type": "function"
    },
    "test.testExceptOn$lambda.invoke(P1)": {
        "size": 314,
        "type": "function"
    },
    "test.testExceptOn$lambda.$platform": {
        "size": 54,
        "type": "field"
    },
    "test.text.Companion": {
        "size": 2886,
        "type": "class"
    },
    "test.text.Companion.<init>()": {
        "size": 2444,
        "type": "function"
    },
    "test.text.Companion.fourBytes": {
        "size": 51,
        "type": "field"
    },
    "test.text.Companion.twentyBytes": {
        "size": 53,
        "type": "field"
    },
    "test.text.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "test.text.Companion_getInstance()": {
        "size": 171,
        "type": "function"
    },
    "test.text.BytesHexFormatTest": {
        "size": 122006,
        "type": "class"
    },
    "test.text.BytesHexFormatTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.testFormatAndParse(ByteArray, String, HexFormat)": {
        "size": 1678,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.ignoreNumberFormat()": {
        "size": 1316,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.upperCase()": {
        "size": 821,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.lowerCase()": {
        "size": 682,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.defaultCase()": {
        "size": 167,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.byteSeparatorPrefixSuffix()": {
        "size": 3709,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.bytesPerLine()": {
        "size": 2680,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.bytesPerGroup()": {
        "size": 4523,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.bytesPerLineAndBytesPerGroup()": {
        "size": 3012,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.macAddress()": {
        "size": 2621,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.parseRequiresTwoDigitsPerByte()": {
        "size": 11742,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.parseIgnoresCase()": {
        "size": 2267,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.parseAcceptsAllNewLineSequences()": {
        "size": 939,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.parseMultipleNewLines()": {
        "size": 9975,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.parseNewLineAtEnd()": {
        "size": 3347,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.emptyGroupSeparator()": {
        "size": 1753,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.bytesPerGroupBiggerThanBytesPerLine()": {
        "size": 986,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.groupSeparatorWithNewLine()": {
        "size": 970,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.nonPositiveBytesPerLine()": {
        "size": 9938,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.nonPositiveBytesPerGroup()": {
        "size": 9942,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.byteSeparatorWithNewLine()": {
        "size": 6544,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.bytePrefixWithNewLine()": {
        "size": 6531,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.byteSuffixWithNewLine()": {
        "size": 6543,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.formatToString()": {
        "size": 3890,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.createOnDemand()": {
        "size": 4201,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.formattedStringLength()": {
        "size": 8798,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.parsedByteArrayMaxSize()": {
        "size": 6182,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.BytesHexFormatTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.Companion.equalIgnoreCaseGroups": {
        "size": 66,
        "type": "field"
    },
    "test.text.digitToInt$testEquals(Int, Char, Int)": {
        "size": 1047,
        "type": "function"
    },
    "test.text.digitToInt$testFails(Char, Int)": {
        "size": 3421,
        "type": "function"
    },
    "test.text.digitToChar$testEquals$0(Char, Int, Int)": {
        "size": 667,
        "type": "function"
    },
    "test.text.digitToChar$testFails$1(Int, Int)": {
        "size": 3017,
        "type": "function"
    },
    "test.text.CharTest": {
        "size": 95371,
        "type": "class"
    },
    "test.text.CharTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.CharTest.charFromIntCode()": {
        "size": 13078,
        "type": "function"
    },
    "test.text.CharTest.charFromUShortCode()": {
        "size": 5384,
        "type": "function"
    },
    "test.text.CharTest.code()": {
        "size": 2810,
        "type": "function"
    },
    "test.text.CharTest.digitToInt()": {
        "size": 11969,
        "type": "function"
    },
    "test.text.CharTest.digitToChar()": {
        "size": 7940,
        "type": "function"
    },
    "test.text.CharTest.equalsIgnoreCase()": {
        "size": 8465,
        "type": "function"
    },
    "test.text.CharTest.charToCategory()": {
        "size": 1987,
        "type": "function"
    },
    "test.text.CharTest.charCategory()": {
        "size": 1341,
        "type": "function"
    },
    "test.text.CharTest.charCategoryUnassigned()": {
        "size": 575,
        "type": "function"
    },
    "test.text.CharTest.charCategoryUppercaseLetter()": {
        "size": 872,
        "type": "function"
    },
    "test.text.CharTest.charCategoryLowercaseLetter()": {
        "size": 862,
        "type": "function"
    },
    "test.text.CharTest.charCategoryTitlecaseLetter()": {
        "size": 877,
        "type": "function"
    },
    "test.text.CharTest.charCategoryModifierLetter()": {
        "size": 739,
        "type": "function"
    },
    "test.text.CharTest.charCategoryOtherLetter()": {
        "size": 702,
        "type": "function"
    },
    "test.text.CharTest.charCategoryDecimalDigitNumber()": {
        "size": 708,
        "type": "function"
    },
    "test.text.CharTest.charCategoryLetterNumber()": {
        "size": 576,
        "type": "function"
    },
    "test.text.CharTest.charCategoryOtherNumber()": {
        "size": 573,
        "type": "function"
    },
    "test.text.CharTest.charCategorySpaceSeparator()": {
        "size": 586,
        "type": "function"
    },
    "test.text.CharTest.charCategoryLineSeparator()": {
        "size": 585,
        "type": "function"
    },
    "test.text.CharTest.charCategoryParagraphSeparator()": {
        "size": 615,
        "type": "function"
    },
    "test.text.CharTest.charCategoryControl()": {
        "size": 565,
        "type": "function"
    },
    "test.text.CharTest.lowercaseChar()": {
        "size": 4177,
        "type": "function"
    },
    "test.text.CharTest.uppercaseChar()": {
        "size": 4979,
        "type": "function"
    },
    "test.text.CharTest.titlecaseChar()": {
        "size": 5793,
        "type": "function"
    },
    "test.text.CharTest.lowercase()": {
        "size": 2971,
        "type": "function"
    },
    "test.text.CharTest.uppercase()": {
        "size": 3401,
        "type": "function"
    },
    "test.text.CharTest.titlecase()": {
        "size": 4744,
        "type": "function"
    },
    "test.text.CharTest.otherLowercaseProperty()": {
        "size": 957,
        "type": "function"
    },
    "test.text.CharTest.otherUppercaseProperty()": {
        "size": 926,
        "type": "function"
    },
    "test.text.CharTest.isHighSurrogate()": {
        "size": 543,
        "type": "function"
    },
    "test.text.CharTest.isLowSurrogate()": {
        "size": 538,
        "type": "function"
    },
    "test.text.CharTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.CharTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.CharTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.Companion.longHex3a": {
        "size": 69,
        "type": "field"
    },
    "test.text.Companion.longHex3A": {
        "size": 69,
        "type": "field"
    },
    "test.text.NumberHexFormatTest": {
        "size": 88746,
        "type": "class"
    },
    "test.text.NumberHexFormatTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.testFormatAndParse(Long, String, HexFormat)": {
        "size": 226,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.testFormat(Long, String, HexFormat)": {
        "size": 5026,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.testParse(String, Long, HexFormat)": {
        "size": 6022,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.ignoreBytesFormat()": {
        "size": 1644,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.upperCase()": {
        "size": 859,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.lowerCase()": {
        "size": 701,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.defaultCase()": {
        "size": 186,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.formatAndParseZero()": {
        "size": 238,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.formatAndParseMax()": {
        "size": 341,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.formatPrefixSuffix()": {
        "size": 2531,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.removeLeadingZeros()": {
        "size": 781,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.parseLongFromSubstring()": {
        "size": 588,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.parseRequiresPrefixSuffix()": {
        "size": 11659,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.parseRequiresAtLeastOneHexDigit()": {
        "size": 14162,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.parseIgnoresCase()": {
        "size": 3194,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.parseIgnoresRemoveLeadingZeros()": {
        "size": 1861,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.parseLimitsHexLength()": {
        "size": 21025,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.prefixWithNewLine()": {
        "size": 6521,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.suffixWithNewLine()": {
        "size": 6529,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.NumberHexFormatTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.RegexTest$matchSequence$lambda": {
        "size": 569,
        "type": "class"
    },
    "test.text.RegexTest$matchSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.RegexTest$matchSequence$lambda.invoke(MatchResult)": {
        "size": 87,
        "type": "function"
    },
    "test.text.RegexTest$matchSequence$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.RegexTest$matchAllSequence$lambda": {
        "size": 580,
        "type": "class"
    },
    "test.text.RegexTest$matchAllSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.RegexTest$matchAllSequence$lambda.invoke(MatchResult)": {
        "size": 91,
        "type": "function"
    },
    "test.text.RegexTest$matchAllSequence$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.RegexTest$matchMultiline$lambda": {
        "size": 566,
        "type": "class"
    },
    "test.text.RegexTest$matchMultiline$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.RegexTest$matchMultiline$lambda.invoke(MatchResult)": {
        "size": 85,
        "type": "function"
    },
    "test.text.RegexTest$matchMultiline$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.RegexTest$replaceEvaluator$lambda": {
        "size": 616,
        "type": "class"
    },
    "test.text.RegexTest$replaceEvaluator$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.RegexTest$replaceEvaluator$lambda.invoke(MatchResult)": {
        "size": 127,
        "type": "function"
    },
    "test.text.RegexTest$replaceEvaluator$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.RegexTest$findAllAndSplitToSequence$lambda": {
        "size": 577,
        "type": "class"
    },
    "test.text.RegexTest$findAllAndSplitToSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.RegexTest$findAllAndSplitToSequence$lambda.invoke(MatchResult)": {
        "size": 85,
        "type": "function"
    },
    "test.text.RegexTest$findAllAndSplitToSequence$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.RegexTest": {
        "size": 167613,
        "type": "class"
    },
    "test.text.RegexTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.RegexTest.properties()": {
        "size": 891,
        "type": "function"
    },
    "test.text.RegexTest.matchResult()": {
        "size": 6975,
        "type": "function"
    },
    "test.text.RegexTest.matchEscapeSurrogatePair()": {
        "size": 418,
        "type": "function"
    },
    "test.text.RegexTest.matchEscapeRandomChar()": {
        "size": 393,
        "type": "function"
    },
    "test.text.RegexTest.matchIgnoreCase()": {
        "size": 1303,
        "type": "function"
    },
    "test.text.RegexTest.matchSequence()": {
        "size": 6023,
        "type": "function"
    },
    "test.text.RegexTest.matchAllSequence()": {
        "size": 1937,
        "type": "function"
    },
    "test.text.RegexTest.matchGroups()": {
        "size": 8464,
        "type": "function"
    },
    "test.text.RegexTest.matchOptionalGroup()": {
        "size": 7084,
        "type": "function"
    },
    "test.text.RegexTest.matchNamedGroups()": {
        "size": 2016,
        "type": "function"
    },
    "test.text.RegexTest.matchDuplicateGroupName()": {
        "size": 3098,
        "type": "function"
    },
    "test.text.RegexTest.matchOptionalNamedGroup()": {
        "size": 15322,
        "type": "function"
    },
    "test.text.RegexTest.matchWithBackReference()": {
        "size": 9172,
        "type": "function"
    },
    "test.text.RegexTest.matchCharWithOctalValue()": {
        "size": 2497,
        "type": "function"
    },
    "test.text.RegexTest.matchNamedGroupsWithBackReference()": {
        "size": 2510,
        "type": "function"
    },
    "test.text.RegexTest.matchNamedGroupCollection()": {
        "size": 1190,
        "type": "function"
    },
    "test.text.RegexTest.testInvalidBackReference(HandlingOption, String, CharSequence, String)": {
        "size": 3210,
        "type": "function"
    },
    "test.text.RegexTest.testInvalidBackReference$default(HandlingOption, String, CharSequence?, String?, Int, Any?)": {
        "size": 691,
        "type": "function"
    },
    "test.text.RegexTest.invalidNamedGroupDeclaration()": {
        "size": 9120,
        "type": "function"
    },
    "test.text.RegexTest.matchMultiline()": {
        "size": 873,
        "type": "function"
    },
    "test.text.RegexTest.matchEntire()": {
        "size": 3354,
        "type": "function"
    },
    "test.text.RegexTest.matchEntireLazyQuantor()": {
        "size": 1042,
        "type": "function"
    },
    "test.text.RegexTest.matchEntireNext()": {
        "size": 1146,
        "type": "function"
    },
    "test.text.RegexTest.matchAt()": {
        "size": 16462,
        "type": "function"
    },
    "test.text.RegexTest.escapeLiteral()": {
        "size": 629,
        "type": "function"
    },
    "test.text.RegexTest.replace()": {
        "size": 24808,
        "type": "function"
    },
    "test.text.RegexTest.replaceWithNamedGroups()": {
        "size": 12232,
        "type": "function"
    },
    "test.text.RegexTest.replaceWithNamedOptionalGroups()": {
        "size": 1195,
        "type": "function"
    },
    "test.text.RegexTest.replaceEvaluator()": {
        "size": 456,
        "type": "function"
    },
    "test.text.RegexTest.testSplitEquals(List<String>, CharSequence, Regex, Int)": {
        "size": 1800,
        "type": "function"
    },
    "test.text.RegexTest.testSplitEquals$default(List<String>, CharSequence, Regex, Int?, Int, Any?)": {
        "size": 495,
        "type": "function"
    },
    "test.text.RegexTest.split()": {
        "size": 773,
        "type": "function"
    },
    "test.text.RegexTest.splitByEmptyMatch()": {
        "size": 1826,
        "type": "function"
    },
    "test.text.RegexTest.splitByNoMatch()": {
        "size": 850,
        "type": "function"
    },
    "test.text.RegexTest.splitWithLimitOne()": {
        "size": 305,
        "type": "function"
    },
    "test.text.RegexTest.findAllAndSplitToSequence()": {
        "size": 6044,
        "type": "function"
    },
    "test.text.RegexTest.findAllEmoji()": {
        "size": 2671,
        "type": "function"
    },
    "test.text.RegexTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.RegexTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.RegexTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.CharSeq": {
        "size": 783,
        "type": "class"
    },
    "test.text.CharSeq.<init>(Int)": {
        "size": 114,
        "type": "function"
    },
    "test.text.CharSeq.<get-length>()": {
        "size": 136,
        "type": "function"
    },
    "test.text.CharSeq.length": {
        "size": 42,
        "type": "field"
    },
    "test.text.CharSeq.get(Int)": {
        "size": 118,
        "type": "function"
    },
    "test.text.CharSeq.subSequence(Int, Int)": {
        "size": 145,
        "type": "function"
    },
    "test.text.CharSeq.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.CharSeq.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.CharSeq.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.StringBuilderTest$deprecatedAppend$lambda": {
        "size": 2717,
        "type": "class"
    },
    "test.text.StringBuilderTest$deprecatedAppend$lambda.<init>(StringBuilder)": {
        "size": 113,
        "type": "function"
    },
    "test.text.StringBuilderTest$deprecatedAppend$lambda.invoke()": {
        "size": 2320,
        "type": "function"
    },
    "test.text.StringBuilderTest$deprecatedAppend$lambda.$sb": {
        "size": 49,
        "type": "field"
    },
    "test.text.StringBuilderTest$deprecatedAppend$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.<no name provided>": {
        "size": 296,
        "type": "class"
    },
    "test.text.<no name provided>.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.<no name provided>.toString()": {
        "size": 61,
        "type": "function"
    },
    "test.text.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.StringBuilderTest$capacityTest$lambda": {
        "size": 800,
        "type": "class"
    },
    "test.text.StringBuilderTest$capacityTest$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringBuilderTest$capacityTest$lambda.invoke()": {
        "size": 398,
        "type": "function"
    },
    "test.text.StringBuilderTest$capacityTest$lambda.<init>(StringBuilder)": {
        "size": 131,
        "type": "function"
    },
    "test.text.StringBuilderTest$capacityTest$lambda.$tmp1_let": {
        "size": 55,
        "type": "field"
    },
    "test.text.StringBuilderTest$overflow$lambda": {
        "size": 4736,
        "type": "class"
    },
    "test.text.StringBuilderTest$overflow$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringBuilderTest$overflow$lambda.invoke()": {
        "size": 4243,
        "type": "function"
    },
    "test.text.StringBuilderTest": {
        "size": 161765,
        "type": "class"
    },
    "test.text.StringBuilderTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.StringBuilderTest.stringBuild()": {
        "size": 910,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendMany()": {
        "size": 630,
        "type": "function"
    },
    "test.text.StringBuilderTest.append()": {
        "size": 853,
        "type": "function"
    },
    "test.text.StringBuilderTest.deprecatedAppend()": {
        "size": 566,
        "type": "function"
    },
    "test.text.StringBuilderTest.asCharSequence()": {
        "size": 1984,
        "type": "function"
    },
    "test.text.StringBuilderTest.constructors()": {
        "size": 3072,
        "type": "function"
    },
    "test.text.StringBuilderTest.clear()": {
        "size": 536,
        "type": "function"
    },
    "test.text.StringBuilderTest.get()": {
        "size": 5580,
        "type": "function"
    },
    "test.text.StringBuilderTest.reverse()": {
        "size": 1291,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendChar()": {
        "size": 1357,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendInt()": {
        "size": 3325,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendBoolean()": {
        "size": 650,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendString()": {
        "size": 2152,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendAny()": {
        "size": 995,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendCharArray()": {
        "size": 10849,
        "type": "function"
    },
    "test.text.StringBuilderTest.deleteChar()": {
        "size": 6014,
        "type": "function"
    },
    "test.text.StringBuilderTest.deleteSubstring()": {
        "size": 8465,
        "type": "function"
    },
    "test.text.StringBuilderTest.capacityTest()": {
        "size": 4821,
        "type": "function"
    },
    "test.text.StringBuilderTest.overflow()": {
        "size": 184,
        "type": "function"
    },
    "test.text.StringBuilderTest.indexOf()": {
        "size": 3120,
        "type": "function"
    },
    "test.text.StringBuilderTest.lastIndexOf()": {
        "size": 3403,
        "type": "function"
    },
    "test.text.StringBuilderTest.insertBoolean()": {
        "size": 6099,
        "type": "function"
    },
    "test.text.StringBuilderTest.insertChar()": {
        "size": 6158,
        "type": "function"
    },
    "test.text.StringBuilderTest.insertCharArray()": {
        "size": 20164,
        "type": "function"
    },
    "test.text.StringBuilderTest.insertCharSequence()": {
        "size": 11832,
        "type": "function"
    },
    "test.text.StringBuilderTest.insertAny()": {
        "size": 1017,
        "type": "function"
    },
    "test.text.StringBuilderTest.insertString()": {
        "size": 1735,
        "type": "function"
    },
    "test.text.StringBuilderTest.setLength()": {
        "size": 2908,
        "type": "function"
    },
    "test.text.StringBuilderTest.substring()": {
        "size": 8112,
        "type": "function"
    },
    "test.text.StringBuilderTest.trimToSize()": {
        "size": 945,
        "type": "function"
    },
    "test.text.StringBuilderTest.set()": {
        "size": 6238,
        "type": "function"
    },
    "test.text.StringBuilderTest.setRange()": {
        "size": 8563,
        "type": "function"
    },
    "test.text.StringBuilderTest.toCharArray()": {
        "size": 13941,
        "type": "function"
    },
    "test.text.StringBuilderTest.appendLine()": {
        "size": 5394,
        "type": "function"
    },
    "test.text.StringBuilderTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.StringBuilderTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.StringBuilderTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.kotlinxIOUnicodeTest$readHex()": {
        "size": 2646,
        "type": "function"
    },
    "test.text.StringEncodingTest": {
        "size": 87728,
        "type": "class"
    },
    "test.text.StringEncodingTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.StringEncodingTest.bytes(IntArray)": {
        "size": 1313,
        "type": "function"
    },
    "test.text.StringEncodingTest.testEncoding(Boolean, ByteArray, String)": {
        "size": 3723,
        "type": "function"
    },
    "test.text.StringEncodingTest.testEncoding(Boolean, ByteArray, String, Int, Int)": {
        "size": 3525,
        "type": "function"
    },
    "test.text.StringEncodingTest.string(IntArray)": {
        "size": 3564,
        "type": "function"
    },
    "test.text.StringEncodingTest.encodeToByteArray()": {
        "size": 6333,
        "type": "function"
    },
    "test.text.StringEncodingTest.encodeToByteArraySlice()": {
        "size": 23696,
        "type": "function"
    },
    "test.text.StringEncodingTest.testDecoding(Boolean, String, ByteArray)": {
        "size": 3704,
        "type": "function"
    },
    "test.text.StringEncodingTest.testDecoding(Boolean, String, ByteArray, Int, Int)": {
        "size": 3504,
        "type": "function"
    },
    "test.text.StringEncodingTest.truncatedSurrogateDecoding()": {
        "size": 569,
        "type": "function"
    },
    "test.text.StringEncodingTest.decodeToString()": {
        "size": 6026,
        "type": "function"
    },
    "test.text.StringEncodingTest.decodeToStringSlice()": {
        "size": 24282,
        "type": "function"
    },
    "test.text.StringEncodingTest.kotlinxIOUnicodeTest()": {
        "size": 3636,
        "type": "function"
    },
    "test.text.StringEncodingTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.StringEncodingTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.StringEncodingTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toByte$lambda": {
        "size": 1430,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toByte$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toByte$lambda.invoke(String)": {
        "size": 80,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toByte$lambda.invoke(P1)": {
        "size": 395,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toByte$lambda.invoke(ConversionContext<Byte>)": {
        "size": 664,
        "type": "function"
    },
    "test.text.toByte$ref": {
        "size": 879,
        "type": "class"
    },
    "test.text.toByte$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toByte$ref.invoke(String, Int)": {
        "size": 92,
        "type": "function"
    },
    "test.text.toByte$ref.invoke(P1, P2)": {
        "size": 505,
        "type": "function"
    },
    "test.text.toByte$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.text.toByteOrNull$ref": {
        "size": 873,
        "type": "class"
    },
    "test.text.toByteOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toByteOrNull$ref.invoke(String, Int)": {
        "size": 99,
        "type": "function"
    },
    "test.text.toByteOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toByteOrNull$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toByte$lambda.invoke(ConversionWithRadixContext<Byte>)": {
        "size": 773,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toShort$lambda": {
        "size": 1317,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toShort$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toShort$lambda.invoke(String)": {
        "size": 82,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toShort$lambda.invoke(P1)": {
        "size": 397,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toShort$lambda.invoke(ConversionContext<Short>)": {
        "size": 680,
        "type": "function"
    },
    "test.text.toShort$ref": {
        "size": 886,
        "type": "class"
    },
    "test.text.toShort$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toShort$ref.invoke(String, Int)": {
        "size": 94,
        "type": "function"
    },
    "test.text.toShort$ref.invoke(P1, P2)": {
        "size": 506,
        "type": "function"
    },
    "test.text.toShort$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.text.toShortOrNull$ref": {
        "size": 879,
        "type": "class"
    },
    "test.text.toShortOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toShortOrNull$ref.invoke(String, Int)": {
        "size": 101,
        "type": "function"
    },
    "test.text.toShortOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toShortOrNull$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toShort$lambda.invoke(ConversionWithRadixContext<Short>)": {
        "size": 642,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toInt$lambda": {
        "size": 2375,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toInt$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toInt$lambda.invoke(String)": {
        "size": 78,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toInt$lambda.invoke(P1)": {
        "size": 393,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toInt$lambda.invoke(ConversionContext<Int>)": {
        "size": 802,
        "type": "function"
    },
    "test.text.toInt$ref": {
        "size": 872,
        "type": "class"
    },
    "test.text.toInt$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toInt$ref.invoke(String, Int)": {
        "size": 90,
        "type": "function"
    },
    "test.text.toInt$ref.invoke(P1, P2)": {
        "size": 504,
        "type": "function"
    },
    "test.text.toInt$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.text.toIntOrNull$ref": {
        "size": 867,
        "type": "class"
    },
    "test.text.toIntOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toIntOrNull$ref.invoke(String, Int)": {
        "size": 97,
        "type": "function"
    },
    "test.text.toIntOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toIntOrNull$ref.<get-name>()": {
        "size": 62,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toInt$lambda.invoke(ConversionWithRadixContext<Int>)": {
        "size": 1704,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toLong$lambda": {
        "size": 2310,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toLong$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toLong$lambda.invoke(String)": {
        "size": 80,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toLong$lambda.invoke(P1)": {
        "size": 395,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toLong$lambda.invoke(ConversionContext<Long>)": {
        "size": 1096,
        "type": "function"
    },
    "test.text.toLong$ref": {
        "size": 879,
        "type": "class"
    },
    "test.text.toLong$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toLong$ref.invoke(String, Int)": {
        "size": 92,
        "type": "function"
    },
    "test.text.toLong$ref.invoke(P1, P2)": {
        "size": 505,
        "type": "function"
    },
    "test.text.toLong$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.text.toLongOrNull$ref": {
        "size": 873,
        "type": "class"
    },
    "test.text.toLongOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toLongOrNull$ref.invoke(String, Int)": {
        "size": 99,
        "type": "function"
    },
    "test.text.toLongOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toLongOrNull$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toLong$lambda.invoke(ConversionWithRadixContext<Long>)": {
        "size": 1633,
        "type": "function"
    },
    "test.text.toDouble$ref": {
        "size": 642,
        "type": "class"
    },
    "test.text.toDouble$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toDouble$ref.invoke(String)": {
        "size": 77,
        "type": "function"
    },
    "test.text.toDouble$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.text.toDouble$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.text.toDoubleOrNull$ref": {
        "size": 634,
        "type": "class"
    },
    "test.text.toDoubleOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toDoubleOrNull$ref.invoke(String)": {
        "size": 84,
        "type": "function"
    },
    "test.text.toDoubleOrNull$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.text.toDoubleOrNull$ref.<get-name>()": {
        "size": 65,
        "type": "function"
    },
    "test.text.doubleTotalOrderEquals$ref": {
        "size": 961,
        "type": "class"
    },
    "test.text.doubleTotalOrderEquals$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.doubleTotalOrderEquals$ref.invoke(Double?, Double?)": {
        "size": 117,
        "type": "function"
    },
    "test.text.doubleTotalOrderEquals$ref.invoke(P1, P2)": {
        "size": 514,
        "type": "function"
    },
    "test.text.doubleTotalOrderEquals$ref.<get-name>()": {
        "size": 73,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toDouble$lambda": {
        "size": 2609,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toDouble$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toDouble$lambda.invoke(ConversionContext<Double>)": {
        "size": 1928,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toDouble$lambda.invoke(P1)": {
        "size": 372,
        "type": "function"
    },
    "test.text.toFloat$ref": {
        "size": 635,
        "type": "class"
    },
    "test.text.toFloat$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toFloat$ref.invoke(String)": {
        "size": 75,
        "type": "function"
    },
    "test.text.toFloat$ref.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.text.toFloat$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.text.toFloatOrNull$ref": {
        "size": 628,
        "type": "class"
    },
    "test.text.toFloatOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toFloatOrNull$ref.invoke(String)": {
        "size": 82,
        "type": "function"
    },
    "test.text.toFloatOrNull$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.text.toFloatOrNull$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.text.floatTotalOrderEquals$ref": {
        "size": 948,
        "type": "class"
    },
    "test.text.floatTotalOrderEquals$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.floatTotalOrderEquals$ref.invoke(Float?, Float?)": {
        "size": 114,
        "type": "function"
    },
    "test.text.floatTotalOrderEquals$ref.invoke(P1, P2)": {
        "size": 510,
        "type": "function"
    },
    "test.text.floatTotalOrderEquals$ref.<get-name>()": {
        "size": 72,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toFloat$lambda": {
        "size": 2603,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toFloat$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toFloat$lambda.invoke(ConversionContext<Float>)": {
        "size": 1926,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toFloat$lambda.invoke(P1)": {
        "size": 370,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUByte$lambda": {
        "size": 2837,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toUByte$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUByte$lambda.invoke(String)": {
        "size": 82,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUByte$lambda.invoke(P1)": {
        "size": 397,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUByte$lambda.invoke(ConversionContext<UByte>)": {
        "size": 1165,
        "type": "function"
    },
    "test.text.toUByte$ref": {
        "size": 886,
        "type": "class"
    },
    "test.text.toUByte$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toUByte$ref.invoke(String, Int)": {
        "size": 94,
        "type": "function"
    },
    "test.text.toUByte$ref.invoke(P1, P2)": {
        "size": 506,
        "type": "function"
    },
    "test.text.toUByte$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.text.toUByteOrNull$ref": {
        "size": 879,
        "type": "class"
    },
    "test.text.toUByteOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toUByteOrNull$ref.invoke(String, Int)": {
        "size": 101,
        "type": "function"
    },
    "test.text.toUByteOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toUByteOrNull$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUByte$lambda.invoke(ConversionWithRadixContext<UByte>)": {
        "size": 2088,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUShort$lambda": {
        "size": 1526,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toUShort$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUShort$lambda.invoke(String)": {
        "size": 84,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUShort$lambda.invoke(P1)": {
        "size": 399,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUShort$lambda.invoke(ConversionContext<UShort>)": {
        "size": 701,
        "type": "function"
    },
    "test.text.toUShort$ref": {
        "size": 893,
        "type": "class"
    },
    "test.text.toUShort$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toUShort$ref.invoke(String, Int)": {
        "size": 96,
        "type": "function"
    },
    "test.text.toUShort$ref.invoke(P1, P2)": {
        "size": 507,
        "type": "function"
    },
    "test.text.toUShort$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.text.toUShortOrNull$ref": {
        "size": 885,
        "type": "class"
    },
    "test.text.toUShortOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toUShortOrNull$ref.invoke(String, Int)": {
        "size": 103,
        "type": "function"
    },
    "test.text.toUShortOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toUShortOrNull$ref.<get-name>()": {
        "size": 65,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUShort$lambda.invoke(ConversionWithRadixContext<UShort>)": {
        "size": 847,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUInt$lambda": {
        "size": 2436,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toUInt$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUInt$lambda.invoke(String)": {
        "size": 80,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUInt$lambda.invoke(P1)": {
        "size": 395,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUInt$lambda.invoke(ConversionContext<UInt>)": {
        "size": 767,
        "type": "function"
    },
    "test.text.toUInt$ref": {
        "size": 879,
        "type": "class"
    },
    "test.text.toUInt$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toUInt$ref.invoke(String, Int)": {
        "size": 92,
        "type": "function"
    },
    "test.text.toUInt$ref.invoke(P1, P2)": {
        "size": 505,
        "type": "function"
    },
    "test.text.toUInt$ref.<get-name>()": {
        "size": 57,
        "type": "function"
    },
    "test.text.toUIntOrNull$ref": {
        "size": 873,
        "type": "class"
    },
    "test.text.toUIntOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toUIntOrNull$ref.invoke(String, Int)": {
        "size": 99,
        "type": "function"
    },
    "test.text.toUIntOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toUIntOrNull$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toUInt$lambda.invoke(ConversionWithRadixContext<UInt>)": {
        "size": 1755,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toULong$lambda": {
        "size": 2712,
        "type": "class"
    },
    "test.text.StringNumberConversionTest$toULong$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toULong$lambda.invoke(String)": {
        "size": 82,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toULong$lambda.invoke(P1)": {
        "size": 397,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toULong$lambda.invoke(ConversionContext<ULong>)": {
        "size": 866,
        "type": "function"
    },
    "test.text.toULong$ref": {
        "size": 886,
        "type": "class"
    },
    "test.text.toULong$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toULong$ref.invoke(String, Int)": {
        "size": 94,
        "type": "function"
    },
    "test.text.toULong$ref.invoke(P1, P2)": {
        "size": 506,
        "type": "function"
    },
    "test.text.toULong$ref.<get-name>()": {
        "size": 58,
        "type": "function"
    },
    "test.text.toULongOrNull$ref": {
        "size": 879,
        "type": "class"
    },
    "test.text.toULongOrNull$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.toULongOrNull$ref.invoke(String, Int)": {
        "size": 101,
        "type": "function"
    },
    "test.text.toULongOrNull$ref.invoke(P1, P2)": {
        "size": 478,
        "type": "function"
    },
    "test.text.toULongOrNull$ref.<get-name>()": {
        "size": 64,
        "type": "function"
    },
    "test.text.StringNumberConversionTest$toULong$lambda.invoke(ConversionWithRadixContext<ULong>)": {
        "size": 2005,
        "type": "function"
    },
    "test.text.StringNumberConversionTest": {
        "size": 76942,
        "type": "class"
    },
    "test.text.StringNumberConversionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toBoolean()": {
        "size": 1244,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toByte()": {
        "size": 751,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toShort()": {
        "size": 760,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toInt()": {
        "size": 4767,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toLong()": {
        "size": 4778,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toDouble()": {
        "size": 416,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toFloat()": {
        "size": 410,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toUByte()": {
        "size": 760,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toUShort()": {
        "size": 769,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toUInt()": {
        "size": 4778,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toULong()": {
        "size": 4789,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.byteToStringWithRadix()": {
        "size": 4882,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.shortToStringWithRadix()": {
        "size": 4679,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.intToStringWithRadix()": {
        "size": 4526,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.longToStringWithRadix()": {
        "size": 12891,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.ubyteToStringWithRadix()": {
        "size": 6039,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.ushortToStringWithRadix()": {
        "size": 5508,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.uintToStringWithRadix()": {
        "size": 5036,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.ulongToStringWithRadix()": {
        "size": 5262,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.StringNumberConversionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.doubleTotalOrderEquals(Double?, Double?)": {
        "size": 116,
        "type": "function"
    },
    "test.text.floatTotalOrderEquals(Float?, Float?)": {
        "size": 113,
        "type": "function"
    },
    "test.text.compareConversion(Function1<String, T>, Function1<String, T?>, Function2<T, T?, Boolean>, @ExtensionFunctionType Function1<ConversionContext<T>, Unit>)": {
        "size": 392,
        "type": "function"
    },
    "test.text.compareConversion$default(Function1<String, T>, Function1<String, T?>, Function2<T, T?, Boolean>?, @ExtensionFunctionType Function1<ConversionContext<T>, Unit>, Int, Any?)": {
        "size": 686,
        "type": "function"
    },
    "test.text.compareConversionWithRadix(@ExtensionFunctionType Function2<String, Int, T>, @ExtensionFunctionType Function2<String, Int, T?>, @ExtensionFunctionType Function1<ConversionWithRadixContext<T>, Unit>)": {
        "size": 417,
        "type": "function"
    },
    "test.text.ConversionContext": {
        "size": 4802,
        "type": "class"
    },
    "test.text.ConversionContext.<init>(Function1<String, T>, Function1<String, T?>, Function2<T, T?, Boolean>)": {
        "size": 293,
        "type": "function"
    },
    "test.text.ConversionContext.convertOrFail": {
        "size": 66,
        "type": "field"
    },
    "test.text.ConversionContext.convertOrNull": {
        "size": 67,
        "type": "field"
    },
    "test.text.ConversionContext.equality": {
        "size": 66,
        "type": "field"
    },
    "test.text.ConversionContext.assertEquals(T, T?, String, String)": {
        "size": 623,
        "type": "function"
    },
    "test.text.ConversionContext.assertProduces(String, T)": {
        "size": 441,
        "type": "function"
    },
    "test.text.ConversionContext.assertFailsOrNull(String)": {
        "size": 2815,
        "type": "function"
    },
    "test.text.ConversionContext.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.ConversionContext.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.ConversionContext.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.ConversionWithRadixContext": {
        "size": 4396,
        "type": "class"
    },
    "test.text.ConversionWithRadixContext.<init>(Function2<String, Int, T>, Function2<String, Int, T?>)": {
        "size": 234,
        "type": "function"
    },
    "test.text.ConversionWithRadixContext.convertOrFail": {
        "size": 71,
        "type": "field"
    },
    "test.text.ConversionWithRadixContext.convertOrNull": {
        "size": 72,
        "type": "field"
    },
    "test.text.ConversionWithRadixContext.assertProduces(Int, String, T)": {
        "size": 600,
        "type": "function"
    },
    "test.text.ConversionWithRadixContext.assertFailsOrNull(Int, String)": {
        "size": 3005,
        "type": "function"
    },
    "test.text.ConversionWithRadixContext.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.ConversionWithRadixContext.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.ConversionWithRadixContext.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.compareConversion$lambda": {
        "size": 374,
        "type": "class"
    },
    "test.text.compareConversion$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.compareConversion$lambda.invoke(T, T?)": {
        "size": 85,
        "type": "function"
    },
    "test.text.compareConversion$lambda.invoke(P1, P2)": {
        "size": 122,
        "type": "function"
    },
    "test.text.<get-charSequenceBuilders>()": {
        "size": 145,
        "type": "function"
    },
    "test.text.charSequenceBuilders": {
        "size": 98,
        "type": "field"
    },
    "test.text.createString(String)": {
        "size": 106,
        "type": "function"
    },
    "test.text.createStringBuilder(String)": {
        "size": 149,
        "type": "function"
    },
    "test.text.withOneCharSequenceArg(Function1<Function1<String, CharSequence>, Unit>)": {
        "size": 551,
        "type": "function"
    },
    "test.text.withOneCharSequenceArg(String, Function1<CharSequence, Unit>)": {
        "size": 246,
        "type": "function"
    },
    "test.text.withTwoCharSequenceArgs(Function2<Function1<String, CharSequence>, Function1<String, CharSequence>, Unit>)": {
        "size": 1010,
        "type": "function"
    },
    "test.text.assertContentEquals(String, CharSequence, String?)": {
        "size": 214,
        "type": "function"
    },
    "test.text.assertContentEquals$default(String, CharSequence, String?, Int, Any?)": {
        "size": 418,
        "type": "function"
    },
    "test.text.isAsciiDigit()": {
        "size": 153,
        "type": "function"
    },
    "test.text.isAsciiLetter()": {
        "size": 259,
        "type": "function"
    },
    "test.text.isAsciiUpperCase()": {
        "size": 157,
        "type": "function"
    },
    "test.text.Case": {
        "size": 1762,
        "type": "class"
    },
    "test.text.Case.<init>(String?, Boolean, Boolean, Boolean)": {
        "size": 256,
        "type": "function"
    },
    "test.text.Case.<init>(String?, Boolean?, Boolean?, Boolean?, Int, DefaultConstructorMarker?)": {
        "size": 1077,
        "type": "function"
    },
    "test.text.Case.value": {
        "size": 45,
        "type": "field"
    },
    "test.text.Case.isNull": {
        "size": 46,
        "type": "field"
    },
    "test.text.Case.isEmpty": {
        "size": 47,
        "type": "field"
    },
    "test.text.Case.isBlank": {
        "size": 47,
        "type": "field"
    },
    "test.text.Case.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.Case.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.Case.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.invoke$startsWithCs(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean)": {
        "size": 353,
        "type": "function"
    },
    "test.text.invoke$startsWithCs$default(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean?, Int, Any?)": {
        "size": 596,
        "type": "function"
    },
    "test.text.invoke$endsWithCs(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean)": {
        "size": 349,
        "type": "function"
    },
    "test.text.invoke$endsWithCs$default(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean?, Int, Any?)": {
        "size": 592,
        "type": "function"
    },
    "test.text.invoke$startsWith(Function1<String, CharSequence>, Char, Boolean)": {
        "size": 246,
        "type": "function"
    },
    "test.text.invoke$startsWith$default(Function1<String, CharSequence>, Char, Boolean?, Int, Any?)": {
        "size": 529,
        "type": "function"
    },
    "test.text.invoke$endsWith(Function1<String, CharSequence>, Char, Boolean)": {
        "size": 242,
        "type": "function"
    },
    "test.text.invoke$endsWith$default(Function1<String, CharSequence>, Char, Boolean?, Int, Any?)": {
        "size": 525,
        "type": "function"
    },
    "test.text.invoke$commonPrefixWith(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean)": {
        "size": 359,
        "type": "function"
    },
    "test.text.invoke$commonPrefixWith$default(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean?, Int, Any?)": {
        "size": 600,
        "type": "function"
    },
    "test.text.invoke$commonSuffixWith(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean)": {
        "size": 359,
        "type": "function"
    },
    "test.text.invoke$commonSuffixWith$default(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean?, Int, Any?)": {
        "size": 600,
        "type": "function"
    },
    "test.text.invoke$reversedCs(Function1<String, CharSequence>)": {
        "size": 180,
        "type": "function"
    },
    "test.text.invoke$indices(Function1<String, CharSequence>)": {
        "size": 178,
        "type": "function"
    },
    "test.text.invoke$repeat(Function1<String, CharSequence>, Int)": {
        "size": 181,
        "type": "function"
    },
    "test.text.invoke$trimStartCS(Function1<String, CharSequence>)": {
        "size": 182,
        "type": "function"
    },
    "test.text.invoke$trimEndCS(Function1<String, CharSequence>)": {
        "size": 178,
        "type": "function"
    },
    "test.text.StringTest$trimStartAndEnd$lambda$lambda": {
        "size": 603,
        "type": "class"
    },
    "test.text.StringTest$trimStartAndEnd$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$trimStartAndEnd$lambda$lambda.invoke(Char)": {
        "size": 107,
        "type": "function"
    },
    "test.text.StringTest$trimStartAndEnd$lambda$lambda.invoke(P1)": {
        "size": 298,
        "type": "function"
    },
    "test.text.invoke$removePrefix(Function1<String, CharSequence>, Function1<String, CharSequence>, String)": {
        "size": 314,
        "type": "function"
    },
    "test.text.invoke$removeSuffix(Function1<String, CharSequence>, Function1<String, CharSequence>, String)": {
        "size": 314,
        "type": "function"
    },
    "test.text.invoke$removeSurrounding(Function1<String, CharSequence>, Function1<String, CharSequence>, String, String)": {
        "size": 416,
        "type": "function"
    },
    "test.text.invoke$unaryPlus(Function1<String, CharSequence>)": {
        "size": 177,
        "type": "function"
    },
    "test.text.invoke$contains(Function1<String, CharSequence>, Function1<String, CharSequence>, String)": {
        "size": 387,
        "type": "function"
    },
    "test.text.invoke$contains$0(Function1<String, CharSequence>, Char)": {
        "size": 289,
        "type": "function"
    },
    "test.text.StringTest$chunked$lambda$lambda": {
        "size": 746,
        "type": "class"
    },
    "test.text.StringTest$chunked$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$chunked$lambda$lambda.invoke(CharSequence)": {
        "size": 145,
        "type": "function"
    },
    "test.text.StringTest$chunked$lambda$lambda.invoke(P1)": {
        "size": 376,
        "type": "function"
    },
    "test.text.StringTest$chunked$lambda$lambda.invoke(CompareContext<Iterator<String>>)": {
        "size": 126,
        "type": "function"
    },
    "test.text.StringTest$windowed$lambda$lambda": {
        "size": 747,
        "type": "class"
    },
    "test.text.StringTest$windowed$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$windowed$lambda$lambda.invoke(CharSequence)": {
        "size": 145,
        "type": "function"
    },
    "test.text.StringTest$windowed$lambda$lambda.invoke(P1)": {
        "size": 376,
        "type": "function"
    },
    "test.text.StringTest$windowed$lambda$lambda.invoke(CompareContext<Iterator<String>>)": {
        "size": 126,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda$lambda": {
        "size": 629,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda$lambda.invoke(MatchResult)": {
        "size": 127,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda$lambda": {
        "size": 636,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda$lambda.invoke(MatchResult)": {
        "size": 127,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda$lambda": {
        "size": 634,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda$lambda.invoke(MatchResult)": {
        "size": 127,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda$lambda.invoke(P1)": {
        "size": 286,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda$lambda": {
        "size": 627,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda$lambda.invoke(MatchResult)": {
        "size": 99,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda$lambda.invoke(P1)": {
        "size": 307,
        "type": "function"
    },
    "test.text.invoke$contentEquals(Function1<String, CharSequence>, Function1<String, CharSequence>, String?)": {
        "size": 1232,
        "type": "function"
    },
    "test.text.invoke$contentEquals(Function1<String, CharSequence>, Function1<String, CharSequence>, String, Boolean)": {
        "size": 354,
        "type": "function"
    },
    "test.text.stringFromCharArrayOutOfBounds$test(CharArray)": {
        "size": 12450,
        "type": "function"
    },
    "test.text.capitalize$testCapitalize(String, String)": {
        "size": 1051,
        "type": "function"
    },
    "test.text.decapitalize$testDecapitalize(String, String)": {
        "size": 1057,
        "type": "function"
    },
    "test.text.compareToIgnoreCase$assertCompareResult(Int, String, String, Boolean)": {
        "size": 1496,
        "type": "function"
    },
    "test.text.compareToIgnoreCase$assertCompareResult$0(Int, Int, String, String)": {
        "size": 370,
        "type": "function"
    },
    "test.text.replace$testIgnoreCase(String)": {
        "size": 3353,
        "type": "function"
    },
    "test.text.StringTest$isEmptyAndBlank$lambda": {
        "size": 5243,
        "type": "class"
    },
    "test.text.StringTest$isEmptyAndBlank$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$isEmptyAndBlank$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 4429,
        "type": "function"
    },
    "test.text.StringTest$isEmptyAndBlank$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$regionMatchesForCharSequence$lambda": {
        "size": 2818,
        "type": "class"
    },
    "test.text.StringTest$regionMatchesForCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$regionMatchesForCharSequence$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 1858,
        "type": "function"
    },
    "test.text.StringTest$regionMatchesForCharSequence$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$startsWithStringForCharSequence$lambda": {
        "size": 3526,
        "type": "class"
    },
    "test.text.StringTest$startsWithStringForCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$startsWithStringForCharSequence$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 2509,
        "type": "function"
    },
    "test.text.StringTest$startsWithStringForCharSequence$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$endsWithStringForCharSequence$lambda": {
        "size": 2984,
        "type": "class"
    },
    "test.text.StringTest$endsWithStringForCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$endsWithStringForCharSequence$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 1989,
        "type": "function"
    },
    "test.text.StringTest$endsWithStringForCharSequence$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$startsWithChar$lambda": {
        "size": 1763,
        "type": "class"
    },
    "test.text.StringTest$startsWithChar$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$startsWithChar$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 1130,
        "type": "function"
    },
    "test.text.StringTest$startsWithChar$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$endsWithChar$lambda": {
        "size": 1751,
        "type": "class"
    },
    "test.text.StringTest$endsWithChar$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$endsWithChar$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 1120,
        "type": "function"
    },
    "test.text.StringTest$endsWithChar$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$commonPrefix$lambda": {
        "size": 3628,
        "type": "class"
    },
    "test.text.StringTest$commonPrefix$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$commonPrefix$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 2636,
        "type": "function"
    },
    "test.text.StringTest$commonPrefix$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$commonSuffix$lambda": {
        "size": 3647,
        "type": "class"
    },
    "test.text.StringTest$commonSuffix$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$commonSuffix$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 2655,
        "type": "function"
    },
    "test.text.StringTest$commonSuffix$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$sliceCharSequence$lambda": {
        "size": 1676,
        "type": "class"
    },
    "test.text.StringTest$sliceCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$sliceCharSequence$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 1046,
        "type": "function"
    },
    "test.text.StringTest$sliceCharSequence$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reverseCharSequence$lambda": {
        "size": 1204,
        "type": "class"
    },
    "test.text.StringTest$reverseCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reverseCharSequence$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 590,
        "type": "function"
    },
    "test.text.StringTest$reverseCharSequence$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$indices$lambda": {
        "size": 1239,
        "type": "class"
    },
    "test.text.StringTest$indices$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indices$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$indices$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$replaceRange$lambda": {
        "size": 4853,
        "type": "class"
    },
    "test.text.StringTest$replaceRange$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$replaceRange$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 3761,
        "type": "function"
    },
    "test.text.StringTest$replaceRange$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$removeRange$lambda": {
        "size": 2511,
        "type": "class"
    },
    "test.text.StringTest$removeRange$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$removeRange$lambda.invoke(CharSequence)": {
        "size": 1897,
        "type": "function"
    },
    "test.text.StringTest$removeRange$lambda.invoke(P1)": {
        "size": 328,
        "type": "function"
    },
    "test.text.StringTest$repeat$lambda": {
        "size": 3250,
        "type": "class"
    },
    "test.text.StringTest$repeat$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$repeat$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 2541,
        "type": "function"
    },
    "test.text.StringTest$repeat$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$stringIterator$lambda": {
        "size": 1396,
        "type": "class"
    },
    "test.text.StringTest$stringIterator$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$stringIterator$lambda.invoke(CharSequence)": {
        "size": 824,
        "type": "function"
    },
    "test.text.StringTest$stringIterator$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$trimStart$lambda": {
        "size": 4549,
        "type": "class"
    },
    "test.text.StringTest$trimStart$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$trimStart$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 3801,
        "type": "function"
    },
    "test.text.StringTest$trimStart$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$trimEnd$lambda": {
        "size": 4488,
        "type": "class"
    },
    "test.text.StringTest$trimEnd$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$trimEnd$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 3744,
        "type": "function"
    },
    "test.text.StringTest$trimEnd$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$trimStartAndEnd$lambda": {
        "size": 14060,
        "type": "class"
    },
    "test.text.StringTest$trimStartAndEnd$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$trimStartAndEnd$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 12884,
        "type": "function"
    },
    "test.text.StringTest$trimStartAndEnd$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$padStart$lambda": {
        "size": 3230,
        "type": "class"
    },
    "test.text.StringTest$padStart$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$padStart$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 2523,
        "type": "function"
    },
    "test.text.StringTest$padStart$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$padEnd$lambda": {
        "size": 3218,
        "type": "class"
    },
    "test.text.StringTest$padEnd$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$padEnd$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 2513,
        "type": "function"
    },
    "test.text.StringTest$padEnd$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$removePrefix$lambda": {
        "size": 1185,
        "type": "class"
    },
    "test.text.StringTest$removePrefix$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$removePrefix$lambda.invoke(CharSequence)": {
        "size": 639,
        "type": "function"
    },
    "test.text.StringTest$removePrefix$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$removeSuffix$lambda": {
        "size": 1185,
        "type": "class"
    },
    "test.text.StringTest$removeSuffix$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$removeSuffix$lambda.invoke(CharSequence)": {
        "size": 639,
        "type": "function"
    },
    "test.text.StringTest$removeSuffix$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$removeSurrounding$lambda": {
        "size": 2028,
        "type": "class"
    },
    "test.text.StringTest$removeSurrounding$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$removeSurrounding$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 1414,
        "type": "function"
    },
    "test.text.StringTest$removeSurrounding$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$removePrefixCharSequence$lambda": {
        "size": 1820,
        "type": "class"
    },
    "test.text.StringTest$removePrefixCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$removePrefixCharSequence$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 884,
        "type": "function"
    },
    "test.text.StringTest$removePrefixCharSequence$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$removeSuffixCharSequence$lambda": {
        "size": 1820,
        "type": "class"
    },
    "test.text.StringTest$removeSuffixCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$removeSuffixCharSequence$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 884,
        "type": "function"
    },
    "test.text.StringTest$removeSuffixCharSequence$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$removeSurroundingCharSequence$lambda": {
        "size": 2340,
        "type": "class"
    },
    "test.text.StringTest$removeSurroundingCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$removeSurroundingCharSequence$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 1397,
        "type": "function"
    },
    "test.text.StringTest$removeSurroundingCharSequence$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$split$lambda": {
        "size": 5613,
        "type": "class"
    },
    "test.text.StringTest$split$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$split$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 4857,
        "type": "function"
    },
    "test.text.StringTest$split$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$splitSingleDelimiter$lambda": {
        "size": 6094,
        "type": "class"
    },
    "test.text.StringTest$splitSingleDelimiter$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$splitSingleDelimiter$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 5341,
        "type": "function"
    },
    "test.text.StringTest$splitSingleDelimiter$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$splitToLines$lambda": {
        "size": 1335,
        "type": "class"
    },
    "test.text.StringTest$splitToLines$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$splitToLines$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 734,
        "type": "function"
    },
    "test.text.StringTest$splitToLines$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$splitIllegalLimit$lambda": {
        "size": 17957,
        "type": "class"
    },
    "test.text.StringTest$splitIllegalLimit$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$splitIllegalLimit$lambda.invoke(CharSequence)": {
        "size": 16644,
        "type": "function"
    },
    "test.text.StringTest$splitIllegalLimit$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyChar$lambda": {
        "size": 3201,
        "type": "class"
    },
    "test.text.StringTest$indexOfAnyChar$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyChar$lambda.invoke(CharSequence)": {
        "size": 2569,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyChar$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyCharIgnoreCase$lambda": {
        "size": 2427,
        "type": "class"
    },
    "test.text.StringTest$indexOfAnyCharIgnoreCase$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyCharIgnoreCase$lambda.invoke(CharSequence)": {
        "size": 1831,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyCharIgnoreCase$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyString$lambda": {
        "size": 4298,
        "type": "class"
    },
    "test.text.StringTest$indexOfAnyString$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyString$lambda.invoke(CharSequence)": {
        "size": 3638,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyString$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyStringIgnoreCase$lambda": {
        "size": 2425,
        "type": "class"
    },
    "test.text.StringTest$indexOfAnyStringIgnoreCase$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyStringIgnoreCase$lambda.invoke(CharSequence)": {
        "size": 1835,
        "type": "function"
    },
    "test.text.StringTest$indexOfAnyStringIgnoreCase$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$findAnyOfStrings$lambda": {
        "size": 4309,
        "type": "class"
    },
    "test.text.StringTest$findAnyOfStrings$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$findAnyOfStrings$lambda.invoke(CharSequence)": {
        "size": 3649,
        "type": "function"
    },
    "test.text.StringTest$findAnyOfStrings$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$findAnyOfStringsIgnoreCase$lambda": {
        "size": 2633,
        "type": "class"
    },
    "test.text.StringTest$findAnyOfStringsIgnoreCase$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$findAnyOfStringsIgnoreCase$lambda.invoke(CharSequence)": {
        "size": 2043,
        "type": "function"
    },
    "test.text.StringTest$findAnyOfStringsIgnoreCase$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfChar$lambda": {
        "size": 4647,
        "type": "class"
    },
    "test.text.StringTest$indexOfChar$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfChar$lambda.invoke(CharSequence)": {
        "size": 3956,
        "type": "function"
    },
    "test.text.StringTest$indexOfChar$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfCharIgnoreCase$lambda": {
        "size": 3978,
        "type": "class"
    },
    "test.text.StringTest$indexOfCharIgnoreCase$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfCharIgnoreCase$lambda.invoke(CharSequence)": {
        "size": 3317,
        "type": "function"
    },
    "test.text.StringTest$indexOfCharIgnoreCase$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfString$lambda": {
        "size": 2607,
        "type": "class"
    },
    "test.text.StringTest$indexOfString$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfString$lambda.invoke(CharSequence)": {
        "size": 1986,
        "type": "function"
    },
    "test.text.StringTest$indexOfString$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$indexOfStringIgnoreCase$lambda": {
        "size": 2439,
        "type": "class"
    },
    "test.text.StringTest$indexOfStringIgnoreCase$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfStringIgnoreCase$lambda.invoke(CharSequence)": {
        "size": 1824,
        "type": "function"
    },
    "test.text.StringTest$indexOfStringIgnoreCase$lambda.invoke(P1)": {
        "size": 333,
        "type": "function"
    },
    "test.text.StringTest$contains$lambda": {
        "size": 2549,
        "type": "class"
    },
    "test.text.StringTest$contains$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$contains$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 1595,
        "type": "function"
    },
    "test.text.StringTest$contains$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$count$lambda": {
        "size": 1990,
        "type": "class"
    },
    "test.text.StringTest$count$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$count$lambda.invoke(CharSequence)": {
        "size": 1389,
        "type": "function"
    },
    "test.text.StringTest$count$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$testSplitByChar$lambda": {
        "size": 3753,
        "type": "class"
    },
    "test.text.StringTest$testSplitByChar$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testSplitByChar$lambda.invoke(CharSequence)": {
        "size": 3057,
        "type": "function"
    },
    "test.text.StringTest$testSplitByChar$lambda.invoke(P1)": {
        "size": 328,
        "type": "function"
    },
    "test.text.StringTest$forEach$lambda": {
        "size": 2028,
        "type": "class"
    },
    "test.text.StringTest$forEach$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$forEach$lambda.invoke(CharSequence)": {
        "size": 1429,
        "type": "function"
    },
    "test.text.StringTest$forEach$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$onEach$lambda": {
        "size": 4779,
        "type": "class"
    },
    "test.text.StringTest$onEach$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$onEach$lambda.invoke(CharSequence)": {
        "size": 4029,
        "type": "function"
    },
    "test.text.StringTest$onEach$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$onEachIndexed$lambda": {
        "size": 7225,
        "type": "class"
    },
    "test.text.StringTest$onEachIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$onEachIndexed$lambda.invoke(CharSequence)": {
        "size": 6362,
        "type": "function"
    },
    "test.text.StringTest$onEachIndexed$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$filterCharSequence$lambda": {
        "size": 4280,
        "type": "class"
    },
    "test.text.StringTest$filterCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$filterCharSequence$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 3493,
        "type": "function"
    },
    "test.text.StringTest$filterCharSequence$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$filterNotCharSequence$lambda": {
        "size": 3724,
        "type": "class"
    },
    "test.text.StringTest$filterNotCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$filterNotCharSequence$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 2970,
        "type": "function"
    },
    "test.text.StringTest$filterNotCharSequence$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$filterIndexedCharSequence$lambda": {
        "size": 3075,
        "type": "class"
    },
    "test.text.StringTest$filterIndexedCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$filterIndexedCharSequence$lambda.invoke(CharSequence)": {
        "size": 2412,
        "type": "function"
    },
    "test.text.StringTest$filterIndexedCharSequence$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$all$lambda": {
        "size": 3331,
        "type": "class"
    },
    "test.text.StringTest$all$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$all$lambda.invoke(CharSequence)": {
        "size": 2656,
        "type": "function"
    },
    "test.text.StringTest$all$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$any$lambda": {
        "size": 3276,
        "type": "class"
    },
    "test.text.StringTest$any$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$any$lambda.invoke(CharSequence)": {
        "size": 2601,
        "type": "function"
    },
    "test.text.StringTest$any$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$find$lambda": {
        "size": 2550,
        "type": "class"
    },
    "test.text.StringTest$find$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$find$lambda.invoke(CharSequence)": {
        "size": 1926,
        "type": "function"
    },
    "test.text.StringTest$find$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$findNot$lambda": {
        "size": 3342,
        "type": "class"
    },
    "test.text.StringTest$findNot$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$findNot$lambda.invoke(CharSequence)": {
        "size": 2673,
        "type": "function"
    },
    "test.text.StringTest$findNot$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$random$lambda": {
        "size": 13152,
        "type": "class"
    },
    "test.text.StringTest$random$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$random$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 11999,
        "type": "function"
    },
    "test.text.StringTest$random$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$randomOrNull$lambda": {
        "size": 10913,
        "type": "class"
    },
    "test.text.StringTest$randomOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$randomOrNull$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 9850,
        "type": "function"
    },
    "test.text.StringTest$randomOrNull$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$partitionCharSequence$lambda": {
        "size": 2073,
        "type": "class"
    },
    "test.text.StringTest$partitionCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$partitionCharSequence$lambda.invoke(CharSequence)": {
        "size": 1466,
        "type": "function"
    },
    "test.text.StringTest$partitionCharSequence$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$zipWithNext$lambda": {
        "size": 6732,
        "type": "class"
    },
    "test.text.StringTest$zipWithNext$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$zipWithNext$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 5842,
        "type": "function"
    },
    "test.text.StringTest$zipWithNext$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$zipWithNextPairs$lambda": {
        "size": 1575,
        "type": "class"
    },
    "test.text.StringTest$zipWithNextPairs$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$zipWithNextPairs$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 956,
        "type": "function"
    },
    "test.text.StringTest$zipWithNextPairs$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$chunked$lambda": {
        "size": 7777,
        "type": "class"
    },
    "test.text.StringTest$chunked$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$chunked$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 6845,
        "type": "function"
    },
    "test.text.StringTest$chunked$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$windowed$lambda": {
        "size": 24888,
        "type": "class"
    },
    "test.text.StringTest$windowed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$windowed$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 23245,
        "type": "function"
    },
    "test.text.StringTest$windowed$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$map$lambda": {
        "size": 7111,
        "type": "class"
    },
    "test.text.StringTest$map$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$map$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 6215,
        "type": "function"
    },
    "test.text.StringTest$map$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$mapTo$lambda": {
        "size": 7042,
        "type": "class"
    },
    "test.text.StringTest$mapTo$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$mapTo$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 6144,
        "type": "function"
    },
    "test.text.StringTest$mapTo$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$flatMap$lambda": {
        "size": 2055,
        "type": "class"
    },
    "test.text.StringTest$flatMap$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$flatMap$lambda.invoke(CharSequence)": {
        "size": 1458,
        "type": "function"
    },
    "test.text.StringTest$flatMap$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$flatMapIndexed$lambda": {
        "size": 2658,
        "type": "class"
    },
    "test.text.StringTest$flatMapIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$flatMapIndexed$lambda.invoke(CharSequence)": {
        "size": 2026,
        "type": "function"
    },
    "test.text.StringTest$flatMapIndexed$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$fold$lambda": {
        "size": 4465,
        "type": "class"
    },
    "test.text.StringTest$fold$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$fold$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 3682,
        "type": "function"
    },
    "test.text.StringTest$fold$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$foldRight$lambda": {
        "size": 4195,
        "type": "class"
    },
    "test.text.StringTest$foldRight$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$foldRight$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 3419,
        "type": "function"
    },
    "test.text.StringTest$foldRight$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reduceIndexed$lambda": {
        "size": 12152,
        "type": "class"
    },
    "test.text.StringTest$reduceIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reduceIndexed$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 11064,
        "type": "function"
    },
    "test.text.StringTest$reduceIndexed$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reduceIndexedOrNull$lambda": {
        "size": 9710,
        "type": "class"
    },
    "test.text.StringTest$reduceIndexedOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reduceIndexedOrNull$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 8682,
        "type": "function"
    },
    "test.text.StringTest$reduceIndexedOrNull$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reduceRightIndexed$lambda": {
        "size": 10452,
        "type": "class"
    },
    "test.text.StringTest$reduceRightIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reduceRightIndexed$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 9425,
        "type": "function"
    },
    "test.text.StringTest$reduceRightIndexed$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reduceRightIndexedOrNull$lambda": {
        "size": 8158,
        "type": "class"
    },
    "test.text.StringTest$reduceRightIndexedOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reduceRightIndexedOrNull$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 7191,
        "type": "function"
    },
    "test.text.StringTest$reduceRightIndexedOrNull$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reduce$lambda": {
        "size": 7827,
        "type": "class"
    },
    "test.text.StringTest$reduce$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reduce$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 6934,
        "type": "function"
    },
    "test.text.StringTest$reduce$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reduceRight$lambda": {
        "size": 6584,
        "type": "class"
    },
    "test.text.StringTest$reduceRight$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reduceRight$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 5738,
        "type": "function"
    },
    "test.text.StringTest$reduceRight$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$reduceOrNull$lambda": {
        "size": 5420,
        "type": "class"
    },
    "test.text.StringTest$reduceOrNull$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$reduceOrNull$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 4587,
        "type": "function"
    },
    "test.text.StringTest$reduceOrNull$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$scan$lambda": {
        "size": 7100,
        "type": "class"
    },
    "test.text.StringTest$scan$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$scan$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 6211,
        "type": "function"
    },
    "test.text.StringTest$scan$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$scanIndexed$lambda": {
        "size": 8981,
        "type": "class"
    },
    "test.text.StringTest$scanIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$scanIndexed$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 8005,
        "type": "function"
    },
    "test.text.StringTest$scanIndexed$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$runningReduce$lambda": {
        "size": 11409,
        "type": "class"
    },
    "test.text.StringTest$runningReduce$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$runningReduce$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 10319,
        "type": "function"
    },
    "test.text.StringTest$runningReduce$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$runningReduceIndexed$lambda": {
        "size": 13399,
        "type": "class"
    },
    "test.text.StringTest$runningReduceIndexed$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$runningReduceIndexed$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 12230,
        "type": "function"
    },
    "test.text.StringTest$runningReduceIndexed$lambda.invoke(P1)": {
        "size": 369,
        "type": "function"
    },
    "test.text.StringTest$groupBy$lambda": {
        "size": 3875,
        "type": "class"
    },
    "test.text.StringTest$groupBy$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$groupBy$lambda.invoke(CharSequence)": {
        "size": 3228,
        "type": "function"
    },
    "test.text.StringTest$groupBy$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$associateWith$lambda": {
        "size": 4364,
        "type": "class"
    },
    "test.text.StringTest$associateWith$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$associateWith$lambda.invoke(CharSequence)": {
        "size": 3685,
        "type": "function"
    },
    "test.text.StringTest$associateWith$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$joinToString$lambda": {
        "size": 543,
        "type": "class"
    },
    "test.text.StringTest$joinToString$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$joinToString$lambda.invoke(Char)": {
        "size": 82,
        "type": "function"
    },
    "test.text.StringTest$joinToString$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.text.StringTest$dropWhileCharSequence$lambda": {
        "size": 4582,
        "type": "class"
    },
    "test.text.StringTest$dropWhileCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$dropWhileCharSequence$lambda.invoke(CharSequence)": {
        "size": 3823,
        "type": "function"
    },
    "test.text.StringTest$dropWhileCharSequence$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$dropCharSequence$lambda": {
        "size": 2367,
        "type": "class"
    },
    "test.text.StringTest$dropCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$dropCharSequence$lambda.invoke(CharSequence)": {
        "size": 1739,
        "type": "function"
    },
    "test.text.StringTest$dropCharSequence$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$takeWhileCharSequence$lambda": {
        "size": 4772,
        "type": "class"
    },
    "test.text.StringTest$takeWhileCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$takeWhileCharSequence$lambda.invoke(CharSequence)": {
        "size": 4001,
        "type": "function"
    },
    "test.text.StringTest$takeWhileCharSequence$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$takeCharSequence$lambda": {
        "size": 2386,
        "type": "class"
    },
    "test.text.StringTest$takeCharSequence$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$takeCharSequence$lambda.invoke(CharSequence)": {
        "size": 1758,
        "type": "function"
    },
    "test.text.StringTest$takeCharSequence$lambda.invoke(P1)": {
        "size": 331,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda": {
        "size": 1362,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda.invoke(CharSequence)": {
        "size": 780,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosure$lambda.invoke(P1)": {
        "size": 328,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda": {
        "size": 1372,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda.invoke(CharSequence)": {
        "size": 783,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtStart$lambda.invoke(P1)": {
        "size": 328,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda": {
        "size": 1369,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda.invoke(CharSequence)": {
        "size": 782,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureAtEnd$lambda.invoke(P1)": {
        "size": 328,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda": {
        "size": 1360,
        "type": "class"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda.invoke(CharSequence)": {
        "size": 773,
        "type": "function"
    },
    "test.text.StringTest$testReplaceAllClosureEmpty$lambda.invoke(P1)": {
        "size": 328,
        "type": "function"
    },
    "test.text.StringTest$contentEquals$lambda": {
        "size": 2813,
        "type": "class"
    },
    "test.text.StringTest$contentEquals$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$contentEquals$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 1846,
        "type": "function"
    },
    "test.text.StringTest$contentEquals$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$contentEqualsIgnoreCase$lambda": {
        "size": 2863,
        "type": "class"
    },
    "test.text.StringTest$contentEqualsIgnoreCase$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$contentEqualsIgnoreCase$lambda.invoke(Function1<String, CharSequence>, Function1<String, CharSequence>)": {
        "size": 1886,
        "type": "function"
    },
    "test.text.StringTest$contentEqualsIgnoreCase$lambda.invoke(P1, P2)": {
        "size": 637,
        "type": "function"
    },
    "test.text.StringTest$indexOfRespectsCharBoundary$lambda": {
        "size": 1617,
        "type": "class"
    },
    "test.text.StringTest$indexOfRespectsCharBoundary$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.StringTest$indexOfRespectsCharBoundary$lambda.invoke(CharSequence)": {
        "size": 1031,
        "type": "function"
    },
    "test.text.StringTest$indexOfRespectsCharBoundary$lambda.invoke(P1)": {
        "size": 332,
        "type": "function"
    },
    "test.text.StringTest": {
        "size": 139124,
        "type": "class"
    },
    "test.text.StringTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.text.StringTest.testStringFromChars(String, CharArray, Int, Int)": {
        "size": 559,
        "type": "function"
    },
    "test.text.StringTest.testStringFromChars(String, CharArray)": {
        "size": 421,
        "type": "function"
    },
    "test.text.StringTest.stringFromCharArrayFullSlice()": {
        "size": 285,
        "type": "function"
    },
    "test.text.StringTest.stringFromCharArraySlice()": {
        "size": 3703,
        "type": "function"
    },
    "test.text.StringTest.stringFromCharArray()": {
        "size": 3578,
        "type": "function"
    },
    "test.text.StringTest.stringFromCharArrayUnicodeSurrogatePairs()": {
        "size": 463,
        "type": "function"
    },
    "test.text.StringTest.stringFromCharArrayOutOfBounds()": {
        "size": 2263,
        "type": "function"
    },
    "test.text.StringTest.toCharArray()": {
        "size": 8792,
        "type": "function"
    },
    "test.text.StringTest.isEmptyAndBlank()": {
        "size": 154,
        "type": "function"
    },
    "test.text.StringTest.orEmpty()": {
        "size": 856,
        "type": "function"
    },
    "test.text.StringTest.regionMatchesForCharSequence()": {
        "size": 181,
        "type": "function"
    },
    "test.text.StringTest.regionMatchesForString()": {
        "size": 1226,
        "type": "function"
    },
    "test.text.StringTest.startsWithString()": {
        "size": 2037,
        "type": "function"
    },
    "test.text.StringTest.startsWithStringForCharSequence()": {
        "size": 187,
        "type": "function"
    },
    "test.text.StringTest.endsWithString()": {
        "size": 1589,
        "type": "function"
    },
    "test.text.StringTest.endsWithStringForCharSequence()": {
        "size": 183,
        "type": "function"
    },
    "test.text.StringTest.startsWithChar()": {
        "size": 152,
        "type": "function"
    },
    "test.text.StringTest.endsWithChar()": {
        "size": 148,
        "type": "function"
    },
    "test.text.StringTest.commonPrefix()": {
        "size": 149,
        "type": "function"
    },
    "test.text.StringTest.commonSuffix()": {
        "size": 149,
        "type": "function"
    },
    "test.text.StringTest.capitalize()": {
        "size": 296,
        "type": "function"
    },
    "test.text.StringTest.decapitalize()": {
        "size": 380,
        "type": "function"
    },
    "test.text.StringTest.slice()": {
        "size": 1135,
        "type": "function"
    },
    "test.text.StringTest.sliceCharSequence()": {
        "size": 158,
        "type": "function"
    },
    "test.text.StringTest.reverse()": {
        "size": 911,
        "type": "function"
    },
    "test.text.StringTest.reverseCharSequence()": {
        "size": 162,
        "type": "function"
    },
    "test.text.StringTest.indices()": {
        "size": 138,
        "type": "function"
    },
    "test.text.StringTest.replaceRange()": {
        "size": 149,
        "type": "function"
    },
    "test.text.StringTest.removeRange()": {
        "size": 168,
        "type": "function"
    },
    "test.text.StringTest.substringDelimited()": {
        "size": 3500,
        "type": "function"
    },
    "test.text.StringTest.replaceDelimited()": {
        "size": 4120,
        "type": "function"
    },
    "test.text.StringTest.repeat()": {
        "size": 136,
        "type": "function"
    },
    "test.text.StringTest.stringIterator()": {
        "size": 166,
        "type": "function"
    },
    "test.text.StringTest.trimStart()": {
        "size": 142,
        "type": "function"
    },
    "test.text.StringTest.trimEnd()": {
        "size": 138,
        "type": "function"
    },
    "test.text.StringTest.trimStartAndEnd()": {
        "size": 154,
        "type": "function"
    },
    "test.text.StringTest.padStart()": {
        "size": 140,
        "type": "function"
    },
    "test.text.StringTest.padEnd()": {
        "size": 136,
        "type": "function"
    },
    "test.text.StringTest.removePrefix()": {
        "size": 162,
        "type": "function"
    },
    "test.text.StringTest.removeSuffix()": {
        "size": 162,
        "type": "function"
    },
    "test.text.StringTest.removeSurrounding()": {
        "size": 158,
        "type": "function"
    },
    "test.text.StringTest.removePrefixCharSequence()": {
        "size": 173,
        "type": "function"
    },
    "test.text.StringTest.removeSuffixCharSequence()": {
        "size": 173,
        "type": "function"
    },
    "test.text.StringTest.removeSurroundingCharSequence()": {
        "size": 183,
        "type": "function"
    },
    "test.text.StringTest.split()": {
        "size": 134,
        "type": "function"
    },
    "test.text.StringTest.splitSingleDelimiter()": {
        "size": 164,
        "type": "function"
    },
    "test.text.StringTest.splitToLines()": {
        "size": 148,
        "type": "function"
    },
    "test.text.StringTest.splitIllegalLimit()": {
        "size": 180,
        "type": "function"
    },
    "test.text.StringTest.indexOfAnyChar()": {
        "size": 174,
        "type": "function"
    },
    "test.text.StringTest.indexOfAnyCharIgnoreCase()": {
        "size": 194,
        "type": "function"
    },
    "test.text.StringTest.indexOfAnyString()": {
        "size": 178,
        "type": "function"
    },
    "test.text.StringTest.indexOfAnyStringIgnoreCase()": {
        "size": 198,
        "type": "function"
    },
    "test.text.StringTest.findAnyOfStrings()": {
        "size": 178,
        "type": "function"
    },
    "test.text.StringTest.findAnyOfStringsIgnoreCase()": {
        "size": 198,
        "type": "function"
    },
    "test.text.StringTest.indexOfChar()": {
        "size": 163,
        "type": "function"
    },
    "test.text.StringTest.indexOfCharIgnoreCase()": {
        "size": 183,
        "type": "function"
    },
    "test.text.StringTest.indexOfString()": {
        "size": 167,
        "type": "function"
    },
    "test.text.StringTest.indexOfStringIgnoreCase()": {
        "size": 187,
        "type": "function"
    },
    "test.text.StringTest.contains()": {
        "size": 141,
        "type": "function"
    },
    "test.text.StringTest.equalsIgnoreCase()": {
        "size": 1123,
        "type": "function"
    },
    "test.text.StringTest.compareToIgnoreCase()": {
        "size": 7112,
        "type": "function"
    },
    "test.text.StringTest.compareToUnicode()": {
        "size": 2990,
        "type": "function"
    },
    "test.text.StringTest.orderUnicodeLongString()": {
        "size": 11736,
        "type": "function"
    },
    "test.text.StringTest.orderIgnoringCase()": {
        "size": 615,
        "type": "function"
    },
    "test.text.StringTest.replace()": {
        "size": 3734,
        "type": "function"
    },
    "test.text.StringTest.replaceFirst()": {
        "size": 1735,
        "type": "function"
    },
    "test.text.StringTest.count()": {
        "size": 166,
        "type": "function"
    },
    "test.text.StringTest.testSplitByChar()": {
        "size": 180,
        "type": "function"
    },
    "test.text.StringTest.forEach()": {
        "size": 157,
        "type": "function"
    },
    "test.text.StringTest.onEach()": {
        "size": 151,
        "type": "function"
    },
    "test.text.StringTest.onEachIndexed()": {
        "size": 165,
        "type": "function"
    },
    "test.text.StringTest.filter()": {
        "size": 3459,
        "type": "function"
    },
    "test.text.StringTest.filterCharSequence()": {
        "size": 160,
        "type": "function"
    },
    "test.text.StringTest.filterNot()": {
        "size": 2606,
        "type": "function"
    },
    "test.text.StringTest.filterNotCharSequence()": {
        "size": 166,
        "type": "function"
    },
    "test.text.StringTest.filterIndexed()": {
        "size": 2431,
        "type": "function"
    },
    "test.text.StringTest.filterIndexedCharSequence()": {
        "size": 191,
        "type": "function"
    },
    "test.text.StringTest.all()": {
        "size": 145,
        "type": "function"
    },
    "test.text.StringTest.any()": {
        "size": 145,
        "type": "function"
    },
    "test.text.StringTest.find()": {
        "size": 149,
        "type": "function"
    },
    "test.text.StringTest.findNot()": {
        "size": 155,
        "type": "function"
    },
    "test.text.StringTest.random()": {
        "size": 136,
        "type": "function"
    },
    "test.text.StringTest.randomOrNull()": {
        "size": 148,
        "type": "function"
    },
    "test.text.StringTest.partition()": {
        "size": 1471,
        "type": "function"
    },
    "test.text.StringTest.partitionCharSequence()": {
        "size": 183,
        "type": "function"
    },
    "test.text.StringTest.zipWithNext()": {
        "size": 146,
        "type": "function"
    },
    "test.text.StringTest.zipWithNextPairs()": {
        "size": 156,
        "type": "function"
    },
    "test.text.StringTest.chunked()": {
        "size": 138,
        "type": "function"
    },
    "test.text.StringTest.windowed()": {
        "size": 140,
        "type": "function"
    },
    "test.text.StringTest.map()": {
        "size": 130,
        "type": "function"
    },
    "test.text.StringTest.mapTo()": {
        "size": 134,
        "type": "function"
    },
    "test.text.StringTest.flatMap()": {
        "size": 153,
        "type": "function"
    },
    "test.text.StringTest.flatMapIndexed()": {
        "size": 167,
        "type": "function"
    },
    "test.text.StringTest.fold()": {
        "size": 132,
        "type": "function"
    },
    "test.text.StringTest.foldRight()": {
        "size": 142,
        "type": "function"
    },
    "test.text.StringTest.reduceIndexed()": {
        "size": 150,
        "type": "function"
    },
    "test.text.StringTest.reduceIndexedOrNull()": {
        "size": 162,
        "type": "function"
    },
    "test.text.StringTest.reduceRightIndexed()": {
        "size": 160,
        "type": "function"
    },
    "test.text.StringTest.reduceRightIndexedOrNull()": {
        "size": 172,
        "type": "function"
    },
    "test.text.StringTest.reduce()": {
        "size": 136,
        "type": "function"
    },
    "test.text.StringTest.reduceRight()": {
        "size": 146,
        "type": "function"
    },
    "test.text.StringTest.reduceOrNull()": {
        "size": 148,
        "type": "function"
    },
    "test.text.StringTest.scan()": {
        "size": 132,
        "type": "function"
    },
    "test.text.StringTest.scanIndexed()": {
        "size": 146,
        "type": "function"
    },
    "test.text.StringTest.runningReduce()": {
        "size": 150,
        "type": "function"
    },
    "test.text.StringTest.runningReduceIndexed()": {
        "size": 164,
        "type": "function"
    },
    "test.text.StringTest.groupBy()": {
        "size": 158,
        "type": "function"
    },
    "test.text.StringTest.associateWith()": {
        "size": 164,
        "type": "function"
    },
    "test.text.StringTest.joinToString()": {
        "size": 1481,
        "type": "function"
    },
    "test.text.StringTest.joinTo()": {
        "size": 579,
        "type": "function"
    },
    "test.text.StringTest.dropWhile()": {
        "size": 3727,
        "type": "function"
    },
    "test.text.StringTest.dropWhileCharSequence()": {
        "size": 183,
        "type": "function"
    },
    "test.text.StringTest.drop()": {
        "size": 1734,
        "type": "function"
    },
    "test.text.StringTest.dropCharSequence()": {
        "size": 175,
        "type": "function"
    },
    "test.text.StringTest.takeWhile()": {
        "size": 3800,
        "type": "function"
    },
    "test.text.StringTest.takeWhileCharSequence()": {
        "size": 183,
        "type": "function"
    },
    "test.text.StringTest.take()": {
        "size": 1735,
        "type": "function"
    },
    "test.text.StringTest.takeCharSequence()": {
        "size": 175,
        "type": "function"
    },
    "test.text.StringTest.testReplaceAllClosure()": {
        "size": 187,
        "type": "function"
    },
    "test.text.StringTest.testReplaceAllClosureAtStart()": {
        "size": 197,
        "type": "function"
    },
    "test.text.StringTest.testReplaceAllClosureAtEnd()": {
        "size": 194,
        "type": "function"
    },
    "test.text.StringTest.testReplaceAllClosureEmpty()": {
        "size": 187,
        "type": "function"
    },
    "test.text.StringTest.trimMargin()": {
        "size": 3537,
        "type": "function"
    },
    "test.text.StringTest.trimIndent()": {
        "size": 7423,
        "type": "function"
    },
    "test.text.StringTest.testIndent()": {
        "size": 918,
        "type": "function"
    },
    "test.text.StringTest.elementAt()": {
        "size": 6752,
        "type": "function"
    },
    "test.text.StringTest.toHashSet()": {
        "size": 5867,
        "type": "function"
    },
    "test.text.StringTest.lowercase()": {
        "size": 1763,
        "type": "function"
    },
    "test.text.StringTest.uppercase()": {
        "size": 2074,
        "type": "function"
    },
    "test.text.StringTest.contentEquals()": {
        "size": 151,
        "type": "function"
    },
    "test.text.StringTest.contentEqualsIgnoreCase()": {
        "size": 171,
        "type": "function"
    },
    "test.text.StringTest.indexOfRespectsCharBoundary()": {
        "size": 687,
        "type": "function"
    },
    "test.text.StringTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.text.StringTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.text.StringTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.createString$ref": {
        "size": 652,
        "type": "class"
    },
    "test.text.createString$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.createString$ref.invoke(String)": {
        "size": 96,
        "type": "function"
    },
    "test.text.createString$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.text.createString$ref.<get-name>()": {
        "size": 63,
        "type": "function"
    },
    "test.text.createStringBuilder$ref": {
        "size": 673,
        "type": "class"
    },
    "test.text.createStringBuilder$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.text.createStringBuilder$ref.invoke(String)": {
        "size": 103,
        "type": "function"
    },
    "test.text.createStringBuilder$ref.invoke(P1)": {
        "size": 272,
        "type": "function"
    },
    "test.text.createStringBuilder$ref.<get-name>()": {
        "size": 70,
        "type": "function"
    },
    "test.text.withOneCharSequenceArg$lambda": {
        "size": 1211,
        "type": "class"
    },
    "test.text.withOneCharSequenceArg$lambda.<init>(Function1<CharSequence, Unit>, String)": {
        "size": 165,
        "type": "function"
    },
    "test.text.withOneCharSequenceArg$lambda.invoke(Function1<String, CharSequence>)": {
        "size": 404,
        "type": "function"
    },
    "test.text.withOneCharSequenceArg$lambda.invoke(P1)": {
        "size": 376,
        "type": "function"
    },
    "test.text.withOneCharSequenceArg$lambda.$f": {
        "size": 64,
        "type": "field"
    },
    "test.text.withOneCharSequenceArg$lambda.$arg1": {
        "size": 44,
        "type": "field"
    },
    "test.text.properties initialized StringTest.kt": {
        "size": 75,
        "type": "field"
    },
    "test.text.<init properties StringTest.kt>()": {
        "size": 474,
        "type": "function"
    },
    "test.time.<get-units>()": {
        "size": 106,
        "type": "function"
    },
    "test.time.units": {
        "size": 64,
        "type": "field"
    },
    "test.time.comparison$assertGreater(Duration, Duration, String)": {
        "size": 837,
        "type": "function"
    },
    "test.time.negativeZero$equivalentToZero(Duration)": {
        "size": 2810,
        "type": "function"
    },
    "test.time.truncation$expect(Duration, Duration, DurationUnit)": {
        "size": 660,
        "type": "function"
    },
    "test.time.parseAndFormatIsoString$test(Duration, Array<out String>)": {
        "size": 1605,
        "type": "function"
    },
    "test.time.parseAndFormatInUnits$test$0($closureBox$, DurationUnit, Array<out String>)": {
        "size": 4800,
        "type": "function"
    },
    "test.time.parseAndFormatDefault$testParsing(String, Duration)": {
        "size": 451,
        "type": "function"
    },
    "test.time.parseAndFormatDefault$test$1(Duration, Array<out String>)": {
        "size": 3481,
        "type": "function"
    },
    "test.time.DurationTest": {
        "size": 222988,
        "type": "class"
    },
    "test.time.DurationTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.time.DurationTest.constructionFromNumber()": {
        "size": 16589,
        "type": "function"
    },
    "test.time.DurationTest.equality()": {
        "size": 7242,
        "type": "function"
    },
    "test.time.DurationTest.comparison()": {
        "size": 2980,
        "type": "function"
    },
    "test.time.DurationTest.constructionFactoryFunctions()": {
        "size": 10922,
        "type": "function"
    },
    "test.time.DurationTest.conversionToNumber()": {
        "size": 12924,
        "type": "function"
    },
    "test.time.DurationTest.componentsOfProperSum()": {
        "size": 18958,
        "type": "function"
    },
    "test.time.DurationTest.componentsOfCarriedSum()": {
        "size": 4080,
        "type": "function"
    },
    "test.time.DurationTest.componentsOfInfinity()": {
        "size": 7492,
        "type": "function"
    },
    "test.time.DurationTest.infinite()": {
        "size": 2096,
        "type": "function"
    },
    "test.time.DurationTest.negation()": {
        "size": 1869,
        "type": "function"
    },
    "test.time.DurationTest.signAndAbsoluteValue()": {
        "size": 2294,
        "type": "function"
    },
    "test.time.DurationTest.negativeZero()": {
        "size": 1961,
        "type": "function"
    },
    "test.time.DurationTest.addition()": {
        "size": 8152,
        "type": "function"
    },
    "test.time.DurationTest.subtraction()": {
        "size": 23376,
        "type": "function"
    },
    "test.time.DurationTest.multiplication()": {
        "size": 18994,
        "type": "function"
    },
    "test.time.DurationTest.divisionByNumber()": {
        "size": 14371,
        "type": "function"
    },
    "test.time.DurationTest.divisionByDuration()": {
        "size": 3499,
        "type": "function"
    },
    "test.time.DurationTest.truncation()": {
        "size": 11280,
        "type": "function"
    },
    "test.time.DurationTest.parseAndFormatIsoString()": {
        "size": 9326,
        "type": "function"
    },
    "test.time.DurationTest.parseIsoStringFailing()": {
        "size": 4605,
        "type": "function"
    },
    "test.time.DurationTest.parseAndFormatInUnits()": {
        "size": 7808,
        "type": "function"
    },
    "test.time.DurationTest.parseAndFormatDefault()": {
        "size": 16828,
        "type": "function"
    },
    "test.time.DurationTest.parseDefaultFailing()": {
        "size": 4765,
        "type": "function"
    },
    "test.time.DurationTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.DurationTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.DurationTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.time.properties initialized DurationTest.kt": {
        "size": 77,
        "type": "field"
    },
    "test.time.<init properties DurationTest.kt>()": {
        "size": 261,
        "type": "function"
    },
    "test.time.conversion$test(Double, DurationUnit, Double, DurationUnit)": {
        "size": 1279,
        "type": "function"
    },
    "test.time.DurationUnitTest": {
        "size": 1803,
        "type": "class"
    },
    "test.time.DurationUnitTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.time.DurationUnitTest.conversion()": {
        "size": 1514,
        "type": "function"
    },
    "test.time.DurationUnitTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.DurationUnitTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.DurationUnitTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.time.Companion": {
        "size": 2789,
        "type": "class"
    },
    "test.time.Companion.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.time.Companion.longRunningCalc()": {
        "size": 2384,
        "type": "function"
    },
    "test.time.Companion.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.Companion.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.Companion.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.time.Companion_instance": {
        "size": 54,
        "type": "field"
    },
    "test.time.MeasureTimeTest": {
        "size": 7277,
        "type": "class"
    },
    "test.time.MeasureTimeTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.time.MeasureTimeTest.measureTimeOfCalc()": {
        "size": 1335,
        "type": "function"
    },
    "test.time.MeasureTimeTest.measureTimeAndResult()": {
        "size": 2140,
        "type": "function"
    },
    "test.time.MeasureTimeTest.measureTimeTestClock()": {
        "size": 3162,
        "type": "function"
    },
    "test.time.MeasureTimeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.MeasureTimeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.MeasureTimeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.time.TestTimeSourceTest": {
        "size": 26959,
        "type": "class"
    },
    "test.time.TestTimeSourceTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.time.TestTimeSourceTest.overflows()": {
        "size": 22983,
        "type": "function"
    },
    "test.time.TestTimeSourceTest.nanosecondRounding()": {
        "size": 2451,
        "type": "function"
    },
    "test.time.TestTimeSourceTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.TestTimeSourceTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.TestTimeSourceTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.time.LongTimeSource": {
        "size": 612,
        "type": "class"
    },
    "test.time.LongTimeSource.<init>(DurationUnit)": {
        "size": 140,
        "type": "function"
    },
    "test.time.LongTimeSource.reading": {
        "size": 26,
        "type": "field"
    },
    "test.time.LongTimeSource.read()": {
        "size": 154,
        "type": "function"
    },
    "test.time.LongTimeSource.markNow()": {
        "size": 55,
        "type": "function"
    },
    "test.time.LongTimeSource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.LongTimeSource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.LongTimeSource.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.time.DoubleTimeSource": {
        "size": 710,
        "type": "class"
    },
    "test.time.DoubleTimeSource.<init>(DurationUnit)": {
        "size": 143,
        "type": "function"
    },
    "test.time.DoubleTimeSource.reading": {
        "size": 28,
        "type": "field"
    },
    "test.time.DoubleTimeSource.read()": {
        "size": 160,
        "type": "function"
    },
    "test.time.DoubleTimeSource.markNow()": {
        "size": 55,
        "type": "function"
    },
    "test.time.DoubleTimeSource.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.DoubleTimeSource.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.DoubleTimeSource.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.time.TimeMarkTest$longDisplacement$lambda": {
        "size": 903,
        "type": "class"
    },
    "test.time.TimeMarkTest$longDisplacement$lambda.<init>(TestTimeSource)": {
        "size": 138,
        "type": "function"
    },
    "test.time.TimeMarkTest$longDisplacement$lambda.invoke(Duration)": {
        "size": 248,
        "type": "function"
    },
    "test.time.TimeMarkTest$longDisplacement$lambda.invoke(P1)": {
        "size": 327,
        "type": "function"
    },
    "test.time.TimeMarkTest$longDisplacement$lambda.$timeSource": {
        "size": 58,
        "type": "field"
    },
    "test.time.TimeMarkTest": {
        "size": 81439,
        "type": "class"
    },
    "test.time.TimeMarkTest.<init>()": {
        "size": 96,
        "type": "function"
    },
    "test.time.TimeMarkTest.units": {
        "size": 57,
        "type": "field"
    },
    "test.time.TimeMarkTest.assertHasPassed(Boolean)": {
        "size": 1002,
        "type": "function"
    },
    "test.time.TimeMarkTest.testAdjustment(WithComparableMarks)": {
        "size": 4280,
        "type": "function"
    },
    "test.time.TimeMarkTest.adjustment()": {
        "size": 713,
        "type": "function"
    },
    "test.time.TimeMarkTest.adjustmentTestTimeSource()": {
        "size": 3769,
        "type": "function"
    },
    "test.time.TimeMarkTest.testAdjustmentBig(WithComparableMarks)": {
        "size": 4650,
        "type": "function"
    },
    "test.time.TimeMarkTest.adjustmentBig()": {
        "size": 722,
        "type": "function"
    },
    "test.time.TimeMarkTest.testAdjustmentInfinite(WithComparableMarks)": {
        "size": 9249,
        "type": "function"
    },
    "test.time.TimeMarkTest.adjustmentInfinite()": {
        "size": 737,
        "type": "function"
    },
    "test.time.TimeMarkTest.testLongAdjustmentElapsedPrecision(WithComparableMarks, Function1<Duration, Unit>)": {
        "size": 2419,
        "type": "function"
    },
    "test.time.TimeMarkTest.longDisplacement()": {
        "size": 274,
        "type": "function"
    },
    "test.time.TimeMarkTest.assertEqualMarks(ComparableTimeMark, ComparableTimeMark)": {
        "size": 1630,
        "type": "function"
    },
    "test.time.TimeMarkTest.assertDifferentMarks(ComparableTimeMark, ComparableTimeMark, Int)": {
        "size": 1481,
        "type": "function"
    },
    "test.time.TimeMarkTest.timeMarkDifferenceAndComparison()": {
        "size": 10992,
        "type": "function"
    },
    "test.time.TimeMarkTest.longTimeMarkInfinities()": {
        "size": 3631,
        "type": "function"
    },
    "test.time.TimeMarkTest.doubleTimeMarkInfiniteEqualHashCode()": {
        "size": 1443,
        "type": "function"
    },
    "test.time.TimeMarkTest.longTimeMarkRoundingEqualHashCode()": {
        "size": 9327,
        "type": "function"
    },
    "test.time.TimeMarkTest.defaultTimeMarkAdjustment()": {
        "size": 3059,
        "type": "function"
    },
    "test.time.TimeMarkTest.defaultTimeMarkAdjustmentBig()": {
        "size": 5060,
        "type": "function"
    },
    "test.time.TimeMarkTest.defaultTimeMarkAdjustmentInfinite()": {
        "size": 5537,
        "type": "function"
    },
    "test.time.TimeMarkTest.defaultTimeMarkDifferenceAndComparison()": {
        "size": 7459,
        "type": "function"
    },
    "test.time.TimeMarkTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.time.TimeMarkTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.time.TimeMarkTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest": {
        "size": 30292,
        "type": "class"
    },
    "test.unsigned.UComparisonsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.minOf_2()": {
        "size": 3542,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.minOf_3()": {
        "size": 5447,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.minOf_vararg()": {
        "size": 5103,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.maxOf_2()": {
        "size": 3546,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.maxOf_3()": {
        "size": 5451,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.maxOf_vararg()": {
        "size": 5108,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.unsigned.UComparisonsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.unsigned.equality$testEqual(UInt, UInt)": {
        "size": 2048,
        "type": "function"
    },
    "test.unsigned.equality$testNotEqual(UInt, UInt)": {
        "size": 1119,
        "type": "function"
    },
    "test.unsigned.convertToString$testToString(String, UInt)": {
        "size": 568,
        "type": "function"
    },
    "test.unsigned.comparisons$compare(Comparable<T>, T)": {
        "size": 117,
        "type": "function"
    },
    "test.unsigned.comparisons$testComparison(UInt, UInt, Int)": {
        "size": 2939,
        "type": "function"
    },
    "test.unsigned.comparisons$testEquals(UInt, UInt)": {
        "size": 134,
        "type": "function"
    },
    "test.unsigned.comparisons$testCompare(UInt, UInt, Int)": {
        "size": 341,
        "type": "function"
    },
    "test.unsigned.convertToFloat$testEquals$0(Float, UInt)": {
        "size": 507,
        "type": "function"
    },
    "test.unsigned.convertToDouble$testEquals$1(Double, UInt)": {
        "size": 389,
        "type": "function"
    },
    "test.unsigned.convertToDouble$testRounding(UInt, UInt)": {
        "size": 7081,
        "type": "function"
    },
    "test.unsigned.convertDoubleToUInt$testEquals$2(Double, UInt)": {
        "size": 354,
        "type": "function"
    },
    "test.unsigned.UIntTest": {
        "size": 31179,
        "type": "class"
    },
    "test.unsigned.UIntTest.<init>()": {
        "size": 129,
        "type": "function"
    },
    "test.unsigned.UIntTest.identity(UInt)": {
        "size": 426,
        "type": "function"
    },
    "test.unsigned.UIntTest.zero": {
        "size": 41,
        "type": "field"
    },
    "test.unsigned.UIntTest.one": {
        "size": 40,
        "type": "field"
    },
    "test.unsigned.UIntTest.max": {
        "size": 40,
        "type": "field"
    },
    "test.unsigned.UIntTest.equality()": {
        "size": 360,
        "type": "function"
    },
    "test.unsigned.UIntTest.convertToString()": {
        "size": 4271,
        "type": "function"
    },
    "test.unsigned.UIntTest.operations()": {
        "size": 6659,
        "type": "function"
    },
    "test.unsigned.UIntTest.testMulDivRem(UInt, UInt, UInt, UInt)": {
        "size": 2782,
        "type": "function"
    },
    "test.unsigned.UIntTest.divRem()": {
        "size": 1961,
        "type": "function"
    },
    "test.unsigned.UIntTest.comparisons()": {
        "size": 1667,
        "type": "function"
    },
    "test.unsigned.UIntTest.convertToFloat()": {
        "size": 1463,
        "type": "function"
    },
    "test.unsigned.UIntTest.convertToDouble()": {
        "size": 3368,
        "type": "function"
    },
    "test.unsigned.UIntTest.convertDoubleToUInt()": {
        "size": 6050,
        "type": "function"
    },
    "test.unsigned.UIntTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.unsigned.UIntTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.unsigned.UIntTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.unsigned.equality$testEqual(ULong, ULong)": {
        "size": 2069,
        "type": "function"
    },
    "test.unsigned.equality$testNotEqual(ULong, ULong)": {
        "size": 1132,
        "type": "function"
    },
    "test.unsigned.convertToString$testToString(String, ULong)": {
        "size": 572,
        "type": "function"
    },
    "test.unsigned.comparisons$testComparison(ULong, ULong, Int)": {
        "size": 2965,
        "type": "function"
    },
    "test.unsigned.comparisons$testEquals(ULong, ULong)": {
        "size": 136,
        "type": "function"
    },
    "test.unsigned.comparisons$testCompare(ULong, ULong, Int)": {
        "size": 343,
        "type": "function"
    },
    "test.unsigned.convertToFloat$testEquals$0(Float, ULong)": {
        "size": 510,
        "type": "function"
    },
    "test.unsigned.convertToDouble$testEquals$1(Double, ULong)": {
        "size": 392,
        "type": "function"
    },
    "test.unsigned.convertToDouble$testRounding(ULong, ULong)": {
        "size": 7164,
        "type": "function"
    },
    "test.unsigned.convertDoubleToULong$testEquals$2(Double, ULong)": {
        "size": 360,
        "type": "function"
    },
    "test.unsigned.convertDoubleToULong$testTrailingBits(Double, Int)": {
        "size": 1504,
        "type": "function"
    },
    "test.unsigned.ULongTest": {
        "size": 57651,
        "type": "class"
    },
    "test.unsigned.ULongTest.<init>()": {
        "size": 132,
        "type": "function"
    },
    "test.unsigned.ULongTest.identity(ULong)": {
        "size": 712,
        "type": "function"
    },
    "test.unsigned.ULongTest.zero": {
        "size": 42,
        "type": "field"
    },
    "test.unsigned.ULongTest.one": {
        "size": 41,
        "type": "field"
    },
    "test.unsigned.ULongTest.max": {
        "size": 41,
        "type": "field"
    },
    "test.unsigned.ULongTest.equality()": {
        "size": 360,
        "type": "function"
    },
    "test.unsigned.ULongTest.convertToString()": {
        "size": 4730,
        "type": "function"
    },
    "test.unsigned.ULongTest.operations()": {
        "size": 10303,
        "type": "function"
    },
    "test.unsigned.ULongTest.testMulDivRem(ULong, ULong, ULong, ULong)": {
        "size": 2820,
        "type": "function"
    },
    "test.unsigned.ULongTest.divRem()": {
        "size": 2616,
        "type": "function"
    },
    "test.unsigned.ULongTest.comparisons()": {
        "size": 1703,
        "type": "function"
    },
    "test.unsigned.ULongTest.convertToFloat()": {
        "size": 5706,
        "type": "function"
    },
    "test.unsigned.ULongTest.convertToDouble()": {
        "size": 8237,
        "type": "function"
    },
    "test.unsigned.ULongTest.convertDoubleToULong()": {
        "size": 11192,
        "type": "function"
    },
    "test.unsigned.ULongTest.specialDoubleToULong(Double)": {
        "size": 5713,
        "type": "function"
    },
    "test.unsigned.ULongTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.unsigned.ULongTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.unsigned.ULongTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.unsigned.UMathTest": {
        "size": 8046,
        "type": "class"
    },
    "test.unsigned.UMathTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.unsigned.UMathTest.min()": {
        "size": 3416,
        "type": "function"
    },
    "test.unsigned.UMathTest.max()": {
        "size": 3868,
        "type": "function"
    },
    "test.unsigned.UMathTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.unsigned.UMathTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.unsigned.UMathTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.unsigned.ubyteBits$test(UByte, Int, Int, Int)": {
        "size": 6303,
        "type": "function"
    },
    "test.unsigned.ushortBits$test$0(UShort, Int, Int, Int)": {
        "size": 6361,
        "type": "function"
    },
    "test.unsigned.uintBits$test$1(UInt, Int, Int, Int)": {
        "size": 3629,
        "type": "function"
    },
    "test.unsigned.ulongBits$test$2(ULong, Int, Int, Int)": {
        "size": 5312,
        "type": "function"
    },
    "test.unsigned.uintRotate$test$3(UInt, Int, UInt)": {
        "size": 1684,
        "type": "function"
    },
    "test.unsigned.uintRotate$testCyclic(UInt)": {
        "size": 8600,
        "type": "function"
    },
    "test.unsigned.ubyteRotate$test$4(UByte, Int, UByte)": {
        "size": 1703,
        "type": "function"
    },
    "test.unsigned.ubyteRotate$testCyclic$5(UByte)": {
        "size": 8659,
        "type": "function"
    },
    "test.unsigned.ulongRotate$test$6(ULong, Int, ULong)": {
        "size": 2614,
        "type": "function"
    },
    "test.unsigned.ulongRotate$testCyclic$7(ULong)": {
        "size": 12952,
        "type": "function"
    },
    "test.unsigned.ushortRotate$test$8(UShort, Int, UShort)": {
        "size": 1722,
        "type": "function"
    },
    "test.unsigned.ushortRotate$testCyclic$9(UShort)": {
        "size": 8724,
        "type": "function"
    },
    "test.unsigned.NumbersTest": {
        "size": 8574,
        "type": "class"
    },
    "test.unsigned.NumbersTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.unsigned.NumbersTest.ubyteBits()": {
        "size": 543,
        "type": "function"
    },
    "test.unsigned.NumbersTest.ushortBits()": {
        "size": 572,
        "type": "function"
    },
    "test.unsigned.NumbersTest.uintBits()": {
        "size": 474,
        "type": "function"
    },
    "test.unsigned.NumbersTest.ulongBits()": {
        "size": 659,
        "type": "function"
    },
    "test.unsigned.NumbersTest.uintRotate()": {
        "size": 1183,
        "type": "function"
    },
    "test.unsigned.NumbersTest.ubyteRotate()": {
        "size": 1572,
        "type": "function"
    },
    "test.unsigned.NumbersTest.ulongRotate()": {
        "size": 1255,
        "type": "function"
    },
    "test.unsigned.NumbersTest.ushortRotate()": {
        "size": 1600,
        "type": "function"
    },
    "test.unsigned.NumbersTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.unsigned.NumbersTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.unsigned.NumbersTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda": {
        "size": 5812,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.<init>(MutualRec, Continuation<Any?>?)": {
        "size": 208,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.invoke(DeepRecursiveScope<Tree?, Int>, Tree?, Continuation<Int>)": {
        "size": 675,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 600,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.this$0": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.$this$$receiver": {
        "size": 78,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.t": {
        "size": 39,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.doResume()": {
        "size": 2938,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.WHEN_RESULT0": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.ARGUMENT1": {
        "size": 45,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.create(DeepRecursiveScope<Tree?, Int>, Tree?, Continuation<*>)": {
        "size": 368,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$even$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda": {
        "size": 5733,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.<init>(MutualRec, Continuation<Any?>?)": {
        "size": 208,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.invoke(DeepRecursiveScope<Tree?, Int>, Tree?, Continuation<Int>)": {
        "size": 672,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 600,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.this$0": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.$this$$receiver": {
        "size": 78,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.t": {
        "size": 39,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.doResume()": {
        "size": 2868,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.WHEN_RESULT0": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.ARGUMENT1": {
        "size": 45,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.create(DeepRecursiveScope<Tree?, Int>, Tree?, Continuation<*>)": {
        "size": 365,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualRec$odd$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda": {
        "size": 3354,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.invoke(DeepRecursiveScope<Int, String>, Int, Continuation<String>)": {
        "size": 514,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 600,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.$this$$receiver": {
        "size": 79,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.i": {
        "size": 37,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.doResume()": {
        "size": 942,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.create(DeepRecursiveScope<Int, String>, Int, Continuation<*>)": {
        "size": 369,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$b$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda": {
        "size": 6564,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.<init>(MutualAndDirectMixRec, Continuation<Any?>?)": {
        "size": 220,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.invoke(DeepRecursiveScope<Int, String>, Int, Continuation<String>)": {
        "size": 514,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 600,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.this$0": {
        "size": 60,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.$this$$receiver": {
        "size": 79,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.i": {
        "size": 37,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.doResume()": {
        "size": 3616,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.tmp0_subject0": {
        "size": 49,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.WHEN_RESULT1": {
        "size": 51,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.ARGUMENT2": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.ARGUMENT3": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.ARGUMENT4": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.create(DeepRecursiveScope<Int, String>, Int, Continuation<*>)": {
        "size": 394,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$MutualAndDirectMixRec$a$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda": {
        "size": 5439,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.<init>(EqualToAnythingClassRec, Continuation<Any?>?)": {
        "size": 222,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.invoke(DeepRecursiveScope<Tree?, EqualToAnything>, Tree?, Continuation<EqualToAnything>)": {
        "size": 542,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 624,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.this$0": {
        "size": 62,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.$this$$receiver": {
        "size": 90,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.t": {
        "size": 39,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.doResume()": {
        "size": 2611,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.WHEN_RESULT0": {
        "size": 60,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.create(DeepRecursiveScope<Tree?, EqualToAnything>, Tree?, Continuation<*>)": {
        "size": 413,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$a$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda": {
        "size": 5439,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.<init>(EqualToAnythingClassRec, Continuation<Any?>?)": {
        "size": 222,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.invoke(DeepRecursiveScope<Tree?, EqualToAnything>, Tree?, Continuation<EqualToAnything>)": {
        "size": 542,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 624,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.this$0": {
        "size": 62,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.$this$$receiver": {
        "size": 90,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.t": {
        "size": 39,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.doResume()": {
        "size": 2611,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.WHEN_RESULT0": {
        "size": 60,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.create(DeepRecursiveScope<Tree?, EqualToAnything>, Tree?, Continuation<*>)": {
        "size": 413,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$EqualToAnythingClassRec$b$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda": {
        "size": 3267,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.invoke(DeepRecursiveScope<Bad, Bad>, Bad, Continuation<Bad>)": {
        "size": 487,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 594,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.$this$$receiver": {
        "size": 76,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.v": {
        "size": 37,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.doResume()": {
        "size": 928,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.create(DeepRecursiveScope<Bad, Bad>, Bad, Continuation<*>)": {
        "size": 345,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$a$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda": {
        "size": 8006,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.<init>(<no name provided>, Continuation<Any?>?)": {
        "size": 217,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.invoke(DeepRecursiveScope<Bad, Bad>, Bad, Continuation<Bad>)": {
        "size": 487,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 594,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.this$0": {
        "size": 57,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.$this$$receiver": {
        "size": 76,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.v": {
        "size": 37,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.doResume()": {
        "size": 4977,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.tmp0_subject0": {
        "size": 49,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.WHEN_RESULT1": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.ARGUMENT2": {
        "size": 45,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.ARGUMENT3": {
        "size": 45,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.ARGUMENT4": {
        "size": 45,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.ARGUMENT5": {
        "size": 45,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.ARGUMENT6": {
        "size": 45,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.create(DeepRecursiveScope<Bad, Bad>, Bad, Continuation<*>)": {
        "size": 370,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testBadClass$o$b$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.MutualRec": {
        "size": 827,
        "type": "class"
    },
    "test.utils.MutualRec.<init>()": {
        "size": 471,
        "type": "function"
    },
    "test.utils.MutualRec.even": {
        "size": 70,
        "type": "field"
    },
    "test.utils.MutualRec.odd": {
        "size": 69,
        "type": "field"
    },
    "test.utils.MutualRec.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.MutualRec.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.MutualRec.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.MutualAndDirectMixRec": {
        "size": 910,
        "type": "class"
    },
    "test.utils.MutualAndDirectMixRec.<init>()": {
        "size": 470,
        "type": "function"
    },
    "test.utils.MutualAndDirectMixRec.b": {
        "size": 68,
        "type": "field"
    },
    "test.utils.MutualAndDirectMixRec.a": {
        "size": 68,
        "type": "field"
    },
    "test.utils.MutualAndDirectMixRec.aa()": {
        "size": 69,
        "type": "function"
    },
    "test.utils.MutualAndDirectMixRec.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.MutualAndDirectMixRec.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.MutualAndDirectMixRec.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.EqualToAnythingClassRec": {
        "size": 959,
        "type": "class"
    },
    "test.utils.EqualToAnythingClassRec.<init>()": {
        "size": 539,
        "type": "function"
    },
    "test.utils.EqualToAnythingClassRec.nullCount": {
        "size": 27,
        "type": "field"
    },
    "test.utils.EqualToAnythingClassRec.a": {
        "size": 79,
        "type": "field"
    },
    "test.utils.EqualToAnythingClassRec.b": {
        "size": 79,
        "type": "field"
    },
    "test.utils.EqualToAnythingClassRec.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.EqualToAnythingClassRec.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.EqualToAnythingClassRec.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.Tree": {
        "size": 1000,
        "type": "class"
    },
    "test.utils.Tree.<init>(Tree?, Tree?)": {
        "size": 142,
        "type": "function"
    },
    "test.utils.Tree.<init>(Tree?, Tree?, Int, DefaultConstructorMarker?)": {
        "size": 547,
        "type": "function"
    },
    "test.utils.Tree.left": {
        "size": 42,
        "type": "field"
    },
    "test.utils.Tree.right": {
        "size": 43,
        "type": "field"
    },
    "test.utils.Tree.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.Tree.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.Tree.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.EqualToAnything": {
        "size": 353,
        "type": "class"
    },
    "test.utils.EqualToAnything.<init>(Int)": {
        "size": 91,
        "type": "function"
    },
    "test.utils.EqualToAnything.i": {
        "size": 37,
        "type": "field"
    },
    "test.utils.EqualToAnything.equals(Any?)": {
        "size": 70,
        "type": "function"
    },
    "test.utils.EqualToAnything.toString()": {
        "size": 51,
        "type": "function"
    },
    "test.utils.EqualToAnything.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.Bad": {
        "size": 706,
        "type": "class"
    },
    "test.utils.Bad.<init>(Int)": {
        "size": 91,
        "type": "function"
    },
    "test.utils.Bad.i": {
        "size": 37,
        "type": "field"
    },
    "test.utils.Bad.equals(Any?)": {
        "size": 180,
        "type": "function"
    },
    "test.utils.Bad.hashCode()": {
        "size": 158,
        "type": "function"
    },
    "test.utils.Bad.toString()": {
        "size": 161,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda": {
        "size": 3292,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.invoke(DeepRecursiveScope<Int, String>, Int, Continuation<String>)": {
        "size": 493,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 600,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.$this$$receiver": {
        "size": 79,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.i": {
        "size": 37,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.doResume()": {
        "size": 929,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.create(DeepRecursiveScope<Int, String>, Int, Continuation<*>)": {
        "size": 348,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$testSimpleReturn$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.<no name provided>": {
        "size": 812,
        "type": "class"
    },
    "test.utils.<no name provided>.<init>()": {
        "size": 458,
        "type": "function"
    },
    "test.utils.<no name provided>.a": {
        "size": 65,
        "type": "field"
    },
    "test.utils.<no name provided>.b": {
        "size": 65,
        "type": "field"
    },
    "test.utils.<no name provided>.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.<no name provided>.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.<no name provided>.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$deepTree$lambda": {
        "size": 603,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$deepTree$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$deepTree$lambda.invoke(Tree)": {
        "size": 142,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$deepTree$lambda.invoke(P1)": {
        "size": 268,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda": {
        "size": 5614,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.<init>(Continuation<Any?>?)": {
        "size": 163,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.invoke(DeepRecursiveScope<Tree?, Int>, Tree?, Continuation<Int>)": {
        "size": 648,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.invoke(P1, P2, Continuation<R>)": {
        "size": 600,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.$this$$receiver": {
        "size": 78,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.t": {
        "size": 39,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.doResume()": {
        "size": 2917,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.WHEN_RESULT0": {
        "size": 48,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.tmp0_maxOf1": {
        "size": 47,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.create(DeepRecursiveScope<Tree?, Int>, Tree?, Continuation<*>)": {
        "size": 316,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.<get-context>()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.intercepted()": {
        "size": 59,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.resumeWith(Result<Any?>)": {
        "size": 58,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest$depth$slambda.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest": {
        "size": 5135,
        "type": "class"
    },
    "test.utils.DeepRecursiveTest.<init>()": {
        "size": 245,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testSimpleReturn()": {
        "size": 465,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testDeepTreeDepth()": {
        "size": 326,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testBinaryTreeDepth()": {
        "size": 326,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testDeepTreeOddEvenNodesMutual()": {
        "size": 701,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testBinaryTreeOddEvenNodesMutual()": {
        "size": 643,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testMutualAndDirectMix()": {
        "size": 346,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testEqualToAnythingClass()": {
        "size": 621,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.testBadClass()": {
        "size": 388,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.deepTree(Int)": {
        "size": 349,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.binaryTree(Int)": {
        "size": 257,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.depth": {
        "size": 71,
        "type": "field"
    },
    "test.utils.DeepRecursiveTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.DeepRecursiveTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.HashCodeTest": {
        "size": 2609,
        "type": "class"
    },
    "test.utils.HashCodeTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.utils.HashCodeTest.hashCodeOfNull()": {
        "size": 1416,
        "type": "function"
    },
    "test.utils.HashCodeTest.hashCodeOfNotNull()": {
        "size": 806,
        "type": "function"
    },
    "test.utils.HashCodeTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.HashCodeTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.HashCodeTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.randomVersionComparison$randomComponent()": {
        "size": 198,
        "type": "function"
    },
    "test.utils.randomVersionComparison$randomVersion()": {
        "size": 248,
        "type": "function"
    },
    "test.utils.KotlinVersionTest": {
        "size": 14723,
        "type": "class"
    },
    "test.utils.KotlinVersionTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.utils.KotlinVersionTest.currentVersion()": {
        "size": 2159,
        "type": "function"
    },
    "test.utils.KotlinVersionTest.componentValidation()": {
        "size": 7610,
        "type": "function"
    },
    "test.utils.KotlinVersionTest.versionComparison()": {
        "size": 2449,
        "type": "function"
    },
    "test.utils.KotlinVersionTest.randomVersionComparison()": {
        "size": 1609,
        "type": "function"
    },
    "test.utils.KotlinVersionTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.KotlinVersionTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.KotlinVersionTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.LazyTest$initializationCalledOnce$lambda": {
        "size": 1011,
        "type": "class"
    },
    "test.utils.LazyTest$initializationCalledOnce$lambda.<init>($closureBox$)": {
        "size": 133,
        "type": "function"
    },
    "test.utils.LazyTest$initializationCalledOnce$lambda.invoke()": {
        "size": 606,
        "type": "function"
    },
    "test.utils.LazyTest$initializationCalledOnce$lambda.$callCount": {
        "size": 55,
        "type": "field"
    },
    "test.utils.LazyTest$lazyToString$lambda": {
        "size": 975,
        "type": "class"
    },
    "test.utils.LazyTest$lazyToString$lambda.<init>($closureBox$)": {
        "size": 133,
        "type": "function"
    },
    "test.utils.LazyTest$lazyToString$lambda.invoke()": {
        "size": 582,
        "type": "function"
    },
    "test.utils.LazyTest$lazyToString$lambda.$callCount": {
        "size": 55,
        "type": "field"
    },
    "test.utils.LazyTest": {
        "size": 3546,
        "type": "class"
    },
    "test.utils.LazyTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.utils.LazyTest.initializationCalledOnce()": {
        "size": 1493,
        "type": "function"
    },
    "test.utils.LazyTest.alreadyInitialized()": {
        "size": 462,
        "type": "function"
    },
    "test.utils.LazyTest.lazyToString()": {
        "size": 1216,
        "type": "function"
    },
    "test.utils.LazyTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.LazyTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.LazyTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.PreconditionsTest": {
        "size": 33566,
        "type": "class"
    },
    "test.utils.PreconditionsTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.utils.PreconditionsTest.passingRequire()": {
        "size": 1339,
        "type": "function"
    },
    "test.utils.PreconditionsTest.failingRequire()": {
        "size": 3522,
        "type": "function"
    },
    "test.utils.PreconditionsTest.failingRequireWithLazyMessage()": {
        "size": 3075,
        "type": "function"
    },
    "test.utils.PreconditionsTest.passingCheck()": {
        "size": 1309,
        "type": "function"
    },
    "test.utils.PreconditionsTest.failingCheck()": {
        "size": 3485,
        "type": "function"
    },
    "test.utils.PreconditionsTest.failingCheckWithLazyMessage()": {
        "size": 3044,
        "type": "function"
    },
    "test.utils.PreconditionsTest.requireNotNull()": {
        "size": 1027,
        "type": "function"
    },
    "test.utils.PreconditionsTest.requireNotNullFails()": {
        "size": 3677,
        "type": "function"
    },
    "test.utils.PreconditionsTest.requireNotNullWithLazyMessage()": {
        "size": 4068,
        "type": "function"
    },
    "test.utils.PreconditionsTest.checkNotNull()": {
        "size": 1022,
        "type": "function"
    },
    "test.utils.PreconditionsTest.checkNotNullFails()": {
        "size": 3657,
        "type": "function"
    },
    "test.utils.PreconditionsTest.error()": {
        "size": 2417,
        "type": "function"
    },
    "test.utils.PreconditionsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.PreconditionsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.PreconditionsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass": {
        "size": 1942,
        "type": "class"
    },
    "test.utils.PartiallyImplementedClass.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.<get-prop>()": {
        "size": 211,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.method1()": {
        "size": 328,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.method2()": {
        "size": 205,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.method3(Boolean, String)": {
        "size": 611,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.method4()": {
        "size": 193,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.PartiallyImplementedClass.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.TODOTest$usage$lambda": {
        "size": 608,
        "type": "class"
    },
    "test.utils.TODOTest$usage$lambda.<init>(PartiallyImplementedClass)": {
        "size": 131,
        "type": "function"
    },
    "test.utils.TODOTest$usage$lambda.invoke()": {
        "size": 218,
        "type": "function"
    },
    "test.utils.TODOTest$usage$lambda.$inst": {
        "size": 63,
        "type": "field"
    },
    "test.utils.TODOTest": {
        "size": 5846,
        "type": "class"
    },
    "test.utils.TODOTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.utils.TODOTest.assertNotImplemented(Function0<Unit>)": {
        "size": 1912,
        "type": "function"
    },
    "test.utils.TODOTest.assertNotImplementedWithMessage(String, Function0<Unit>)": {
        "size": 2313,
        "type": "function"
    },
    "test.utils.TODOTest.usage()": {
        "size": 1078,
        "type": "function"
    },
    "test.utils.TODOTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.TODOTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.TODOTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.PairTest": {
        "size": 5516,
        "type": "class"
    },
    "test.utils.PairTest.<init>()": {
        "size": 152,
        "type": "function"
    },
    "test.utils.PairTest.p": {
        "size": 51,
        "type": "field"
    },
    "test.utils.PairTest.pairFirstAndSecond()": {
        "size": 430,
        "type": "function"
    },
    "test.utils.PairTest.pairMultiAssignment()": {
        "size": 568,
        "type": "function"
    },
    "test.utils.PairTest.pairToString()": {
        "size": 182,
        "type": "function"
    },
    "test.utils.PairTest.pairEquals()": {
        "size": 960,
        "type": "function"
    },
    "test.utils.PairTest.pairHashCode()": {
        "size": 1288,
        "type": "function"
    },
    "test.utils.PairTest.pairHashSet()": {
        "size": 639,
        "type": "function"
    },
    "test.utils.PairTest.pairToList()": {
        "size": 884,
        "type": "function"
    },
    "test.utils.PairTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.PairTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.PairTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.utils.TripleTest": {
        "size": 7567,
        "type": "class"
    },
    "test.utils.TripleTest.<init>()": {
        "size": 205,
        "type": "function"
    },
    "test.utils.TripleTest.t": {
        "size": 61,
        "type": "field"
    },
    "test.utils.TripleTest.tripleFirstAndSecond()": {
        "size": 665,
        "type": "function"
    },
    "test.utils.TripleTest.tripleMultiAssignment()": {
        "size": 847,
        "type": "function"
    },
    "test.utils.TripleTest.tripleToString()": {
        "size": 190,
        "type": "function"
    },
    "test.utils.TripleTest.tripleEquals()": {
        "size": 1427,
        "type": "function"
    },
    "test.utils.TripleTest.tripleHashCode()": {
        "size": 1809,
        "type": "function"
    },
    "test.utils.TripleTest.tripleHashSet()": {
        "size": 820,
        "type": "function"
    },
    "test.utils.TripleTest.tripleToList()": {
        "size": 1153,
        "type": "function"
    },
    "test.utils.TripleTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.utils.TripleTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.utils.TripleTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.collections.js.stringMapOf(Array<out Pair<String, V>>)": {
        "size": 497,
        "type": "function"
    },
    "test.collections.js.linkedStringMapOf(Array<out Pair<String, V>>)": {
        "size": 505,
        "type": "function"
    },
    "test.collections.js.stringSetOf(Array<out String>)": {
        "size": 444,
        "type": "function"
    },
    "test.collections.js.linkedStringSetOf(Array<out String>)": {
        "size": 452,
        "type": "function"
    },
    "test.math.powWrapper(Double, Double)": {
        "size": 81,
        "type": "function"
    },
    "test.math.getMantissa(Double)": {
        "size": 1497,
        "type": "function"
    },
    "test.math.getExp(Double)": {
        "size": 647,
        "type": "function"
    },
    "test.math.compare(Double, Double?, Double, Double, Boolean)": {
        "size": 3153,
        "type": "function"
    },
    "test.math.checkAnswers(Function1<Double, Double>, Array<ULong>, Array<ULong>, Boolean)": {
        "size": 2169,
        "type": "function"
    },
    "test.math.checkAnswers(Function2<Double, Double, Double>, Array<ULong>, Array<ULong>, Boolean)": {
        "size": 6928,
        "type": "function"
    },
    "test.math.hypot$ref": {
        "size": 900,
        "type": "class"
    },
    "test.math.hypot$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.hypot$ref.invoke(Double, Double)": {
        "size": 97,
        "type": "function"
    },
    "test.math.hypot$ref.invoke(P1, P2)": {
        "size": 513,
        "type": "function"
    },
    "test.math.hypot$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.sqrt$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.sqrt$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.sqrt$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.sqrt$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.sqrt$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.exp$ref": {
        "size": 630,
        "type": "class"
    },
    "test.math.exp$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.exp$ref.invoke(Double)": {
        "size": 75,
        "type": "function"
    },
    "test.math.exp$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.exp$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "test.math.expm1$ref": {
        "size": 636,
        "type": "class"
    },
    "test.math.expm1$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.expm1$ref.invoke(Double)": {
        "size": 77,
        "type": "function"
    },
    "test.math.expm1$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.expm1$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.log$ref": {
        "size": 897,
        "type": "class"
    },
    "test.math.log$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.log$ref.invoke(Double, Double)": {
        "size": 98,
        "type": "function"
    },
    "test.math.log$ref.invoke(P1, P2)": {
        "size": 513,
        "type": "function"
    },
    "test.math.log$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "test.math.ln$ref": {
        "size": 627,
        "type": "class"
    },
    "test.math.ln$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.ln$ref.invoke(Double)": {
        "size": 74,
        "type": "function"
    },
    "test.math.ln$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.ln$ref.<get-name>()": {
        "size": 53,
        "type": "function"
    },
    "test.math.log10$ref": {
        "size": 636,
        "type": "class"
    },
    "test.math.log10$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.log10$ref.invoke(Double)": {
        "size": 77,
        "type": "function"
    },
    "test.math.log10$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.log10$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.log2$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.log2$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.log2$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.log2$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.log2$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.ln1p$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.ln1p$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.ln1p$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.ln1p$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.ln1p$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.powWrapper$ref": {
        "size": 915,
        "type": "class"
    },
    "test.math.powWrapper$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.powWrapper$ref.invoke(Double, Double)": {
        "size": 102,
        "type": "function"
    },
    "test.math.powWrapper$ref.invoke(P1, P2)": {
        "size": 513,
        "type": "function"
    },
    "test.math.powWrapper$ref.<get-name>()": {
        "size": 61,
        "type": "function"
    },
    "test.math.PowersTest": {
        "size": 203203,
        "type": "class"
    },
    "test.math.PowersTest.<init>()": {
        "size": 1883,
        "type": "function"
    },
    "test.math.PowersTest.arguments": {
        "size": 54,
        "type": "field"
    },
    "test.math.PowersTest.testHypot()": {
        "size": 59376,
        "type": "function"
    },
    "test.math.PowersTest.testSqrt()": {
        "size": 2001,
        "type": "function"
    },
    "test.math.PowersTest.testExp()": {
        "size": 2067,
        "type": "function"
    },
    "test.math.PowersTest.testExpm1()": {
        "size": 1995,
        "type": "function"
    },
    "test.math.PowersTest.testLog()": {
        "size": 61313,
        "type": "function"
    },
    "test.math.PowersTest.testLn()": {
        "size": 3982,
        "type": "function"
    },
    "test.math.PowersTest.testLog10()": {
        "size": 3990,
        "type": "function"
    },
    "test.math.PowersTest.testLog2()": {
        "size": 3970,
        "type": "function"
    },
    "test.math.PowersTest.testLn1p()": {
        "size": 3918,
        "type": "function"
    },
    "test.math.PowersTest.testPowWrapper()": {
        "size": 58076,
        "type": "function"
    },
    "test.math.PowersTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.math.PowersTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.math.PowersTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.math.ceil$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.ceil$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.ceil$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.ceil$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.ceil$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.floor$ref": {
        "size": 636,
        "type": "class"
    },
    "test.math.floor$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.floor$ref.invoke(Double)": {
        "size": 77,
        "type": "function"
    },
    "test.math.floor$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.floor$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.truncate$ref": {
        "size": 645,
        "type": "class"
    },
    "test.math.truncate$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.truncate$ref.invoke(Double)": {
        "size": 80,
        "type": "function"
    },
    "test.math.truncate$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.truncate$ref.<get-name>()": {
        "size": 59,
        "type": "function"
    },
    "test.math.round$ref": {
        "size": 636,
        "type": "class"
    },
    "test.math.round$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.round$ref.invoke(Double)": {
        "size": 77,
        "type": "function"
    },
    "test.math.round$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.round$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.RoundingsTest": {
        "size": 17254,
        "type": "class"
    },
    "test.math.RoundingsTest.<init>()": {
        "size": 3471,
        "type": "function"
    },
    "test.math.RoundingsTest.arguments": {
        "size": 54,
        "type": "field"
    },
    "test.math.RoundingsTest.testCeil()": {
        "size": 3596,
        "type": "function"
    },
    "test.math.RoundingsTest.testFloor()": {
        "size": 3238,
        "type": "function"
    },
    "test.math.RoundingsTest.testTruncate()": {
        "size": 3244,
        "type": "function"
    },
    "test.math.RoundingsTest.testRound()": {
        "size": 3346,
        "type": "function"
    },
    "test.math.RoundingsTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.math.RoundingsTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.math.RoundingsTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.math.sin$ref": {
        "size": 630,
        "type": "class"
    },
    "test.math.sin$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.sin$ref.invoke(Double)": {
        "size": 75,
        "type": "function"
    },
    "test.math.sin$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.sin$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "test.math.cos$ref": {
        "size": 630,
        "type": "class"
    },
    "test.math.cos$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.cos$ref.invoke(Double)": {
        "size": 75,
        "type": "function"
    },
    "test.math.cos$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.cos$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "test.math.tan$ref": {
        "size": 630,
        "type": "class"
    },
    "test.math.tan$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.tan$ref.invoke(Double)": {
        "size": 75,
        "type": "function"
    },
    "test.math.tan$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.tan$ref.<get-name>()": {
        "size": 54,
        "type": "function"
    },
    "test.math.asin$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.asin$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.asin$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.asin$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.asin$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.atan$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.atan$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.atan$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.atan$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.atan$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.atan2$ref": {
        "size": 900,
        "type": "class"
    },
    "test.math.atan2$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.atan2$ref.invoke(Double, Double)": {
        "size": 97,
        "type": "function"
    },
    "test.math.atan2$ref.invoke(P1, P2)": {
        "size": 513,
        "type": "function"
    },
    "test.math.atan2$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.sinh$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.sinh$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.sinh$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.sinh$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.sinh$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.cosh$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.cosh$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.cosh$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.cosh$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.cosh$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.tanh$ref": {
        "size": 633,
        "type": "class"
    },
    "test.math.tanh$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.tanh$ref.invoke(Double)": {
        "size": 76,
        "type": "function"
    },
    "test.math.tanh$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.tanh$ref.<get-name>()": {
        "size": 55,
        "type": "function"
    },
    "test.math.asinh$ref": {
        "size": 636,
        "type": "class"
    },
    "test.math.asinh$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.asinh$ref.invoke(Double)": {
        "size": 77,
        "type": "function"
    },
    "test.math.asinh$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.asinh$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.acosh$ref": {
        "size": 636,
        "type": "class"
    },
    "test.math.acosh$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.acosh$ref.invoke(Double)": {
        "size": 77,
        "type": "function"
    },
    "test.math.acosh$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.acosh$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.atanh$ref": {
        "size": 636,
        "type": "class"
    },
    "test.math.atanh$ref.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.math.atanh$ref.invoke(Double)": {
        "size": 77,
        "type": "function"
    },
    "test.math.atanh$ref.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.math.atanh$ref.<get-name>()": {
        "size": 56,
        "type": "function"
    },
    "test.math.TrigonometryTest": {
        "size": 154055,
        "type": "class"
    },
    "test.math.TrigonometryTest.<init>()": {
        "size": 2632,
        "type": "function"
    },
    "test.math.TrigonometryTest.arguments": {
        "size": 54,
        "type": "field"
    },
    "test.math.TrigonometryTest.testSin()": {
        "size": 2739,
        "type": "function"
    },
    "test.math.TrigonometryTest.testCos()": {
        "size": 2837,
        "type": "function"
    },
    "test.math.TrigonometryTest.testTan()": {
        "size": 2741,
        "type": "function"
    },
    "test.math.TrigonometryTest.testAsin()": {
        "size": 2732,
        "type": "function"
    },
    "test.math.TrigonometryTest.testAtan()": {
        "size": 2742,
        "type": "function"
    },
    "test.math.TrigonometryTest.testAtan2()": {
        "size": 120466,
        "type": "function"
    },
    "test.math.TrigonometryTest.testSinh()": {
        "size": 2739,
        "type": "function"
    },
    "test.math.TrigonometryTest.testCosh()": {
        "size": 2828,
        "type": "function"
    },
    "test.math.TrigonometryTest.testTanh()": {
        "size": 2742,
        "type": "function"
    },
    "test.math.TrigonometryTest.testAsinh()": {
        "size": 2742,
        "type": "function"
    },
    "test.math.TrigonometryTest.testAcosh()": {
        "size": 2813,
        "type": "function"
    },
    "test.math.TrigonometryTest.testAtanh()": {
        "size": 2732,
        "type": "function"
    },
    "test.math.TrigonometryTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.math.TrigonometryTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.math.TrigonometryTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.js.state": {
        "size": 52,
        "type": "field"
    },
    "test.js.jsAsyncFoo()": {
        "size": 80,
        "type": "function"
    },
    "test.js.jsAsyncFoo__externalAdapter()": {
        "size": 275,
        "type": "function"
    },
    "test.js.jsFoo()": {
        "size": 59,
        "type": "function"
    },
    "test.js.jsFoo__externalAdapter()": {
        "size": 255,
        "type": "function"
    },
    "test.js.MyThrowable": {
        "size": 435,
        "type": "class"
    },
    "test.js.MyThrowable.<init>()": {
        "size": 73,
        "type": "function"
    },
    "test.js.MyThrowable.<get-message>()": {
        "size": 50,
        "type": "function"
    },
    "test.js.MyThrowable.<get-cause>()": {
        "size": 51,
        "type": "function"
    },
    "test.js.MyThrowable.<get-stack>()": {
        "size": 56,
        "type": "function"
    },
    "test.js.MyThrowable.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.js.MyThrowable.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.js.MyThrowable.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.js.AsyncTest$test1$lambda": {
        "size": 822,
        "type": "class"
    },
    "test.js.AsyncTest$test1$lambda.<init>($closureBox$)": {
        "size": 142,
        "type": "function"
    },
    "test.js.AsyncTest$test1$lambda.invoke(JsAny?)": {
        "size": 261,
        "type": "function"
    },
    "test.js.AsyncTest$test1$lambda.invoke(P1)": {
        "size": 243,
        "type": "function"
    },
    "test.js.AsyncTest$test1$lambda.$thenExecuted": {
        "size": 58,
        "type": "field"
    },
    "test.js.AsyncTest$test2$lambda": {
        "size": 1031,
        "type": "class"
    },
    "test.js.AsyncTest$test2$lambda.<init>($closureBox$)": {
        "size": 142,
        "type": "function"
    },
    "test.js.AsyncTest$test2$lambda.invoke(JsAny?)": {
        "size": 447,
        "type": "function"
    },
    "test.js.AsyncTest$test2$lambda.invoke(P1)": {
        "size": 252,
        "type": "function"
    },
    "test.js.AsyncTest$test2$lambda.$thenExecuted": {
        "size": 58,
        "type": "field"
    },
    "test.js.AsyncTest$test2$lambda.invoke(Nothing?)": {
        "size": 449,
        "type": "function"
    },
    "test.js.AsyncTest$testJsValueToThrowableOrNull1$lambda": {
        "size": 714,
        "type": "class"
    },
    "test.js.AsyncTest$testJsValueToThrowableOrNull1$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.js.AsyncTest$testJsValueToThrowableOrNull1$lambda.invoke(JsAny?)": {
        "size": 77,
        "type": "function"
    },
    "test.js.AsyncTest$testJsValueToThrowableOrNull1$lambda.invoke(P1)": {
        "size": 240,
        "type": "function"
    },
    "test.js.AsyncTest$testJsValueToThrowableOrNull1$lambda.invoke(JsAny)": {
        "size": 254,
        "type": "function"
    },
    "test.js.AsyncTest": {
        "size": 2515,
        "type": "class"
    },
    "test.js.AsyncTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.js.AsyncTest.test1()": {
        "size": 525,
        "type": "function"
    },
    "test.js.AsyncTest.test2()": {
        "size": 902,
        "type": "function"
    },
    "test.js.AsyncTest.testJsValueToThrowableOrNull1()": {
        "size": 467,
        "type": "function"
    },
    "test.js.AsyncTest.testJsValueToThrowableOrNull2()": {
        "size": 263,
        "type": "function"
    },
    "test.js.AsyncTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.js.AsyncTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.js.AsyncTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.text.<get-surrogateCodePointDecoding>()": {
        "size": 138,
        "type": "function"
    },
    "test.text.surrogateCodePointDecoding": {
        "size": 72,
        "type": "field"
    },
    "test.text.<get-surrogateCharEncoding>()": {
        "size": 131,
        "type": "function"
    },
    "test.text.surrogateCharEncoding": {
        "size": 70,
        "type": "field"
    },
    "test.text.properties initialized stringEncoding.kt": {
        "size": 79,
        "type": "field"
    },
    "test.text.<init properties stringEncoding.kt>()": {
        "size": 619,
        "type": "function"
    },
    "test.isFloat32RangeEnforced": {
        "size": 77,
        "type": "field"
    },
    "test.assertTypeEquals(Any?, Any?)": {
        "size": 1182,
        "type": "function"
    },
    "test.<get-current>()": {
        "size": 90,
        "type": "function"
    },
    "test.<get-supportsOctalLiteralInRegex>()": {
        "size": 68,
        "type": "function"
    },
    "test.<get-supportsEscapeAnyCharInRegex>()": {
        "size": 69,
        "type": "function"
    },
    "test.<get-regexSplitUnicodeCodePointHandling>()": {
        "size": 75,
        "type": "function"
    },
    "test.BackReferenceHandling": {
        "size": 1205,
        "type": "class"
    },
    "test.BackReferenceHandling.<init>()": {
        "size": 527,
        "type": "function"
    },
    "test.BackReferenceHandling.<get-captureLargestValidIndex>()": {
        "size": 65,
        "type": "function"
    },
    "test.BackReferenceHandling.notYetDefinedGroup": {
        "size": 65,
        "type": "field"
    },
    "test.BackReferenceHandling.notYetDefinedNamedGroup": {
        "size": 70,
        "type": "field"
    },
    "test.BackReferenceHandling.enclosingGroup": {
        "size": 61,
        "type": "field"
    },
    "test.BackReferenceHandling.nonExistentGroup": {
        "size": 63,
        "type": "field"
    },
    "test.BackReferenceHandling.nonExistentNamedGroup": {
        "size": 68,
        "type": "field"
    },
    "test.BackReferenceHandling.groupZero": {
        "size": 56,
        "type": "field"
    },
    "test.BackReferenceHandling.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.BackReferenceHandling.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.BackReferenceHandling.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.BackReferenceHandling_instance": {
        "size": 78,
        "type": "field"
    },
    "test.BackReferenceHandling_getInstance()": {
        "size": 231,
        "type": "function"
    },
    "test.wasm.unsafe.testAccessingWithDifferentTypes$<anonymous>$fillWith(UInt, UInt, Byte)": {
        "size": 1468,
        "type": "function"
    },
    "test.wasm.unsafe.testAccessingWithDifferentTypes$<anonymous>$fillWith$0(UInt, UInt, Short)": {
        "size": 1684,
        "type": "function"
    },
    "test.wasm.unsafe.testAccessingWithDifferentTypes$<anonymous>$fillWith$1(UInt, UInt, Int)": {
        "size": 1680,
        "type": "function"
    },
    "test.wasm.unsafe.testAccessingWithDifferentTypes$<anonymous>$fillWith$2(UInt, UInt, Long)": {
        "size": 1682,
        "type": "function"
    },
    "test.wasm.unsafe.testAccessingWithDifferentTypes$<anonymous>$checkMem(Int, Pointer, List<Byte>, List<Short>, List<Int>, List<Long>)": {
        "size": 4838,
        "type": "function"
    },
    "test.wasm.unsafe.testAccessingWithDifferentTypes$<anonymous>$checkZero(Int, Pointer)": {
        "size": 6502,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testByte$lambda": {
        "size": 846,
        "type": "class"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testByte$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testByte$lambda.invoke(Pointer, Byte)": {
        "size": 103,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testByte$lambda.invoke(P1, P2)": {
        "size": 521,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testByte$lambda.invoke(Pointer)": {
        "size": 97,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testByte$lambda.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testShort$lambda": {
        "size": 852,
        "type": "class"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testShort$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testShort$lambda.invoke(Pointer, Short)": {
        "size": 105,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testShort$lambda.invoke(P1, P2)": {
        "size": 523,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testShort$lambda.invoke(Pointer)": {
        "size": 99,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testShort$lambda.invoke(P1)": {
        "size": 302,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testInt$lambda": {
        "size": 840,
        "type": "class"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testInt$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testInt$lambda.invoke(Pointer, Int)": {
        "size": 101,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testInt$lambda.invoke(P1, P2)": {
        "size": 519,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testInt$lambda.invoke(Pointer)": {
        "size": 95,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testInt$lambda.invoke(P1)": {
        "size": 300,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testLong$lambda": {
        "size": 846,
        "type": "class"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testLong$lambda.<init>()": {
        "size": 75,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testLong$lambda.invoke(Pointer, Long)": {
        "size": 103,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testLong$lambda.invoke(P1, P2)": {
        "size": 521,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testLong$lambda.invoke(Pointer)": {
        "size": 97,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest$testLong$lambda.invoke(P1)": {
        "size": 301,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest": {
        "size": 55219,
        "type": "class"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.<init>()": {
        "size": 67,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.testPointer()": {
        "size": 1335,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.testLoadStore(List<T>, Int, Function2<Pointer, T, Unit>, Function1<Pointer, T>)": {
        "size": 2662,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.testByte()": {
        "size": 880,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.testShort()": {
        "size": 926,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.testInt()": {
        "size": 932,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.testLong()": {
        "size": 1077,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.testAccessingWithDifferentTypes()": {
        "size": 45003,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAccessTestTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "test.wasm.unsafe.jsConcatStrings(JsString?, JsString?)": {
        "size": 98,
        "type": "function"
    },
    "test.wasm.unsafe.jsConcatStrings__externalAdapter(String, String)": {
        "size": 331,
        "type": "function"
    },
    "test.wasm.unsafe.testScopedAllocatorThrows$<anonymous>$foo()": {
        "size": 1269,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest": {
        "size": 73322,
        "type": "class"
    },
    "test.wasm.unsafe.MemoryAllocationTest.<init>()": {
        "size": 96,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.pageSize": {
        "size": 44,
        "type": "field"
    },
    "test.wasm.unsafe.MemoryAllocationTest.testWasmMemorySizeGrow()": {
        "size": 737,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.testScopedAllocator()": {
        "size": 10382,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.testScopedAllocatorGrowsMemory()": {
        "size": 4533,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.nestedAllocators()": {
        "size": 15195,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.testJsIntropInsideAllocations()": {
        "size": 1185,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.testNestedAllocatorThrows()": {
        "size": 26928,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.testScopedAllocatorThrows()": {
        "size": 10987,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.equals(Any?)": {
        "size": 63,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.hashCode()": {
        "size": 41,
        "type": "function"
    },
    "test.wasm.unsafe.MemoryAllocationTest.toString()": {
        "size": 44,
        "type": "function"
    },
    "kotlin.wasm.internal.fieldInit()": {
        "size": 18711,
        "type": "function"
    },
    "kotlin.wasm.internal.mainCallsWrapper()": {
        "size": 28,
        "type": "function"
    },
    "kotlin.wasm.internal.$closureBox$": {
        "size": 100,
        "type": "class"
    },
    "kotlin.wasm.internal.$closureBox$.v": {
        "size": 12,
        "type": "field"
    },
    "kotlin.wasm.internal.$closureBox$.<init>(Any?)": {
        "size": 56,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer()": {
        "size": 4216,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun$test1 test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun$test1 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun$test1 test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun$test2 test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun$test2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun$test2 test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun$testLookBehind test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun$testLookBehind test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun$testLookBehind test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun$testLookAheadBehind test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun$testLookAheadBehind test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun$testLookAheadBehind test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierGreedy test fun": {
        "size": 438,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierGreedy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierGreedy test fun.invoke()": {
        "size": 192,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierReluctant test fun": {
        "size": 444,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierReluctant test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierReluctant test fun.invoke()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierPossesive test fun": {
        "size": 444,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierPossesive test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$fixedLengthQualifierPossesive test fun.invoke()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$leafQuantifierGreedy test fun": {
        "size": 426,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$leafQuantifierGreedy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$leafQuantifierGreedy test fun.invoke()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt46211_space test fun": {
        "size": 412,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt46211_space test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt46211_space test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt46211 test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt46211 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt46211 test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt53352 test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt53352 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt53352 test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt35508 test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt35508 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun$kt35508 test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReplaceAll test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReplaceAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReplaceAll test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReplaceFirst test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReplaceFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReplaceFirst test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupint test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupint test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupint test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroup test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroup test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupPossessive test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupPossessive test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupPossessive test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testMatchesMisc test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testMatchesMisc test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testMatchesMisc test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testMatchesQuantifiers test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testMatchesQuantifiers test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testMatchesQuantifiers test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testQuantVsGroup test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testQuantVsGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testQuantVsGroup test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testFind test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testFind test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testFind test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testSEOLsymbols test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testSEOLsymbols test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testSEOLsymbols test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupCount test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupCount test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGroupCount test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReluctantQuantifiers test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReluctantQuantifiers test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testReluctantQuantifiers test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testEnhancedFind test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testEnhancedFind test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testEnhancedFind test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPosCompositeGroup test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPosCompositeGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPosCompositeGroup test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPosAltGroup test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPosAltGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPosAltGroup test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testRelCompGroup test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testRelCompGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testRelCompGroup test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testRelAltGroup test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testRelAltGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testRelAltGroup test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testIgnoreCase test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testIgnoreCase test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testQuoteReplacement test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testQuoteReplacement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testQuoteReplacement test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testOverFlow test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testOverFlow test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testOverFlow test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testUnicode test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testUnicode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testUnicode test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testUnicodeCategory test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testUnicodeCategory test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testUnicodeCategory test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testSplitEmpty test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testSplitEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testSplitEmpty test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testFindDollar test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testFindDollar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testFindDollar test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPatternMatcher test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPatternMatcher test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testPatternMatcher test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$test3360 test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$test3360 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$test3360 test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGeneralPunctuationCategory test fun": {
        "size": 416,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGeneralPunctuationCategory test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$testGeneralPunctuationCategory test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$test2297 test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$test2297 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$test2297 test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$kt28158 test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$kt28158 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun$kt28158 test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun$testErrorConditions2 test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun$testErrorConditions2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun$testErrorConditions2 test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun$testReplacementBackSlash test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun$testReplacementBackSlash test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun$testReplacementBackSlash test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun$testCase test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun$testCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun$testCase test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun$testMultiline test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun$testMultiline test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun$testMultiline test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternErrorTest test fun$testCompileErrors test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternErrorTest test fun$testCompileErrors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternErrorTest test fun$testCompileErrors test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun$testCase test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun$testCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun$testCase test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun$testCase2 test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun$testCase2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun$testCase2 test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCommentsInPattern test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCommentsInPattern test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCommentsInPattern test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitCharSequenceint test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitCharSequenceint test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitCharSequenceint test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFlags test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFlags test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFlags test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFlagsMethod test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFlagsMethod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFlagsMethod test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileStringint test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileStringint test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileStringint test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantCompileNeg test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantCompileNeg test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantCompileNeg test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantCompilePos test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantCompilePos test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantCompilePos test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantComposition test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantComposition test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantComposition test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testTimeZoneIssue test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testTimeZoneIssue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testTimeZoneIssue test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileRanges test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileRanges test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileRanges test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRangesSpecialCases test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRangesSpecialCases test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRangesSpecialCases test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testZeroSymbols test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testZeroSymbols test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testZeroSymbols test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEscapes test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEscapes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEscapes test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRegressions test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRegressions test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRegressions test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testOrphanQuantifiers test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testOrphanQuantifiers test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testOrphanQuantifiers test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testOrphanQuantifiers2 test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testOrphanQuantifiers2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testOrphanQuantifiers2 test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testBug197 test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testBug197 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testBug197 test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testURIPatterns test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testURIPatterns test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testURIPatterns test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases1 test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases1 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases1 test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases2 test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases2 test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases3 test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases3 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases3 test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases4 test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases4 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases4 test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases5 test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases5 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases5 test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases6 test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases6 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindBoundaryCases6 test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testBackReferences test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testBackReferences test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testBackReferences test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testNewLine test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testNewLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testNewLine test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindGreedy test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindGreedy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFindGreedy test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSOLQuant test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSOLQuant test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSOLQuant test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testIllegalEscape test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testIllegalEscape test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testIllegalEscape test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmptyFamily test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmptyFamily test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmptyFamily test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testNonCaptConstr test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testNonCaptConstr test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testNonCaptConstr test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompilePatternWithTerminatorMark test fun": {
        "size": 416,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompilePatternWithTerminatorMark test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompilePatternWithTerminatorMark test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAlternations test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAlternations test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAlternations test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testMatchWithGroups test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testMatchWithGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testMatchWithGroups test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitEmptyCharSequence test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitEmptyCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitEmptyCharSequence test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitEndsWithPattern test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitEndsWithPattern test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSplitEndsWithPattern test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCaseInsensitiveFlag test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCaseInsensitiveFlag test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCaseInsensitiveFlag test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmptyGroups test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmptyGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmptyGroups test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileNonCaptGroup test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileNonCaptGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCompileNonCaptGroup test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmbeddedFlags test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmbeddedFlags test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testEmbeddedFlags test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAltWithFlags test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAltWithFlags test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAltWithFlags test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRestoreFlagsAfterGroup test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRestoreFlagsAfterGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRestoreFlagsAfterGroup test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCanonEqFlag test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCanonEqFlag test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCanonEqFlag test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testIndexesCanonicalEq test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testIndexesCanonicalEq test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testIndexesCanonicalEq test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCanonEqFlagWithSupplementaryCharacters test fun": {
        "size": 428,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCanonEqFlagWithSupplementaryCharacters test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testCanonEqFlagWithSupplementaryCharacters test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRangesWithSurrogatesSupplementary test fun": {
        "size": 418,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRangesWithSurrogatesSupplementary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testRangesWithSurrogatesSupplementary test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSequencesWithSurrogatesSupplementary test fun": {
        "size": 424,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSequencesWithSurrogatesSupplementary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testSequencesWithSurrogatesSupplementary test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testPredefinedClassesWithSurrogatesSupplementary test fun": {
        "size": 440,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testPredefinedClassesWithSurrogatesSupplementary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testPredefinedClassesWithSurrogatesSupplementary test fun.invoke()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testDotConstructionWithSurrogatesSupplementary test fun": {
        "size": 436,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testDotConstructionWithSurrogatesSupplementary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testDotConstructionWithSurrogatesSupplementary test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantifiersWithSurrogatesSupplementary test fun": {
        "size": 428,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantifiersWithSurrogatesSupplementary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testQuantifiersWithSurrogatesSupplementary test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAlternationsWithSurrogatesSupplementary test fun": {
        "size": 430,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAlternationsWithSurrogatesSupplementary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testAlternationsWithSurrogatesSupplementary test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testGroupsWithSurrogatesSupplementary test fun": {
        "size": 418,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testGroupsWithSurrogatesSupplementary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testGroupsWithSurrogatesSupplementary test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFailedFindDotQuantifier test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFailedFindDotQuantifier test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testFailedFindDotQuantifier test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testVerticalWhitespaceChar test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testVerticalWhitespaceChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testVerticalWhitespaceChar test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testHorizontalWhitespaceChar test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testHorizontalWhitespaceChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testHorizontalWhitespaceChar test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testUnicodeLinebreakChar test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testUnicodeLinebreakChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun$testUnicodeLinebreakChar test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testSimpleMatch test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testSimpleMatch test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testSimpleMatch test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCursors test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCursors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCursors test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testGroups test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testGroups test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testReplace test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testReplace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testReplace test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testEscapes test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testEscapes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testEscapes test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCharacterClasses test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCharacterClasses test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCharacterClasses test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testPOSIXGroups test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testPOSIXGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testPOSIXGroups test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testUnicodeCategories test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testUnicodeCategories test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testUnicodeCategories test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testUnicodeBlocks test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testUnicodeBlocks test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testUnicodeBlocks test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCapturingGroups test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCapturingGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCapturingGroups test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testRepeats test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testRepeats test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testRepeats test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testAnchors test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testAnchors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testAnchors test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testMisc test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testMisc test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testMisc test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile1 test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile1 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile1 test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile2 test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile2 test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile3 test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile3 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile3 test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile4 test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile4 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile4 test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile5 test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile5 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun$testCompile5 test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$escapeStringInCommentsMode test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$escapeStringInCommentsMode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$escapeStringInCommentsMode test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$specialConstructsInCommentsMode test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$specialConstructsInCommentsMode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$specialConstructsInCommentsMode test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$matchNamedGroupInCommentsMode test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$matchNamedGroupInCommentsMode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$matchNamedGroupInCommentsMode test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$matchBackReferenceInCommentsMode test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$matchBackReferenceInCommentsMode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun$matchBackReferenceInCommentsMode test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testSimpleReplace test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testSimpleReplace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testSimpleReplace test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testCaptureReplace test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testCaptureReplace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testCaptureReplace test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testEscapeReplace test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testEscapeReplace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun$testEscapeReplace test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSimple test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSimple test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSimple test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplit1 test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplit1 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplit1 test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplit2 test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplit2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplit2 test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplitSupplementaryWithEmptyString test fun": {
        "size": 412,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplitSupplementaryWithEmptyString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun$testSplitSupplementaryWithEmptyString test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun": {
        "size": 743,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$AllCodePointsTest test fun.invoke()": {
        "size": 414,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun": {
        "size": 771,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FindAllTest test fun.invoke()": {
        "size": 448,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun": {
        "size": 2205,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$FixedLengthQuantifierTest test fun.invoke()": {
        "size": 1808,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun": {
        "size": 6650,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest test fun.invoke()": {
        "size": 6053,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun": {
        "size": 808,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$MatchResultTest2 test fun.invoke()": {
        "size": 480,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun": {
        "size": 738,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ModeTest test fun.invoke()": {
        "size": 418,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternErrorTest test fun": {
        "size": 566,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternErrorTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternErrorTest test fun.invoke()": {
        "size": 248,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun": {
        "size": 784,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternSyntaxExceptionTest test fun.invoke()": {
        "size": 446,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun": {
        "size": 13119,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest test fun.invoke()": {
        "size": 12256,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun": {
        "size": 4132,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest2 test fun.invoke()": {
        "size": 3648,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun": {
        "size": 1312,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$PatternTest3 test fun.invoke()": {
        "size": 968,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun": {
        "size": 992,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$ReplaceTest test fun.invoke()": {
        "size": 659,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun": {
        "size": 1195,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun$SplitTest test fun.invoke()": {
        "size": 854,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun": {
        "size": 2828,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text.harmony_regex test fun.invoke()": {
        "size": 2416,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$success test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$success test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$success test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$closeFails test fun": {
        "size": 410,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$closeFails test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$closeFails test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseSuccess test fun": {
        "size": 428,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseSuccess test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseSuccess test fun.invoke()": {
        "size": 191,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseFails test fun": {
        "size": 424,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseFails test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseFails test fun.invoke()": {
        "size": 189,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseFailsTwice test fun": {
        "size": 434,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseFailsTwice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$opFailsCloseFailsTwice test fun.invoke()": {
        "size": 194,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nonLocalReturnInBlock test fun": {
        "size": 432,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nonLocalReturnInBlock test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nonLocalReturnInBlock test fun.invoke()": {
        "size": 193,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nullableResourceSuccess test fun": {
        "size": 436,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nullableResourceSuccess test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nullableResourceSuccess test fun.invoke()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nullableResourceOpFails test fun": {
        "size": 436,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nullableResourceOpFails test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$nullableResourceOpFails test fun.invoke()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$contractCallsInPlace test fun": {
        "size": 430,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$contractCallsInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun$contractCallsInPlace test fun.invoke()": {
        "size": 192,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun": {
        "size": 2430,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun$UseAutoCloseableResourceTest test fun.invoke()": {
        "size": 2025,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun": {
        "size": 528,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.autoCloseable test fun.invoke()": {
        "size": 241,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractCollection test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractCollection test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractSet test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractSet test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractList test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractList test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMap test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMap test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableCollection test fun": {
        "size": 423,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableCollection test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableList test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableList test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableSet test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableSet test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableMap test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun$abstractMutableMap test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractListTest test fun$newCapacity test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractListTest test fun$newCapacity test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractListTest test fun$newCapacity test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$arrayDequeInit test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$arrayDequeInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$arrayDequeInit test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$size test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$size test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$size test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$contains test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$contains test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$clear test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$clear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$clear test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeElement test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeElement test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$iterator test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$iterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$iterator test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$first test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$first test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$firstOrNull test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$firstOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$firstOrNull test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$last test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$last test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$lastOrNull test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$lastOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$lastOrNull test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addFirst test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addFirst test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addLast test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addLast test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeFirst test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeFirst test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeFirstOrNull test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeFirstOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeFirstOrNull test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeLast test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeLast test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeLastOrNull test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeLastOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeLastOrNull test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$bufferExpansion test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$bufferExpansion test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$bufferExpansion test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$insert test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$insert test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$insert test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeAt test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeAt test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$indexOf test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$indexOf test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addAll test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$addAll test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$insertAll test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$insertAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$insertAll test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$listIterator test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$listIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$listIterator test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeAll test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$removeAll test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$retainAll test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$retainAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$retainAll test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$set test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$set test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$set test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$get test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$get test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$get test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$subList test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$subList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$subList test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$toArray test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$toArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun$toArray test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$orEmptyNull test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$orEmptyNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$orEmptyNull test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$orEmptyNotNull test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$orEmptyNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$orEmptyNotNull test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$emptyArrayLastIndex test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$emptyArrayLastIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$emptyArrayLastIndex test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$arrayLastIndex test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$arrayLastIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$arrayLastIndex test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$byteArray test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$byteArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$byteArray test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$byteArrayInit test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$byteArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$byteArrayInit test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shortArray test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shortArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shortArray test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shortArrayInit test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shortArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shortArrayInit test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$intArray test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$intArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$intArray test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$intArrayInit test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$intArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$intArrayInit test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$longArray test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$longArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$longArray test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$longArrayInit test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$longArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$longArrayInit test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$floatArray test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$floatArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$floatArray test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$floatArrayInit test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$floatArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$floatArrayInit test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$doubleArray test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$doubleArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$doubleArray test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$doubleArrayInit test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$doubleArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$doubleArrayInit test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$charArray test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$charArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$charArray test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$charArrayInit test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$charArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$charArrayInit test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$booleanArray test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$booleanArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$booleanArray test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$booleanArrayInit test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$booleanArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$booleanArrayInit test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentEquals test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentEquals test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepEquals test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepEquals test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentToString test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentToString test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepToString test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepToString test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepToStringNoRecursion test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepToStringNoRecursion test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepToStringNoRecursion test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentHashCode test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentHashCode test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepHashCode test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contentDeepHashCode test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$joinToString test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$joinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$joinToString test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minOrNull test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minOrNull test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minOrNullInPrimitiveArrays test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minOrNullInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minOrNullInPrimitiveArrays test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxOrNull test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxOrNull test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxOrNullInPrimitiveArrays test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxOrNullInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxOrNullInPrimitiveArrays test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minWithOrNull test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minWithOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minWithOrNull test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minWithOrNullInPrimitiveArrays test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minWithOrNullInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minWithOrNullInPrimitiveArrays test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxWithOrNull test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxWithOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxWithOrNull test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxWithOrNullInPrimitiveArrays test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxWithOrNullInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxWithOrNullInPrimitiveArrays test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByOrNull test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByOrNull test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByOrNullInPrimitiveArrays test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByOrNullInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByOrNullInPrimitiveArrays test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByOrNull test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByOrNull test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByOrNullInPrimitiveArrays test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByOrNullInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByOrNullInPrimitiveArrays test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minIndex test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minIndex test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxIndex test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxIndex test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByEvaluateOnce test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByEvaluateOnce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$minByEvaluateOnce test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByEvaluateOnce test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByEvaluateOnce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$maxByEvaluateOnce test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sum test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sum test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sum test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sumInPrimitiveArrays test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sumInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sumInPrimitiveArrays test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$average test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$average test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$average test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$indexOfInPrimitiveArrays test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$indexOfInPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$indexOfInPrimitiveArrays test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$indexOf test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$indexOf test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$lastIndexOf test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$lastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$lastIndexOf test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$isEmpty test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$isEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$isEmpty test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$isNotEmpty test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$isNotEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$isNotEmpty test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusInference test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusInference test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusInference test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plus test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plus test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plus test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusVararg test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusVararg test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusVararg test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusAssign test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$plusAssign test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$first test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$first test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$last test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$last test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$random test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$random test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$random test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$randomOrNull test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$randomOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$randomOrNull test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contains test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$contains test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$slice test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$slice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$slice test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sliceArray test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sliceArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sliceArray test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$iterators test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$iterators test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$iterators test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asIterable test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asIterable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asIterable test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asList test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asList test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListInFloatingPrimitiveArrays test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListInFloatingPrimitiveArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListInFloatingPrimitiveArrays test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$toPrimitiveArray test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$toPrimitiveArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$toPrimitiveArray test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$toTypedArray test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$toTypedArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$toTypedArray test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyOf test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyOf test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyAndResize test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyAndResize test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyAndResize test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyOfRange test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyOfRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyOfRange test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyRangeInto test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyRangeInto test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyRangeInto test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyRangeIntoVarianceTest test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyRangeIntoVarianceTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$copyRangeIntoVarianceTest test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceIndexed test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceIndexed test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceIndexedOrNull test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceIndexedOrNull test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightIndexed test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightIndexed test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightIndexedOrNull test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightIndexedOrNull test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduce test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduce test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceOrNull test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceOrNull test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRight test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRight test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRight test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightOrNull test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reduceRightOrNull test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$scan test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$scan test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningFold test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningFold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningFold test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$scanIndexed test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$scanIndexed test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningFoldIndexed test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningFoldIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningFoldIndexed test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningReduce test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningReduce test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningReduceIndexed test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWith test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWith test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWithPrimitives test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWithPrimitives test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWithPrimitives test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWithToPrimitives test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWithToPrimitives test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$associateWithToPrimitives test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reverseInPlace test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reverseInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reverseInPlace test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reverseRangeInPlace test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reverseRangeInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reverseRangeInPlace test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reversed test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reversed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reversed test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reversedArray test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reversedArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$reversedArray test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$onEach test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$onEach test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$onEachIndexed test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$onEachIndexed test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$drop test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$drop test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropLast test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropLast test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropWhile test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropWhile test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropLastWhile test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropLastWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$dropLastWhile test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$take test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$take test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$take test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeLast test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeLast test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeWhile test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeWhile test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeLastWhile test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeLastWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$takeLastWhile test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filter test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filter test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterIndexed test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterIndexed test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterNot test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterNot test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterNotNull test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$filterNotNull test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$map test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$map test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapIndexed test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapIndexed test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapNotNull test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapNotNull test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapIndexedNotNull test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapIndexedNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$mapIndexedNotNull test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flatMap test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flatMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flatMap test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flatMapIndexed test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flatMapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flatMapIndexed test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flattenArray test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flattenArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$flattenArray test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListPrimitives test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListPrimitives test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListPrimitives test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListObjects test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListObjects test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$asListObjects test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sort test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sort test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sort test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortRange test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortRange test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortDescendingRangeInPlace test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortDescendingRangeInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortDescendingRangeInPlace test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedTests test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedTests test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedTests test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortStable test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortStable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortStable test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortByInPlace test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortByInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortByInPlace test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedBy test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedBy test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortByStable test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortByStable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortByStable test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedNullableBy test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedNullableBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedNullableBy test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedWith test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$sortedWith test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shuffle test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shuffle test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shuffle test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shufflePredictably test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shufflePredictably test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$shufflePredictably test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$elementAt test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$elementAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$elementAt test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$fill test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$fill test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun$fill test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$createListWithInit test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$createListWithInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$createListWithInit test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$joinTo test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$joinTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$joinTo test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$joinToString test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$joinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$joinToString test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterNotNull test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterNotNull test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$flatMap test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$flatMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$flatMap test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$flatMapIndexed test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$flatMapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$flatMapIndexed test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$listOfNotNull test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$listOfNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$listOfNotNull test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$setOfNotNull test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$setOfNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$setOfNotNull test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIntoSet test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIntoSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIntoSet test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIsInstanceList test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIsInstanceList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIsInstanceList test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIsInstanceArray test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIsInstanceArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$filterIsInstanceArray test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexed test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexed test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexedWithDifferentTypes test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexedWithDifferentTypes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexedWithDifferentTypes test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexedWithNonCommutativeOperation test fun": {
        "size": 422,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexedWithNonCommutativeOperation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldIndexedWithNonCommutativeOperation test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexed test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexed test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexedWithDifferentTypes test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexedWithDifferentTypes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexedWithDifferentTypes test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexedWithNonCommutativeOperation test fun": {
        "size": 432,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexedWithNonCommutativeOperation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightIndexedWithNonCommutativeOperation test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$fold test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$fold test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldWithDifferentTypes test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldWithDifferentTypes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldWithDifferentTypes test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldWithNonCommutativeOperation test fun": {
        "size": 408,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldWithNonCommutativeOperation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldWithNonCommutativeOperation test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRight test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRight test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRight test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightWithDifferentTypes test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightWithDifferentTypes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightWithDifferentTypes test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightWithNonCommutativeOperation test fun": {
        "size": 418,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightWithNonCommutativeOperation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$foldRightWithNonCommutativeOperation test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$zipTransform test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$zipTransform test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$zipTransform test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$zip test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$zip test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$zip test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$partition test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$partition test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$partition test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceIndexed test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceIndexed test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceIndexedOrNull test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceIndexedOrNull test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightIndexed test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightIndexed test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightIndexedOrNull test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightIndexedOrNull test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduce test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduce test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceOrNull test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceOrNull test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRight test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRight test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRight test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightOrNull test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reduceRightOrNull test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$scan test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$scan test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$scanIndexed test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$scanIndexed test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$runningReduce test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$runningReduce test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$runningReduceIndexed test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$groupBy test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$groupBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$groupBy test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$groupByKeysAndValues test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$groupByKeysAndValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$groupByKeysAndValues test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$associateWith test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$associateWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$associateWith test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusRanges test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusRanges test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusRanges test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$mapRanges test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$mapRanges test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$mapRanges test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusElement test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusElement test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollection test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollection test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusArray test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusArray test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusSequence test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusSequence test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollectionBug test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollectionBug test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollectionBug test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollectionInference test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollectionInference test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusCollectionInference test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusAssign test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$plusAssign test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusElement test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusElement test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusCollection test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusCollection test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusArray test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusArray test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusSequence test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusSequence test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusIsEager test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusIsEager test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusIsEager test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusAssign test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minusAssign test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$requireNoNulls test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$requireNoNulls test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$requireNoNulls test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reverseInPlace test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reverseInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reverseInPlace test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reversed test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reversed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$reversed test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$drop test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$drop test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropWhile test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropWhile test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropLast test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropLast test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropLastWhile test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropLastWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$dropLastWhile test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$take test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$take test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$take test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeWhile test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeWhile test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeLast test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeLast test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeLastWhile test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeLastWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeLastWhile test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$copyToArray test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$copyToArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$copyToArray test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$count test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$count test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$first test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$first test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$last test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$last test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$random test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$random test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$random test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$randomOrNull test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$randomOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$randomOrNull test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$subscript test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$subscript test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$subscript test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$indices test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$indices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$indices test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$contains test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$contains test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOrNull test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOrNull test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$max test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$max test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$max test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minWithOrNull test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minWithOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minWithOrNull test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxWithOrNull test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxWithOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxWithOrNull test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minByOrNull test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minByOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minByOrNull test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxByOrNull test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxByOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxByOrNull test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minByOrNullEvaluateOnce test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minByOrNullEvaluateOnce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minByOrNullEvaluateOnce test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxByOrNullEvaluateOnce test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxByOrNullEvaluateOnce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxByOrNullEvaluateOnce test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOf test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOf test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOfWith test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOfWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$minOfWith test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxOf test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxOf test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxOfWith test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxOfWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$maxOfWith test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sum test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sum test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sum test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sumOf test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sumOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sumOf test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$average test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$average test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$average test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeReturnsFirstNElements test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeReturnsFirstNElements test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$takeReturnsFirstNElements test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortInPlace test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortInPlace test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sorted test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sorted test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sorted test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortByInPlace test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortByInPlace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortByInPlace test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortStable test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortStable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortStable test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedBy test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedBy test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedNullableBy test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedNullableBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedNullableBy test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedByNullable test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedByNullable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedByNullable test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedWith test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortedWith test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortByStable test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortByStable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$sortByStable test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$shuffled test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$shuffled test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$shuffled test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$shuffledPredictably test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$shuffledPredictably test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$shuffledPredictably test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeFirst test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeFirst test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeSplit test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeSplit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeSplit test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeList test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeList test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeArray test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeArray test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeIntArray test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeIntArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$decomposeIntArray test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$unzipList test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$unzipList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$unzipList test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$unzipArray test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$unzipArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$unzipArray test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialLists test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialLists test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialLists test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialSets test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialSets test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialSets test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialMaps test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialMaps test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$specialMaps test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$toStringTest test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$toStringTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$toStringTest test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$randomAccess test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$randomAccess test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$randomAccess test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$abstractCollectionToArray test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$abstractCollectionToArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$abstractCollectionToArray test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$ensureCapacity test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$ensureCapacity test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$ensureCapacity test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$constructorWithCapacity test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$constructorWithCapacity test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun$constructorWithCapacity test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildList test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildList test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildEmptyList test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildEmptyList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildEmptyList test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$listBuilderSubList test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$listBuilderSubList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$listBuilderSubList test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildSet test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildSet test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildEmptySet test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildEmptySet test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildMap test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$buildMap test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$testBuildEmptyMap test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$testBuildEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun$testBuildEmptyMap test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$groupingProducers test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$groupingProducers test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$groupingProducers test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$foldWithConstantInitialValue test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$foldWithConstantInitialValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$foldWithConstantInitialValue test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$foldWithComputedInitialValue test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$foldWithComputedInitialValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$foldWithComputedInitialValue test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$reduce test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$reduce test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$countEach test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$countEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun$countEach test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOf test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOf test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$lastIndexOf test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$lastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$lastIndexOf test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOfFirst test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOfFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOfFirst test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOfLast test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOfLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$indexOfLast test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$elementAt test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$elementAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$elementAt test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$first test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$first test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$firstOrNull test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$firstOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$firstOrNull test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$last test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$last test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$lastOrNull test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$lastOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$lastOrNull test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$zipWithNext test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$zipWithNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$zipWithNext test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$zipWithNextPairs test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$zipWithNextPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$zipWithNextPairs test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$chunked test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$chunked test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$chunked test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$windowed test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$windowed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$windowed test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$any test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$any test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$any test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$all test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$all test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$all test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$none test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$none test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$none test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filter test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filter test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filterIndexed test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filterIndexed test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$drop test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$drop test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$dropWhile test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$dropWhile test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filterNot test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$filterNot test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$forEach test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$forEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$forEach test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$onEach test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$onEach test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$onEachIndexed test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$onEachIndexed test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$contains test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$contains test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$single test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$single test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$single test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$singleOrNull test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$singleOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$singleOrNull test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$map test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$map test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$flatten test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$flatten test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$flatten test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapIndexed test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapIndexed test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$withIndex test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$withIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$withIndex test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapNotNull test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapNotNull test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapIndexedNotNull test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapIndexedNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapIndexedNotNull test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$maxOrNull test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$maxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$maxOrNull test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minOrNull test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minOrNull test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$count test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$count test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$sumBy test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$sumBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$sumBy test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$withIndices test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$withIndices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$withIndices test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$fold test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$fold test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$reduce test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$reduce test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$scan test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$scan test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$scanIndexed test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$scanIndexed test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$runningReduce test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$runningReduce test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$runningReduceIndexed test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapAndJoinToString test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapAndJoinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$mapAndJoinToString test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusElement test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusElement test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusCollection test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusCollection test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusArray test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusArray test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusSequence test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusSequence test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusAssign test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$plusAssign test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusElement test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusElement test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusCollection test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusCollection test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusArray test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusArray test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusSequence test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusSequence test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusAssign test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun$minusAssign test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$any test fun": {
        "size": 331,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$any test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$any test fun.invoke()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$all test fun": {
        "size": 331,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$all test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$all test fun.invoke()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$none test fun": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$none test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$none test fun.invoke()": {
        "size": 134,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filter test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filter test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filterIndexed test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filterIndexed test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$drop test fun": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$drop test fun.invoke()": {
        "size": 134,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$dropWhile test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$dropWhile test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filterNot test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$filterNot test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$forEach test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$forEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$forEach test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$onEach test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$onEach test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$onEachIndexed test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$onEachIndexed test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$contains test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$contains test fun.invoke()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$single test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$single test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$single test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$singleOrNull test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$singleOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$singleOrNull test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$map test fun": {
        "size": 331,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$map test fun.invoke()": {
        "size": 133,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$flatten test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$flatten test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$flatten test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapIndexed test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapIndexed test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$withIndex test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$withIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$withIndex test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapNotNull test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapNotNull test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapIndexedNotNull test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapIndexedNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapIndexedNotNull test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$maxOrNull test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$maxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$maxOrNull test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minOrNull test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minOrNull test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$count test fun": {
        "size": 335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$count test fun.invoke()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$sumBy test fun": {
        "size": 335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$sumBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$sumBy test fun.invoke()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$withIndices test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$withIndices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$withIndices test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$fold test fun": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$fold test fun.invoke()": {
        "size": 134,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$reduce test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$reduce test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$scan test fun": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$scan test fun.invoke()": {
        "size": 134,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$scanIndexed test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$scanIndexed test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$runningReduce test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$runningReduce test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$runningReduceIndexed test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapAndJoinToString test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapAndJoinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$mapAndJoinToString test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusElement test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusElement test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusCollection test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusCollection test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusArray test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusArray test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusSequence test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusSequence test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusAssign test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$plusAssign test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusElement test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusElement test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusCollection test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusCollection test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusArray test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusArray test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusSequence test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusSequence test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusAssign test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun$minusAssign test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOf test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOf test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$lastIndexOf test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$lastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$lastIndexOf test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOfFirst test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOfFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOfFirst test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOfLast test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOfLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$indexOfLast test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$elementAt test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$elementAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$elementAt test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$first test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$first test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$firstOrNull test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$firstOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$firstOrNull test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$last test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$last test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$lastOrNull test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$lastOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$lastOrNull test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$zipWithNext test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$zipWithNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$zipWithNext test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$zipWithNextPairs test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$zipWithNextPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$zipWithNextPairs test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$chunked test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$chunked test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$chunked test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$windowed test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$windowed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$windowed test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$any test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$any test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$any test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$all test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$all test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$all test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$none test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$none test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$none test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filter test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filter test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filterIndexed test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filterIndexed test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$drop test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$drop test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$dropWhile test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$dropWhile test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filterNot test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$filterNot test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$forEach test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$forEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$forEach test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$onEach test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$onEach test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$onEachIndexed test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$onEachIndexed test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$contains test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$contains test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$single test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$single test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$single test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$singleOrNull test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$singleOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$singleOrNull test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$map test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$map test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$flatten test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$flatten test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$flatten test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapIndexed test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapIndexed test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$withIndex test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$withIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$withIndex test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapNotNull test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapNotNull test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapIndexedNotNull test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapIndexedNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapIndexedNotNull test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$maxOrNull test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$maxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$maxOrNull test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minOrNull test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minOrNull test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$count test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$count test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$sumBy test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$sumBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$sumBy test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$withIndices test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$withIndices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$withIndices test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$fold test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$fold test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$reduce test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$reduce test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$scan test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$scan test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$scanIndexed test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$scanIndexed test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$runningReduce test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$runningReduce test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$runningReduceIndexed test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapAndJoinToString test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapAndJoinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$mapAndJoinToString test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusElement test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusElement test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusCollection test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusCollection test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusArray test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusArray test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusSequence test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusSequence test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusAssign test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$plusAssign test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusElement test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusElement test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusCollection test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusCollection test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusArray test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusArray test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusSequence test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusSequence test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusAssign test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun$minusAssign test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOf test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOf test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$lastIndexOf test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$lastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$lastIndexOf test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOfFirst test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOfFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOfFirst test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOfLast test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOfLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$indexOfLast test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$elementAt test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$elementAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$elementAt test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$first test fun": {
        "size": 338,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$first test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$firstOrNull test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$firstOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$firstOrNull test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$last test fun": {
        "size": 336,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$last test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$lastOrNull test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$lastOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$lastOrNull test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$zipWithNext test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$zipWithNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$zipWithNext test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$zipWithNextPairs test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$zipWithNextPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$zipWithNextPairs test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$chunked test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$chunked test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$chunked test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$windowed test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$windowed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$windowed test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$any test fun": {
        "size": 334,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$any test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$any test fun.invoke()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$all test fun": {
        "size": 334,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$all test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$all test fun.invoke()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$none test fun": {
        "size": 336,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$none test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$none test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filter test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filter test fun.invoke()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filterIndexed test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filterIndexed test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$drop test fun": {
        "size": 336,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$drop test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$dropWhile test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$dropWhile test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filterNot test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$filterNot test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$forEach test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$forEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$forEach test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$onEach test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$onEach test fun.invoke()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$onEachIndexed test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$onEachIndexed test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$contains test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$contains test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$single test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$single test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$single test fun.invoke()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$singleOrNull test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$singleOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$singleOrNull test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$map test fun": {
        "size": 334,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$map test fun.invoke()": {
        "size": 135,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$flatten test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$flatten test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$flatten test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapIndexed test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapIndexed test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$withIndex test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$withIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$withIndex test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapNotNull test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapNotNull test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapIndexedNotNull test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapIndexedNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapIndexedNotNull test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$maxOrNull test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$maxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$maxOrNull test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minOrNull test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minOrNull test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$count test fun": {
        "size": 338,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$count test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$sumBy test fun": {
        "size": 338,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$sumBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$sumBy test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$withIndices test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$withIndices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$withIndices test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$fold test fun": {
        "size": 336,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$fold test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$reduce test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$reduce test fun.invoke()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$scan test fun": {
        "size": 336,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$scan test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$scanIndexed test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$scanIndexed test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$runningReduce test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$runningReduce test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$runningReduceIndexed test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapAndJoinToString test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapAndJoinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$mapAndJoinToString test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusElement test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusElement test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusCollection test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusCollection test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusArray test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusArray test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusSequence test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusSequence test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusAssign test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$plusAssign test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusElement test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusElement test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusCollection test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusCollection test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusArray test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusArray test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusSequence test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusSequence test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusAssign test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun$minusAssign test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOf test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOf test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$lastIndexOf test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$lastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$lastIndexOf test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOfFirst test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOfFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOfFirst test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOfLast test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOfLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$indexOfLast test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$elementAt test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$elementAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$elementAt test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$first test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$first test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$firstOrNull test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$firstOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$firstOrNull test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$last test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$last test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$lastOrNull test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$lastOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$lastOrNull test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$zipWithNext test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$zipWithNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$zipWithNext test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$zipWithNextPairs test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$zipWithNextPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$zipWithNextPairs test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$chunked test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$chunked test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$chunked test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$windowed test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$windowed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$windowed test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$any test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$any test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$any test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$all test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$all test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$all test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$none test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$none test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$none test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filter test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filter test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filterIndexed test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filterIndexed test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$drop test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$drop test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$dropWhile test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$dropWhile test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filterNot test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$filterNot test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$forEach test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$forEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$forEach test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$onEach test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$onEach test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$onEachIndexed test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$onEachIndexed test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$contains test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$contains test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$single test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$single test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$single test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$singleOrNull test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$singleOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$singleOrNull test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$map test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$map test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$flatten test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$flatten test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$flatten test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapIndexed test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapIndexed test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$withIndex test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$withIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$withIndex test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapNotNull test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapNotNull test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapIndexedNotNull test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapIndexedNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapIndexedNotNull test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$maxOrNull test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$maxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$maxOrNull test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minOrNull test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minOrNull test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$count test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$count test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$sumBy test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$sumBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$sumBy test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$withIndices test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$withIndices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$withIndices test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$fold test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$fold test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$reduce test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$reduce test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$scan test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$scan test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$scanIndexed test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$scanIndexed test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$runningReduce test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$runningReduce test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$runningReduceIndexed test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapAndJoinToString test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapAndJoinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$mapAndJoinToString test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusElement test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusElement test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusCollection test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusCollection test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusArray test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusArray test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusSequence test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusSequence test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusAssign test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$plusAssign test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusElement test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusElement test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusCollection test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusCollection test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusArray test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusArray test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusSequence test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusSequence test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusAssign test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun$minusAssign test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IteratorsTest test fun$iterationOverIterator test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IteratorsTest test fun$iterationOverIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IteratorsTest test fun$iterationOverIterator test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$_toString test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$_toString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$_toString test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$tail test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$tail test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$tail test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$slice test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$slice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$slice test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$getOr test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$getOr test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$getOr test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$lastIndex test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$lastIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$lastIndex test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$indexOfLast test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$indexOfLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$indexOfLast test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$mutableList test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$mutableList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$mutableList test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$testNullToString test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$testNullToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun$testNullToString test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$addAll test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$addAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$addAll test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$addAllAtIndex test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$addAllAtIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$addAllAtIndex test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeFirst test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeFirst test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeLast test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeLast test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeAll test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$removeAll test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$retainAll test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$retainAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$retainAll test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$listFill test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$listFill test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$listFill test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$shuffle test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$shuffle test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$shuffle test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$shufflePredictably test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$shufflePredictably test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun$shufflePredictably test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testNullToString test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testNullToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testNullToString test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testBehavior test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testBehavior test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testBehavior test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableBehavior test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableBehavior test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableBehavior test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testSimple test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testSimple test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testSimple test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testRandomAccess test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testRandomAccess test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testRandomAccess test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testDoubleReverse test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testDoubleReverse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testDoubleReverse test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testEmpty test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testEmpty test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testReversedSubList test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testReversedSubList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testReversedSubList test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSubList test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSubList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSubList test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSimple test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSimple test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSimple test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableDoubleReverse test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableDoubleReverse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableDoubleReverse test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableEmpty test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableEmpty test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableReversedSubList test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableReversedSubList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableReversedSubList test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableAdd test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableAdd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableAdd test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSet test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableSet test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableRemove test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableRemove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableRemove test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableRemoveByObj test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableRemoveByObj test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableRemoveByObj test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableClear test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableClear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testMutableClear test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testContains test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testContains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testContains test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testBidirectionalModifications test fun": {
        "size": 415,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testBidirectionalModifications test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testBidirectionalModifications test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIndexOf test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIndexOf test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testLastIndexOf test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testLastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testLastIndexOf test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorAdd test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorAdd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorAdd test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorRemove test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorRemove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorRemove test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorSet test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorSet test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testGetIOOB test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testGetIOOB test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testGetIOOB test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testSetIOOB test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testSetIOOB test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testSetIOOB test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testAddIOOB test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testAddIOOB test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testAddIOOB test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testRemoveIOOB test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testRemoveIOOB test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testRemoveIOOB test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorNSEOnNext test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorNSEOnNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorNSEOnNext test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorNSEOnPrevious test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorNSEOnPrevious test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun$testIteratorNSEOnPrevious test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterEmptySequence test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterEmptySequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterEmptySequence test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapEmptySequence test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapEmptySequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapEmptySequence test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$requireNoNulls test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$requireNoNulls test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$requireNoNulls test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterIndexed test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterIndexed test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNullable test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNullable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNullable test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNot test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNot test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNotNull test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterNotNull test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapIndexed test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapIndexed test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapNotNull test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapNotNull test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapIndexedNotNull test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapIndexedNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapIndexedNotNull test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapAndJoinToString test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapAndJoinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapAndJoinToString test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$withIndex test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$withIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$withIndex test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$onEach test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$onEach test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$onEachIndexed test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$onEachIndexed test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterAndTakeWhileExtractTheElementsWithinRange test fun": {
        "size": 434,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterAndTakeWhileExtractTheElementsWithinRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$filterAndTakeWhileExtractTheElementsWithinRange test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$foldReducesTheFirstNElements test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$foldReducesTheFirstNElements test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$foldReducesTheFirstNElements test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$takeExtractsTheFirstNElements test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$takeExtractsTheFirstNElements test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$takeExtractsTheFirstNElements test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapAndTakeWhileExtractTheTransformedElements test fun": {
        "size": 428,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapAndTakeWhileExtractTheTransformedElements test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$mapAndTakeWhileExtractTheTransformedElements test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$joinConcatenatesTheFirstNElementsAboveAThreshold test fun": {
        "size": 436,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$joinConcatenatesTheFirstNElementsAboveAThreshold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$joinConcatenatesTheFirstNElementsAboveAThreshold test fun.invoke()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$scan test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$scan test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$scanIndexed test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$scanIndexed test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$runningReduce test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$runningReduce test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$runningReduceIndexed test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$drop test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$drop test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$take test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$take test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$take test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$subSequence test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$subSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$subSequence test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$dropWhile test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$dropWhile test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zipWithNext test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zipWithNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zipWithNext test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zipWithNextPairs test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zipWithNextPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zipWithNextPairs test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$chunked test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$chunked test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$chunked test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$windowed test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$windowed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$windowed test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zip test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zip test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$zip test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toStringJoinsNoMoreThanTheFirstTenElements test fun": {
        "size": 424,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toStringJoinsNoMoreThanTheFirstTenElements test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toStringJoinsNoMoreThanTheFirstTenElements test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusElement test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusElement test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusCollection test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusCollection test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusArray test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusArray test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusSequence test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusSequence test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusAssign test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$plusAssign test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$reduceOrNullOnEmpty test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$reduceOrNullOnEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$reduceOrNullOnEmpty test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$reduceIndexedOrNullOnEmpty test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$reduceIndexedOrNullOnEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$reduceIndexedOrNullOnEmpty test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusElement test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusElement test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusCollection test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusCollection test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusArray test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusArray test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusSequence test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusSequence test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusIsLazyIterated test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusIsLazyIterated test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusIsLazyIterated test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusAssign test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$minusAssign test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$iterationOverSequence test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$iterationOverSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$iterationOverSequence test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunction test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunction test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunction test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunctionWithInitialValue test fun": {
        "size": 412,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunctionWithInitialValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunctionWithInitialValue test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunctionWithLazyInitialValue test fun": {
        "size": 420,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunctionWithLazyInitialValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromFunctionWithLazyInitialValue test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromIterator test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceFromIterator test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$makeSequenceOneTimeConstrained test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$makeSequenceOneTimeConstrained test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$makeSequenceOneTimeConstrained test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceExtensions test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceExtensions test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sequenceExtensions test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapAndTakeExtractTheTransformedElements test fun": {
        "size": 426,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapAndTakeExtractTheTransformedElements test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapAndTakeExtractTheTransformedElements test fun.invoke()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMap test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMap test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapOnEmpty test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapOnEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapOnEmpty test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapWithEmptyItems test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapWithEmptyItems test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapWithEmptyItems test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapIndexed test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatMapIndexed test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatten test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatten test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$flatten test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$distinct test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$distinct test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$distinct test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$distinctBy test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$distinctBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$distinctBy test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$unzip test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$unzip test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$unzip test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sorted test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sorted test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sorted test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sortedBy test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sortedBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sortedBy test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sortedWith test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sortedWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$sortedWith test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffled test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffled test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffled test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffledPredictably test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffledPredictably test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffledPredictably test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffledPartially test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffledPartially test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$shuffledPartially test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$associateWith test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$associateWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$associateWith test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$orEmpty test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$orEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$orEmpty test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$firstNotNullOf test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$firstNotNullOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$firstNotNullOf test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toSet test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toSet test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toList test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun$toList test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$distinct test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$distinct test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$distinct test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$distinctBy test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$distinctBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$distinctBy test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$union test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$union test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$union test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$subtract test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$subtract test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$subtract test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$intersect test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$intersect test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$intersect test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusElement test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusElement test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusCollection test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusCollection test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusArray test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusArray test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusSequence test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusSequence test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusAssign test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusAssign test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$plusAssign test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusElement test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusElement test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusCollection test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusCollection test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusArray test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusArray test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusSequence test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun$minusSequence test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$collectionBehavior test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$collectionBehavior test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$collectionBehavior test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ubyteArrayInit test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ubyteArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ubyteArrayInit test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ushortArrayInit test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ushortArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ushortArrayInit test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$uintArrayInit test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$uintArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$uintArrayInit test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ulongArrayInit test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ulongArrayInit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$ulongArrayInit test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentHashCode test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentHashCode test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentToString test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentToString test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentEquals test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$contentEquals test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$asArray test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$asArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$asArray test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toArray test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toArray test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toTypedArray test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toTypedArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toTypedArray test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyOf test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyOf test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyAndResize test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyAndResize test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyAndResize test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyOfRange test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyOfRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$copyOfRange test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$plus test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$plus test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$plus test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOf test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOf test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOfFirst test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOfFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOfFirst test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastIndexOf test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastIndexOf test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOfLast test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOfLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indexOfLast test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indices test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$indices test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastIndex test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastIndex test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$all test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$all test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$all test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$none test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$none test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$none test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$any test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$any test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$any test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$count test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$count test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumBy test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumBy test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumByDouble test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumByDouble test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumByDouble test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toUnsignedArray test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toUnsignedArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$toUnsignedArray test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reversed test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reversed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reversed test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reversedArray test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reversedArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reversedArray test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$asList test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$asList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$asList test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$slice test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$slice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$slice test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sliceArray test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sliceArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sliceArray test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minOrNull test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minOrNull test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minOrNullInUnsignedArrays test fun": {
        "size": 408,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minOrNullInUnsignedArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minOrNullInUnsignedArrays test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxOrNull test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxOrNull test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxOrNullInUnsignedArrays test fun": {
        "size": 408,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxOrNullInUnsignedArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxOrNullInUnsignedArrays test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minWitOrNullh test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minWitOrNullh test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minWitOrNullh test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minWithOrNullInUnsignedArrays test fun": {
        "size": 416,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minWithOrNullInUnsignedArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minWithOrNullInUnsignedArrays test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxWithOrNull test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxWithOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxWithOrNull test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxWithOrNullInUnsignedArrays test fun": {
        "size": 416,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxWithOrNullInUnsignedArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxWithOrNullInUnsignedArrays test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minByOrNull test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minByOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minByOrNull test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minByOrNullInUnsignedArrays test fun": {
        "size": 412,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minByOrNullInUnsignedArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$minByOrNullInUnsignedArrays test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxByOrNull test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxByOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxByOrNull test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxByOrNullInUnsignedArrays test fun": {
        "size": 412,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxByOrNullInUnsignedArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$maxByOrNullInUnsignedArrays test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduce test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduce test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceOrNull test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceOrNull test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceIndexed test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceIndexed test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceIndexedOrNull test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceIndexedOrNull test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRight test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRight test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRight test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightOrNull test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightOrNull test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightIndexed test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightIndexed test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightIndexedOrNull test fun": {
        "size": 406,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$reduceRightIndexedOrNull test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$forEach test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$forEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$forEach test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$forEachIndexed test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$forEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$forEachIndexed test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sum test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sum test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sum test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumInUnsignedArrays test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumInUnsignedArrays test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sumInUnsignedArrays test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$fold test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$fold test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldIndexed test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldIndexed test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldRight test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldRight test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldRight test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldRightIndexed test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldRightIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$foldRightIndexed test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$scan test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$scan test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningFold test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningFold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningFold test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$scanIndexed test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$scanIndexed test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningFoldIndexed test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningFoldIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningFoldIndexed test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningReduce test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningReduce test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningReduceIndexed test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$associateWithPrimitives test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$associateWithPrimitives test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$associateWithPrimitives test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$associateWithToPrimitives test fun": {
        "size": 408,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$associateWithToPrimitives test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$associateWithToPrimitives test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAt test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAt test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAtOrElse test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAtOrElse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAtOrElse test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAtOrNull test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAtOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$elementAtOrNull test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$find test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$find test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$find test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$findLast test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$findLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$findLast test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$first test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$first test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$first test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$firstOrNull test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$firstOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$firstOrNull test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$getOrElse test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$getOrElse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$getOrElse test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$getOrNull test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$getOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$getOrNull test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$last test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$last test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$last test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastOrNull test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$lastOrNull test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$single test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$single test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$single test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$singleOrNull test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$singleOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$singleOrNull test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$map test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$map test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$mapIndexed test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$mapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$mapIndexed test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$groupBy test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$groupBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$groupBy test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$flatMap test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$flatMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$flatMap test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$flatMapIndexed test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$flatMapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$flatMapIndexed test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$withIndex test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$withIndex test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$withIndex test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$zip test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$zip test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$zip test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$onEach test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$onEach test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$onEachIndexed test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$onEachIndexed test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$drop test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$drop test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropLast test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropLast test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropWhile test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropWhile test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropLastWhile test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropLastWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$dropLastWhile test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$take test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$take test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$take test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeLast test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeLast test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeWhile test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeWhile test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeLastWhile test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeLastWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$takeLastWhile test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filter test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filter test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filterIndexed test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filterIndexed test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filterNot test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$filterNot test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sort test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sort test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sort test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortDescending test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortDescending test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortDescending test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sorted test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sorted test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sorted test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedDescending test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedDescending test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedDescending test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedBy test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedBy test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedArray test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedArray test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedArrayDescending test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedArrayDescending test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$sortedArrayDescending test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$fill test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$fill test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun$fill test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun": {
        "size": 2112,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractCollectionsTest test fun.invoke()": {
        "size": 1724,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractListTest test fun": {
        "size": 540,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractListTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$AbstractListTest test fun.invoke()": {
        "size": 229,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun": {
        "size": 6030,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayDequeTest test fun.invoke()": {
        "size": 5441,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun": {
        "size": 26825,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArraysTest test fun.invoke()": {
        "size": 25210,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun": {
        "size": 24565,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$CollectionTest test fun.invoke()": {
        "size": 23086,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun": {
        "size": 1810,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ContainerBuilderTest test fun.invoke()": {
        "size": 1435,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun": {
        "size": 1394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$GroupingTest test fun.invoke()": {
        "size": 1047,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun": {
        "size": 11094,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IterableTest test fun.invoke()": {
        "size": 10247,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun": {
        "size": 8334,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetTest test fun.invoke()": {
        "size": 7622,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun": {
        "size": 11150,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$LinkedSetTest test fun.invoke()": {
        "size": 10302,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun": {
        "size": 10870,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListTest test fun.invoke()": {
        "size": 10027,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun": {
        "size": 11150,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ArrayListTest test fun.invoke()": {
        "size": 10302,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IteratorsTest test fun": {
        "size": 554,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IteratorsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$IteratorsTest test fun.invoke()": {
        "size": 246,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun": {
        "size": 1925,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ListSpecificTest test fun.invoke()": {
        "size": 1544,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun": {
        "size": 2198,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$MutableCollectionTest test fun.invoke()": {
        "size": 1802,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun": {
        "size": 7002,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$ReversedViewsTest test fun.invoke()": {
        "size": 6390,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun": {
        "size": 15550,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SequenceTest test fun.invoke()": {
        "size": 14523,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun": {
        "size": 3178,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$SetOperationsTest test fun.invoke()": {
        "size": 2736,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun": {
        "size": 22963,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun$UnsignedArraysTest test fun.invoke()": {
        "size": 21560,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun": {
        "size": 3846,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections test fun.invoke()": {
        "size": 3381,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByElement test fun": {
        "size": 419,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByElement test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByElementNullable test fun": {
        "size": 435,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByElementNullable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByElementNullable test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchWithComparator test fun": {
        "size": 429,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchWithComparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchWithComparator test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByKey test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByKey test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByKeyWithComparator test fun": {
        "size": 439,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByKeyWithComparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByKeyWithComparator test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByMultipleKeys test fun": {
        "size": 429,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByMultipleKeys test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun$binarySearchByMultipleKeys test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun": {
        "size": 1842,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun$ListBinarySearchTest test fun.invoke()": {
        "size": 1464,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun": {
        "size": 534,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.binarySearch test fun.invoke()": {
        "size": 236,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByCompareTo test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByCompareTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByCompareTo test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByNameFirst test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByNameFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByNameFirst test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByRatingFirst test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByRatingFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareByRatingFirst test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareSameObjectsByRatingFirst test fun": {
        "size": 402,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareSameObjectsByRatingFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareSameObjectsByRatingFirst test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareNullables test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareNullables test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$compareNullables test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortComparatorThenComparator test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortComparatorThenComparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortComparatorThenComparator test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$combineComparators test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$combineComparators test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$combineComparators test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$reversedComparator test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$reversedComparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$reversedComparator test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$naturalOrderComparator test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$naturalOrderComparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$naturalOrderComparator test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortByThenBy test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortByThenBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortByThenBy test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortByThenByDescending test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortByThenByDescending test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortByThenByDescending test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortUsingFunctionalComparator test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortUsingFunctionalComparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortUsingFunctionalComparator test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortUsingCustomComparator test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortUsingCustomComparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$sortUsingCustomComparator test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$maxOf test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$maxOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$maxOf test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$maxOfWith test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$maxOfWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$maxOfWith test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$minOf test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$minOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$minOf test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$minOfWith test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$minOfWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun$minOfWith test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun": {
        "size": 3952,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun$OrderingTest test fun.invoke()": {
        "size": 3485,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun": {
        "size": 492,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.comparisons test fun.invoke()": {
        "size": 207,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithoutKey test fun": {
        "size": 450,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithoutKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithoutKey test fun.invoke()": {
        "size": 207,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithoutKeyOverridesDerived test fun": {
        "size": 482,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithoutKeyOverridesDerived test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithoutKeyOverridesDerived test fun.invoke()": {
        "size": 223,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithKey test fun": {
        "size": 444,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithKey test fun.invoke()": {
        "size": 204,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithKey test fun": {
        "size": 450,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithKey test fun.invoke()": {
        "size": 207,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithKeyAndDifferentBase test fun": {
        "size": 482,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithKeyAndDifferentBase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithKeyAndDifferentBase test fun.invoke()": {
        "size": 223,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithKeyOverridesDerived test fun": {
        "size": 476,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithKeyOverridesDerived test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testDerivedWithKeyOverridesDerived test fun.invoke()": {
        "size": 220,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedOverrides test fun": {
        "size": 454,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedOverrides test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedOverrides test fun.invoke()": {
        "size": 209,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithDifferentBaseOverrides test fun": {
        "size": 488,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithDifferentBaseOverrides test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun$testSubDerivedWithDifferentBaseOverrides test fun.invoke()": {
        "size": 226,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testKeyIsNotOverridden test fun": {
        "size": 437,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testKeyIsNotOverridden test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testKeyIsNotOverridden test fun.invoke()": {
        "size": 198,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testKeyIsOverridden test fun": {
        "size": 431,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testKeyIsOverridden test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testKeyIsOverridden test fun.invoke()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testInterceptorKeyIsNotOverridden test fun": {
        "size": 459,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testInterceptorKeyIsNotOverridden test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testInterceptorKeyIsNotOverridden test fun.invoke()": {
        "size": 209,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testContextOperations test fun": {
        "size": 435,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testContextOperations test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun$testContextOperations test fun.invoke()": {
        "size": 197,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testGetPlusFold test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testGetPlusFold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testGetPlusFold test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testMinusKey test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testMinusKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testMinusKey test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testPlusCombined test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testPlusCombined test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testPlusCombined test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testLastDispatcher test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testLastDispatcher test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testLastDispatcher test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testEquals test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testEquals test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testBasicOperations test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testBasicOperations test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testBasicOperations test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testWrapperEquality test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testWrapperEquality test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testWrapperEquality test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testInterceptor test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testInterceptor test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun$testInterceptor test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutinesReferenceValuesTest test fun$testBadClass test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutinesReferenceValuesTest test fun$testBadClass test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutinesReferenceValuesTest test fun$testBadClass test fun.invoke()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testSimple test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testSimple test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testSimple test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testCallHasNextSeveralTimes test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testCallHasNextSeveralTimes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testCallHasNextSeveralTimes test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testManualIteration test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testManualIteration test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testManualIteration test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testEmptySequence test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testEmptySequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testEmptySequence test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testLaziness test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testLaziness test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testLaziness test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testExceptionInCoroutine test fun": {
        "size": 408,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testExceptionInCoroutine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testExceptionInCoroutine test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testParallelIteration test fun": {
        "size": 402,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testParallelIteration test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testParallelIteration test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllIterator test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllIterator test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllSequence test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllSequence test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollection test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollection test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedFirst test fun": {
        "size": 424,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedFirst test fun.invoke()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedLast test fun": {
        "size": 422,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedLast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedLast test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedBoth test fun": {
        "size": 422,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedBoth test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedBoth test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedLong test fun": {
        "size": 422,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionMixedLong test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionOneEmpty test fun": {
        "size": 420,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionOneEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionOneEmpty test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionManyEmpty test fun": {
        "size": 422,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionManyEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllCollectionManyEmpty test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllSideEffects test fun": {
        "size": 406,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllSideEffects test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testYieldAllSideEffects test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testInfiniteYieldAll test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testInfiniteYieldAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun$testInfiniteYieldAll test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun": {
        "size": 2409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$AbstractCoroutineContextElementTest test fun.invoke()": {
        "size": 2010,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun": {
        "size": 1316,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$ContinuationInterceptorKeyTest test fun.invoke()": {
        "size": 962,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun": {
        "size": 2060,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutineContextTest test fun.invoke()": {
        "size": 1676,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutinesReferenceValuesTest test fun": {
        "size": 566,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutinesReferenceValuesTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$CoroutinesReferenceValuesTest test fun.invoke()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun": {
        "size": 4475,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun$SequenceBuilderTest test fun.invoke()": {
        "size": 3992,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun": {
        "size": 1356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines test fun.invoke()": {
        "size": 1032,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testRunCatchingSuccess test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testRunCatchingSuccess test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testRunCatchingSuccess test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testRunCatchingFailure test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testRunCatchingFailure test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testRunCatchingFailure test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testConstructedSuccess test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testConstructedSuccess test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testConstructedSuccess test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testConstructedFailure test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testConstructedFailure test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun$testConstructedFailure test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun": {
        "size": 1182,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun$ResultTest test fun.invoke()": {
        "size": 852,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun": {
        "size": 478,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.kotlin test fun.invoke()": {
        "size": 198,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun$CancellationExceptionTest test fun$testAllConstructors test fun": {
        "size": 429,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun$CancellationExceptionTest test fun$testAllConstructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun$CancellationExceptionTest test fun$testAllConstructors test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun$CancellationExceptionTest test fun": {
        "size": 598,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun$CancellationExceptionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun$CancellationExceptionTest test fun.invoke()": {
        "size": 266,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun": {
        "size": 542,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.coroutines.cancellation test fun.invoke()": {
        "size": 245,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testCannotBeCasted test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testCannotBeCasted test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testCannotBeCasted test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testForEmptyEnum test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testForEmptyEnum test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testForEmptyEnum test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testEmptyEnumBehaviour test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testEmptyEnumBehaviour test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testEmptyEnumBehaviour test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testForEnum test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testForEnum test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testForEnum test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testyEnumBehaviour test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testyEnumBehaviour test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testyEnumBehaviour test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testVariantEnumBehaviour test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testVariantEnumBehaviour test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun$testVariantEnumBehaviour test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun": {
        "size": 1620,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun$EnumEntriesListTest test fun.invoke()": {
        "size": 1262,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun": {
        "size": 494,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.enums test fun.invoke()": {
        "size": 215,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$throwable test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$throwable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$throwable test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$error test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$error test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$error test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$exception test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$exception test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$exception test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$runtimeException test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$runtimeException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$runtimeException test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$illegalArgumentException test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$illegalArgumentException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$illegalArgumentException test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$illegalStateException test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$illegalStateException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$illegalStateException test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$indexOutOfBoundsException test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$indexOutOfBoundsException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$indexOutOfBoundsException test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$unsupportedOperationException test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$unsupportedOperationException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$unsupportedOperationException test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$numberFormatException test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$numberFormatException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$numberFormatException test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$nullPointerException test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$nullPointerException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$nullPointerException test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$classCastException test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$classCastException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$classCastException test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$noSuchElementException test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$noSuchElementException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$noSuchElementException test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$concurrentModificationException test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$concurrentModificationException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$concurrentModificationException test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$arithmeticException test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$arithmeticException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$arithmeticException test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$noWhenBranchMatchedException test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$noWhenBranchMatchedException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$noWhenBranchMatchedException test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$uninitializedPropertyAccessException test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$uninitializedPropertyAccessException test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$uninitializedPropertyAccessException test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$assertionError test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$assertionError test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$assertionError test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$suppressedExceptions test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$suppressedExceptions test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$suppressedExceptions test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$exceptionDetailedTrace test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$exceptionDetailedTrace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$exceptionDetailedTrace test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$circularSuppressedDetailedTrace test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$circularSuppressedDetailedTrace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun$circularSuppressedDetailedTrace test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun": {
        "size": 4713,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun$ExceptionTest test fun.invoke()": {
        "size": 4216,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun": {
        "size": 492,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.exceptions test fun.invoke()": {
        "size": 208,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$index test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$index test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$index test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$common test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$common test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$common test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$basic test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$basic test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$basic test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$urlSafe test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$urlSafe test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$urlSafe test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$mime test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$mime test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun$mime test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun": {
        "size": 1260,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun$Base64Test test fun.invoke()": {
        "size": 915,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun": {
        "size": 488,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.io.encoding test fun.invoke()": {
        "size": 203,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun$arraySizeAndToList test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun$arraySizeAndToList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun$arraySizeAndToList test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun$arrayListFromCollection test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun$arrayListFromCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun$arrayListFromCollection test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$collectionToArray test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$collectionToArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$collectionToArray test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$toListDoesNotCreateArrayView test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$toListDoesNotCreateArrayView test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$toListDoesNotCreateArrayView test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$toMutableListDoesNotCreateArrayView test fun": {
        "size": 428,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$toMutableListDoesNotCreateArrayView test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$toMutableListDoesNotCreateArrayView test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$listOfDoesNotCreateView test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$listOfDoesNotCreateView test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$listOfDoesNotCreateView test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$mutableListOfDoesNotCreateView test fun": {
        "size": 418,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$mutableListOfDoesNotCreateView test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$mutableListOfDoesNotCreateView test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListDoesNotCreateArrayView test fun": {
        "size": 420,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListDoesNotCreateArrayView test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListDoesNotCreateArrayView test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$asListHidesPrimitivenessOfArray test fun": {
        "size": 420,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$asListHidesPrimitivenessOfArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$asListHidesPrimitivenessOfArray test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListCapacity test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListCapacity test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListCapacity test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$listEqualsOperatesOnAny test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$listEqualsOperatesOnAny test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$listEqualsOperatesOnAny test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListValidatesIndexRange test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListValidatesIndexRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$arrayListValidatesIndexRange test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$mutableIteratorRemove test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$mutableIteratorRemove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun$mutableIteratorRemove test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$constructors test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$constructors test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$getOrElse test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$getOrElse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$getOrElse test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$getOrPut test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$getOrPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$getOrPut test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$emptyMapGet test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$emptyMapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$emptyMapGet test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapGet test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapGet test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPut test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPut test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$sizeAndEmptyForEmptyMap test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$sizeAndEmpty test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$sizeAndEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$sizeAndEmpty test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$emptyMapValues test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$emptyMapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$emptyMapValues test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapValues test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapValues test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapKeySet test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapKeySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapKeySet test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapEntrySet test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapEntrySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapEntrySet test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapContainsKey test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapContainsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapContainsKey test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapContainsValue test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapContainsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapContainsValue test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPutAll test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPutAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPutAll test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPutAllFromCustomMap test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPutAllFromCustomMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapPutAllFromCustomMap test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapRemove test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapRemove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapRemove test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapClear test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapClear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapClear test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$nullAsKey test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$nullAsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$nullAsKey test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$nullAsValue test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$setViaIndexOperators test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$setViaIndexOperators test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$setViaIndexOperators test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$createUsingPairs test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$createUsingPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$createUsingPairs test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$createUsingTo test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$createUsingTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$createUsingTo test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapIteratorImplicitly test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapIteratorImplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapIteratorImplicitly test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapIteratorExplicitly test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapIteratorExplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapIteratorExplicitly test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapMutableIterator test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapMutableIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapMutableIterator test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapCollectionPropertiesAreViews test fun": {
        "size": 417,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapCollectionPropertiesAreViews test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapCollectionPropertiesAreViews test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun": {
        "size": 431,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.invoke()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun": {
        "size": 421,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun": {
        "size": 427,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$putAndGetSpecialNamesToMap test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$putAndGetSpecialNamesToMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun$putAndGetSpecialNamesToMap test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$constructors test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$constructors test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$compareBehavior test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$compareBehavior test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$compareBehavior test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$putNull test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$putNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$putNull test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$getOrElse test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$getOrElse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$getOrElse test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$getOrPut test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$getOrPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$getOrPut test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$emptyMapGet test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$emptyMapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$emptyMapGet test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapGet test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapGet test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPut test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPut test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$sizeAndEmptyForEmptyMap test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$sizeAndEmpty test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$sizeAndEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$sizeAndEmpty test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$emptyMapValues test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$emptyMapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$emptyMapValues test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapValues test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapValues test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapKeySet test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapKeySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapKeySet test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapEntrySet test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapEntrySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapEntrySet test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapContainsKey test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapContainsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapContainsKey test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapContainsValue test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapContainsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapContainsValue test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPutAll test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPutAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPutAll test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPutAllFromCustomMap test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPutAllFromCustomMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapPutAllFromCustomMap test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapRemove test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapRemove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapRemove test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapClear test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapClear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapClear test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$nullAsKey test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$nullAsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$nullAsKey test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$nullAsValue test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$setViaIndexOperators test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$setViaIndexOperators test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$setViaIndexOperators test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$createUsingPairs test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$createUsingPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$createUsingPairs test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$createUsingTo test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$createUsingTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$createUsingTo test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapIteratorImplicitly test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapIteratorImplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapIteratorImplicitly test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapIteratorExplicitly test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapIteratorExplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapIteratorExplicitly test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapMutableIterator test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapMutableIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapMutableIterator test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapCollectionPropertiesAreViews test fun": {
        "size": 423,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapCollectionPropertiesAreViews test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapCollectionPropertiesAreViews test fun.invoke()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun": {
        "size": 437,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun": {
        "size": 427,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun": {
        "size": 433,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.invoke()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$putAndGetSpecialNamesToMap test fun": {
        "size": 413,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$putAndGetSpecialNamesToMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun$putAndGetSpecialNamesToMap test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$constructors test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$constructors test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$getOrElse test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$getOrElse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$getOrElse test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$getOrPut test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$getOrPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$getOrPut test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$emptyMapGet test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$emptyMapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$emptyMapGet test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapGet test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapGet test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPut test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPut test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$sizeAndEmptyForEmptyMap test fun": {
        "size": 410,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$sizeAndEmpty test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$sizeAndEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$sizeAndEmpty test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$emptyMapValues test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$emptyMapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$emptyMapValues test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapValues test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapValues test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapKeySet test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapKeySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapKeySet test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapEntrySet test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapEntrySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapEntrySet test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapContainsKey test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapContainsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapContainsKey test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapContainsValue test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapContainsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapContainsValue test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPutAll test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPutAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPutAll test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPutAllFromCustomMap test fun": {
        "size": 408,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPutAllFromCustomMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapPutAllFromCustomMap test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapRemove test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapRemove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapRemove test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapClear test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapClear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapClear test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$nullAsKey test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$nullAsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$nullAsKey test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$nullAsValue test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$setViaIndexOperators test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$setViaIndexOperators test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$setViaIndexOperators test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$createUsingPairs test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$createUsingPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$createUsingPairs test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$createUsingTo test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$createUsingTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$createUsingTo test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapIteratorImplicitly test fun": {
        "size": 406,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapIteratorImplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapIteratorImplicitly test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapIteratorExplicitly test fun": {
        "size": 406,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapIteratorExplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapIteratorExplicitly test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapMutableIterator test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapMutableIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapMutableIterator test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapCollectionPropertiesAreViews test fun": {
        "size": 426,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapCollectionPropertiesAreViews test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapCollectionPropertiesAreViews test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun": {
        "size": 440,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.invoke()": {
        "size": 192,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun": {
        "size": 430,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun": {
        "size": 436,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$putAndGetSpecialNamesToMap test fun": {
        "size": 416,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$putAndGetSpecialNamesToMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun$putAndGetSpecialNamesToMap test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$constructors test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$constructors test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$getOrElse test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$getOrElse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$getOrElse test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$getOrPut test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$getOrPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$getOrPut test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$emptyMapGet test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$emptyMapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$emptyMapGet test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapGet test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapGet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapGet test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPut test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPut test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPut test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$sizeAndEmptyForEmptyMap test fun": {
        "size": 425,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$sizeAndEmptyForEmptyMap test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$sizeAndEmpty test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$sizeAndEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$sizeAndEmpty test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$emptyMapValues test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$emptyMapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$emptyMapValues test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapValues test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapValues test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapKeySet test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapKeySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapKeySet test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapEntrySet test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapEntrySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapEntrySet test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapContainsKey test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapContainsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapContainsKey test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapContainsValue test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapContainsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapContainsValue test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPutAll test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPutAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPutAll test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPutAllFromCustomMap test fun": {
        "size": 423,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPutAllFromCustomMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapPutAllFromCustomMap test fun.invoke()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapRemove test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapRemove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapRemove test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapClear test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapClear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapClear test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$nullAsKey test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$nullAsKey test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$nullAsKey test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$nullAsValue test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$setViaIndexOperators test fun": {
        "size": 419,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$setViaIndexOperators test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$setViaIndexOperators test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$createUsingPairs test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$createUsingPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$createUsingPairs test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$createUsingTo test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$createUsingTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$createUsingTo test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapIteratorImplicitly test fun": {
        "size": 421,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapIteratorImplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapIteratorImplicitly test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapIteratorExplicitly test fun": {
        "size": 421,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapIteratorExplicitly test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapIteratorExplicitly test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapMutableIterator test fun": {
        "size": 415,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapMutableIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapMutableIterator test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapCollectionPropertiesAreViews test fun": {
        "size": 441,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapCollectionPropertiesAreViews test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapCollectionPropertiesAreViews test fun.invoke()": {
        "size": 195,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun": {
        "size": 455,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$mapCollectionPropertiesDoNotSupportAdd test fun.invoke()": {
        "size": 202,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun": {
        "size": 445,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$specialNamesNotContainsInEmptyMap test fun.invoke()": {
        "size": 197,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun": {
        "size": 451,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$specialNamesNotContainsInNonEmptyMap test fun.invoke()": {
        "size": 200,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$putAndGetSpecialNamesToMap test fun": {
        "size": 431,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$putAndGetSpecialNamesToMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun$putAndGetSpecialNamesToMap test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$constructors test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$constructors test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$size test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$size test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$size test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$isEmpty test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$isEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$isEmpty test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$equalsMethod test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$equalsMethod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$equalsMethod test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$contains test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$contains test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$iterator test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$iterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$iterator test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$containsAll test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$containsAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$containsAll test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$add test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$add test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$add test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$remove test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$remove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$remove test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$addAll test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$addAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$addAll test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$removeAll test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$removeAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$removeAll test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$retainAll test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$retainAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$retainAll test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$clear test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$clear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$clear test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$specialNamesNotContainsInEmptySet test fun": {
        "size": 421,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun": {
        "size": 427,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$putAndGetSpecialNamesToSet test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$putAndGetSpecialNamesToSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$putAndGetSpecialNamesToSet test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$nullAsValue test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$constructors test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$constructors test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$compareBehavior test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$compareBehavior test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$compareBehavior test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$size test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$size test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$size test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$isEmpty test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$isEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$isEmpty test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$equalsMethod test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$equalsMethod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$equalsMethod test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$contains test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$contains test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$iterator test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$iterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$iterator test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$containsAll test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$containsAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$containsAll test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$add test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$add test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$add test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$remove test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$remove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$remove test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$addAll test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$addAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$addAll test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$removeAll test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$removeAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$removeAll test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$retainAll test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$retainAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$retainAll test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$clear test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$clear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$clear test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$specialNamesNotContainsInEmptySet test fun": {
        "size": 427,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun": {
        "size": 433,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.invoke()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$putAndGetSpecialNamesToSet test fun": {
        "size": 413,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$putAndGetSpecialNamesToSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$putAndGetSpecialNamesToSet test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$nullAsValue test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$constructors test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$constructors test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$size test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$size test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$size test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$isEmpty test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$isEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$isEmpty test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$equalsMethod test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$equalsMethod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$equalsMethod test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$contains test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$contains test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$iterator test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$iterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$iterator test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$containsAll test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$containsAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$containsAll test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$add test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$add test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$add test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$remove test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$remove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$remove test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$addAll test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$addAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$addAll test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$removeAll test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$removeAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$removeAll test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$retainAll test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$retainAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$retainAll test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$clear test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$clear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$clear test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$specialNamesNotContainsInEmptySet test fun": {
        "size": 430,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun": {
        "size": 436,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$putAndGetSpecialNamesToSet test fun": {
        "size": 416,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$putAndGetSpecialNamesToSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$putAndGetSpecialNamesToSet test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$nullAsValue test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$constructors test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$constructors test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$size test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$size test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$size test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$isEmpty test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$isEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$isEmpty test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$equalsMethod test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$equalsMethod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$equalsMethod test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$contains test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$contains test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$iterator test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$iterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$iterator test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$containsAll test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$containsAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$containsAll test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$add test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$add test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$add test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$remove test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$remove test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$remove test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$addAll test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$addAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$addAll test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$removeAll test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$removeAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$removeAll test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$retainAll test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$retainAll test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$retainAll test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$clear test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$clear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$clear test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$specialNamesNotContainsInEmptySet test fun": {
        "size": 445,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$specialNamesNotContainsInEmptySet test fun.invoke()": {
        "size": 197,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun": {
        "size": 451,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$specialNamesNotContainsInNonEmptySet test fun.invoke()": {
        "size": 200,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$putAndGetSpecialNamesToSet test fun": {
        "size": 431,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$putAndGetSpecialNamesToSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$putAndGetSpecialNamesToSet test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$nullAsValue test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$nullAsValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun$nullAsValue test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun": {
        "size": 775,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsArrayTest test fun.invoke()": {
        "size": 456,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun": {
        "size": 2944,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$JsCollectionsTest test fun.invoke()": {
        "size": 2529,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun": {
        "size": 7046,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexMapJsTest test fun.invoke()": {
        "size": 6432,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun": {
        "size": 7526,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveMapJsTest test fun.invoke()": {
        "size": 6890,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun": {
        "size": 7142,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashMapJsTest test fun.invoke()": {
        "size": 6525,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun": {
        "size": 7302,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveMapJsTest test fun.invoke()": {
        "size": 6680,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun": {
        "size": 3880,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$ComplexSetJsTest test fun.invoke()": {
        "size": 3406,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun": {
        "size": 4132,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$PrimitiveSetJsTest test fun.invoke()": {
        "size": 3646,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun": {
        "size": 3934,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedHashSetJsTest test fun.invoke()": {
        "size": 3457,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun": {
        "size": 4024,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun$LinkedPrimitiveSetJsTest test fun.invoke()": {
        "size": 3542,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun": {
        "size": 2278,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.collections.js test fun.invoke()": {
        "size": 1900,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$orForInt test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$orForInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$orForInt test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$andForInt test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$andForInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$andForInt test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$xorForInt test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$xorForInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$xorForInt test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForInt test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForInt test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForInt test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForInt test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$ushrForInt test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$ushrForInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$ushrForInt test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForUInt test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForUInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForUInt test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForUInt test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForUInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForUInt test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForLong test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForLong test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForLong test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForLong test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$ushrForLong test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$ushrForLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$ushrForLong test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForULong test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForULong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shlForULong test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForULong test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForULong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$shrForULong test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$invForInt test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$invForInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun$invForInt test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$intTest test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$intTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$intTest test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$doubleTest test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$doubleTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$doubleTest test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$floatTest test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$floatTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$floatTest test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$longTest test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$longTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$longTest test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$shortTest test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$shortTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$shortTest test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$byteTest test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$byteTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$byteTest test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$charTest test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$charTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$charTest test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$stringTest test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$stringTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$stringTest test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$booleanTest test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$booleanTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun$booleanTest test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$doubleToLong test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$doubleToLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$doubleToLong test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$doubleToInt test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$doubleToInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$doubleToInt test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$floatToLong test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$floatToLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$floatToLong test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$floatToInt test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$floatToInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun$floatToInt test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$intDivMod test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$intDivMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$intDivMod test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$longDivMod test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$longDivMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$longDivMod test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$byteDivMod test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$byteDivMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$byteDivMod test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$shortDivMod test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$shortDivMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$shortDivMod test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$longIntMod test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$longIntMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$longIntMod test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$shortIntMod test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$shortIntMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$shortIntMod test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$doubleMod test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$doubleMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$doubleMod test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$floatMod test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$floatMod test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun$floatMod test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$trigonometric test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$trigonometric test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$trigonometric test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$hyperbolic test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$hyperbolic test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$hyperbolic test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicSin test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicSin test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicSin test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicCos test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicCos test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicCos test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicTan test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicTan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$inverseHyperbolicTan test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$cubeRoots test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$cubeRoots test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$cubeRoots test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$powers test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$powers test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$powers test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$logarithms test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$logarithms test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$logarithms test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$rounding test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$rounding test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$rounding test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$roundingConversion test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$roundingConversion test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$roundingConversion test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$absoluteValue test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$absoluteValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$absoluteValue test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$signs test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$signs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$signs test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$nextAndPrev test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$nextAndPrev test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun$nextAndPrev test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$floatRangeConversion test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$floatRangeConversion test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$floatRangeConversion test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$trigonometric test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$trigonometric test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$trigonometric test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$hyperbolic test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$hyperbolic test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$hyperbolic test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicSin test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicSin test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicSin test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicCos test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicCos test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicCos test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicTan test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicTan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$inverseHyperbolicTan test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$cubeRoots test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$cubeRoots test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$cubeRoots test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$powers test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$powers test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$powers test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$logarithms test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$logarithms test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$logarithms test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$rounding test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$rounding test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$rounding test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$roundingConversion test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$roundingConversion test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$roundingConversion test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$absoluteValue test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$absoluteValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$absoluteValue test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$signs test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$signs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun$signs test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun$intSigns test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun$intSigns test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun$intSigns test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun$longSigns test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun$longSigns test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun$longSigns test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$minOf test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$minOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$minOf test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$minOfVararg test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$minOfVararg test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$minOfVararg test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$maxOf test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$maxOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$maxOf test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$maxOfVararg test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$maxOfVararg test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$maxOfVararg test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMinOrNull test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMinOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMinOrNull test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMaxOrNull test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMaxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMaxOrNull test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMinOf test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMinOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMinOf test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMaxOf test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMaxOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$arrayMaxOf test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMinOrNull test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMinOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMinOrNull test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMax test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMax test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMax test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMinOf test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMinOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMinOf test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMaxOf test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMaxOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$primitiveArrayMaxOf test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMinOrNull test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMinOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMinOrNull test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMaxOrNull test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMaxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMaxOrNull test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMinOf test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMinOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMinOf test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMaxOf test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMaxOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$listMaxOf test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMinOrNull test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMinOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMinOrNull test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMaxOrNull test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMaxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMaxOrNull test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMinOf test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMinOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMinOf test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMaxOf test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMaxOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun$sequenceMaxOf test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$minOfT test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$minOfT test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$minOfT test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$maxOfT test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$maxOfT test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$maxOfT test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$arrayTMinOrNull test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$arrayTMinOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$arrayTMinOrNull test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$arrayTMaxOrNull test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$arrayTMaxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$arrayTMaxOrNull test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$listTMinOrNull test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$listTMinOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$listTMinOrNull test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$listTMaxOrNull test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$listTMaxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$listTMaxOrNull test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$sequenceTMinOrNull test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$sequenceTMinOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$sequenceTMinOrNull test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$sequenceTMaxOrNull test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$sequenceTMaxOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun$sequenceTMaxOrNull test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intMinMaxValues test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intMinMaxValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intMinMaxValues test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longMinMaxValues test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longMinMaxValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longMinMaxValues test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortMinMaxValues test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortMinMaxValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortMinMaxValues test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteMinMaxValues test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteMinMaxValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteMinMaxValues test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleMinMaxValues test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleMinMaxValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleMinMaxValues test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatMinMaxValues test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatMinMaxValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatMinMaxValues test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$charMinMaxValues test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$charMinMaxValues test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$charMinMaxValues test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleProperties test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleProperties test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleProperties test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatProperties test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatProperties test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatProperties test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatFitsInFloatArray test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatFitsInFloatArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatFitsInFloatArray test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleToBits test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleToBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$doubleToBits test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatToBits test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatToBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$floatToBits test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$sizeInBitsAndBytes test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$sizeInBitsAndBytes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$sizeInBitsAndBytes test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteBits test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteBits test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortBits test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortBits test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intBits test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intBits test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longBits test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longBits test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intRotate test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$intRotate test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteRotate test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$byteRotate test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longRotate test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$longRotate test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortRotate test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun$shortRotate test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun": {
        "size": 3158,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BitwiseOperationsTest test fun.invoke()": {
        "size": 2716,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun": {
        "size": 2126,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$BuiltinCompanionTest test fun.invoke()": {
        "size": 1735,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun": {
        "size": 1119,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$ConversionTest test fun.invoke()": {
        "size": 784,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun": {
        "size": 1896,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloorDivModTest test fun.invoke()": {
        "size": 1520,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun": {
        "size": 2932,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$DoubleMathTest test fun.invoke()": {
        "size": 2507,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun": {
        "size": 2935,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$FloatMathTest test fun.invoke()": {
        "size": 2511,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun": {
        "size": 718,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$IntegerMathTest test fun.invoke()": {
        "size": 402,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun": {
        "size": 4439,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNPropagationTest test fun.invoke()": {
        "size": 3940,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun": {
        "size": 1970,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NaNTotalOrderTest test fun.invoke()": {
        "size": 1592,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun": {
        "size": 4500,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun$NumbersTest test fun.invoke()": {
        "size": 3998,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun": {
        "size": 2153,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.numbers test fun.invoke()": {
        "size": 1782,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$NotNullVarTest test fun$doTest test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$NotNullVarTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$NotNullVarTest test fun$doTest test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$ObservablePropertyTest test fun$doTest test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$ObservablePropertyTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$ObservablePropertyTest test fun$doTest test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$VetoablePropertyTest test fun$doTest test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$VetoablePropertyTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$VetoablePropertyTest test fun$doTest test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$DelegationInterfacesTest test fun$doTest test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$DelegationInterfacesTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$DelegationInterfacesTest test fun$doTest test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$NotNullVarTest test fun": {
        "size": 546,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$NotNullVarTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$NotNullVarTest test fun.invoke()": {
        "size": 227,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$ObservablePropertyTest test fun": {
        "size": 562,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$ObservablePropertyTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$ObservablePropertyTest test fun.invoke()": {
        "size": 235,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$VetoablePropertyTest test fun": {
        "size": 558,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$VetoablePropertyTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$VetoablePropertyTest test fun.invoke()": {
        "size": 233,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$DelegationInterfacesTest test fun": {
        "size": 566,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$DelegationInterfacesTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun$DelegationInterfacesTest test fun.invoke()": {
        "size": 237,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun": {
        "size": 1149,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation test fun.invoke()": {
        "size": 824,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$ValByMapExtensionsTest test fun$doTest test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$ValByMapExtensionsTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$ValByMapExtensionsTest test fun$doTest test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$VarByMapExtensionsTest test fun$doTest test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$VarByMapExtensionsTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$VarByMapExtensionsTest test fun$doTest test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$ValByMapExtensionsTest test fun": {
        "size": 570,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$ValByMapExtensionsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$ValByMapExtensionsTest test fun.invoke()": {
        "size": 239,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$VarByMapExtensionsTest test fun": {
        "size": 570,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$VarByMapExtensionsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun$VarByMapExtensionsTest test fun.invoke()": {
        "size": 239,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun": {
        "size": 755,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.map test fun.invoke()": {
        "size": 446,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$topLevelProperties test fun": {
        "size": 424,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$topLevelProperties test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$topLevelProperties test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$memberProperties test fun": {
        "size": 420,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$memberProperties test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$memberProperties test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$extensionProperties test fun": {
        "size": 426,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$extensionProperties test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$extensionProperties test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$covariantProperties test fun": {
        "size": 426,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$covariantProperties test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun$covariantProperties test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun": {
        "size": 1335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun$PropertyReferenceTest test fun.invoke()": {
        "size": 968,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun": {
        "size": 552,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.references test fun.invoke()": {
        "size": 246,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$LazyValTest test fun$doTest test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$LazyValTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$LazyValTest test fun$doTest test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeLazyValTest test fun$doTest test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeLazyValTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeLazyValTest test fun$doTest test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$NullableLazyValTest test fun$doTest test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$NullableLazyValTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$NullableLazyValTest test fun$doTest test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeNullableLazyValTest test fun$doTest test fun": {
        "size": 406,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeNullableLazyValTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeNullableLazyValTest test fun$doTest test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$IdentityEqualsIsUsedToUnescapeLazyValTest test fun$doTest test fun": {
        "size": 454,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$IdentityEqualsIsUsedToUnescapeLazyValTest test fun$doTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$IdentityEqualsIsUsedToUnescapeLazyValTest test fun$doTest test fun.invoke()": {
        "size": 204,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$LazyValTest test fun": {
        "size": 550,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$LazyValTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$LazyValTest test fun.invoke()": {
        "size": 229,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeLazyValTest test fun": {
        "size": 562,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeLazyValTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeLazyValTest test fun.invoke()": {
        "size": 235,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$NullableLazyValTest test fun": {
        "size": 566,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$NullableLazyValTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$NullableLazyValTest test fun.invoke()": {
        "size": 237,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeNullableLazyValTest test fun": {
        "size": 578,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeNullableLazyValTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$UnsafeNullableLazyValTest test fun.invoke()": {
        "size": 243,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$IdentityEqualsIsUsedToUnescapeLazyValTest test fun": {
        "size": 610,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$IdentityEqualsIsUsedToUnescapeLazyValTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun$IdentityEqualsIsUsedToUnescapeLazyValTest test fun.invoke()": {
        "size": 259,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun": {
        "size": 1412,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.properties.delegation.lazy test fun.invoke()": {
        "size": 1072,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBits test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBits test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextInt test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextInt test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUInt test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUInt test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntUntil test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntUntil test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntUntil test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntUntil test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntFromUntil test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntFromUntil test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntFromUntil test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntFromUntil test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntInIntRange test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntInIntRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextIntInIntRange test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntInUIntRange test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntInUIntRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUIntInUIntRange test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLong test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLong test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULong test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULong test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongUntil test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongUntil test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongUntil test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongUntil test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongFromUntil test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongFromUntil test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongFromUntil test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongFromUntil test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongInLongRange test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongInLongRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextLongInLongRange test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongInULongRange test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongInULongRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextULongInULongRange test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDouble test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDouble test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDouble test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDoubleUntil test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDoubleUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDoubleUntil test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDoubleFromUntil test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDoubleFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextDoubleFromUntil test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextFloat test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextFloat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextFloat test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBoolean test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBoolean test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBoolean test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBytes test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBytes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBytes test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUBytes test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUBytes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUBytes test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBytesRange test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBytesRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextBytesRange test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUBytesRange test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUBytesRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun$nextUBytesRange test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameIntSeed test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameIntSeed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameIntSeed test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameLongSeed test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameLongSeed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameLongSeed test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameIntLongSeed test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameIntLongSeed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$sameIntLongSeed test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBits test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBits test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextInt test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextInt test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUInt test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUInt test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntUntil test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntUntil test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntUntil test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntUntil test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntFromUntil test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntFromUntil test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntFromUntil test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntFromUntil test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntInIntRange test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntInIntRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextIntInIntRange test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntInUIntRange test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntInUIntRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUIntInUIntRange test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLong test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLong test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULong test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULong test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongUntil test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongUntil test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongUntil test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongUntil test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongFromUntil test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongFromUntil test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongFromUntil test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongFromUntil test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongInLongRange test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongInLongRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextLongInLongRange test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongInULongRange test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongInULongRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextULongInULongRange test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDouble test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDouble test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDouble test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDoubleUntil test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDoubleUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDoubleUntil test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDoubleFromUntil test fun": {
        "size": 400,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDoubleFromUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextDoubleFromUntil test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextFloat test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextFloat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextFloat test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBoolean test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBoolean test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBoolean test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBytes test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBytes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBytes test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUBytes test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUBytes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUBytes test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBytesRange test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBytesRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextBytesRange test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUBytesRange test fun": {
        "size": 392,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUBytesRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun$nextUBytesRange test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$XorWowRandomImplTest test fun$predefinedSequence test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$XorWowRandomImplTest test fun$predefinedSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$XorWowRandomImplTest test fun$predefinedSequence test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun": {
        "size": 5766,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$DefaultRandomSmokeTest test fun.invoke()": {
        "size": 5204,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun": {
        "size": 6358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$SeededRandomSmokeTest test fun.invoke()": {
        "size": 5767,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$XorWowRandomImplTest test fun": {
        "size": 552,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$XorWowRandomImplTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun$XorWowRandomImplTest test fun.invoke()": {
        "size": 242,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun": {
        "size": 888,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.random test fun.invoke()": {
        "size": 588,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsInt test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsInt test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsLong test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsLong test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsDouble test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsDouble test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsDouble test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsComparable test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsComparable test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun$coercionsComparable test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun$calculateFinalElement test fun": {
        "size": 419,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun$calculateFinalElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun$calculateFinalElement test fun.invoke()": {
        "size": 189,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun$iterateToFinalElement test fun": {
        "size": 419,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun$iterateToFinalElement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun$iterateToFinalElement test fun.invoke()": {
        "size": 189,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyConstant test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyConstant test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyConstant test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyRange test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyRange test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$oneElementRange test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$oneElementRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$oneElementRange test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleRange test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleRange test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleRangeWithNonConstantEnds test fun": {
        "size": 413,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleRangeWithNonConstantEnds test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleRangeWithNonConstantEnds test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$openRange test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$openRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$openRange test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$openRangeUntil test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$openRangeUntil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$openRangeUntil test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyDownto test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyDownto test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$emptyDownto test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$oneElementDownTo test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$oneElementDownTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$oneElementDownTo test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleDownTo test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleDownTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleDownTo test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleSteppedRange test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleSteppedRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleSteppedRange test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleSteppedDownTo test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleSteppedDownTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$simpleSteppedDownTo test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactSteppedRange test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactSteppedRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactSteppedRange test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactSteppedDownTo test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactSteppedDownTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactSteppedDownTo test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedEmptyRange test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedEmptyRange test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedEmptyBackSequence test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedEmptyBackSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedEmptyBackSequence test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedRange test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedRange test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedBackSequence test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedBackSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedBackSequence test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedSimpleSteppedRange test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedSimpleSteppedRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedSimpleSteppedRange test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedInexactSteppedDownTo test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedInexactSteppedDownTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$reversedInexactSteppedDownTo test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueToMaxValue test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueToMaxValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueToMaxValue test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueMinusTwoToMaxValue test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueMinusTwoToMaxValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueMinusTwoToMaxValue test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueToMinValue test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueToMinValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$maxValueToMinValue test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueToMaxValue test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueToMaxValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueToMaxValue test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueMinusTwoToMaxValue test fun": {
        "size": 427,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueMinusTwoToMaxValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueMinusTwoToMaxValue test fun.invoke()": {
        "size": 189,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueToMinValue test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueToMinValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMaxValueToMinValue test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMinValueToMinValue test fun": {
        "size": 411,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMinValueToMinValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionMinValueToMinValue test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactToMaxValue test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactToMaxValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactToMaxValue test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$overflowZeroToMinValue test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$overflowZeroToMinValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$overflowZeroToMinValue test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionDownToMinValue test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionDownToMinValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$progressionDownToMinValue test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactDownToMinValue test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactDownToMinValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$inexactDownToMinValue test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$overflowZeroDownToMaxValue test fun": {
        "size": 405,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$overflowZeroDownToMaxValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun$overflowZeroDownToMaxValue test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$intRange test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$intRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$intRange test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$byteRange test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$byteRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$byteRange test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$shortRange test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$shortRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$shortRange test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$longRange test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$longRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$longRange test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$charRange test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$charRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$charRange test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$doubleRange test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$doubleRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$doubleRange test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$floatRange test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$floatRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$floatRange test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$openRangeEndExclusive test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$openRangeEndExclusive test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$openRangeEndExclusive test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$openRangeEndExclusiveThrows test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$openRangeEndExclusiveThrows test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$openRangeEndExclusiveThrows test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$isEmpty test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$isEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$isEmpty test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyEquals test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyEquals test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyHashCode test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyHashCode test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyOpenEquals test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyOpenEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$emptyOpenEquals test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$comparableRange test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$comparableRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$comparableRange test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$comparableOpenRange test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$comparableOpenRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$comparableOpenRange test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$illegalProgressionCreation test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$illegalProgressionCreation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$illegalProgressionCreation test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$stepSizeIsTooLow test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$stepSizeIsTooLow test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$stepSizeIsTooLow test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$randomInEmptyRange test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$randomInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$randomInEmptyRange test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$randomOrNullInEmptyRange test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$randomOrNullInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$randomOrNullInEmptyRange test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$firstInEmptyRange test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$firstInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$firstInEmptyRange test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$firstOrNullInEmptyRange test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$firstOrNullInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$firstOrNullInEmptyRange test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$lastInEmptyRange test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$lastInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$lastInEmptyRange test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$lastOrNullInEmptyRange test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$lastOrNullInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun$lastOrNullInEmptyRange test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$uintRange test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$uintRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$uintRange test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ubyteRange test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ubyteRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ubyteRange test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ushortRange test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ushortRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ushortRange test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ulongRange test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ulongRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$ulongRange test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$openRangeEndExclusive test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$openRangeEndExclusive test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$openRangeEndExclusive test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$openRangeEndExclusiveThrows test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$openRangeEndExclusiveThrows test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$openRangeEndExclusiveThrows test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$isEmpty test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$isEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$isEmpty test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$emptyEquals test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$emptyEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$emptyEquals test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$emptyHashCode test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$emptyHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$emptyHashCode test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$illegalProgressionCreation test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$illegalProgressionCreation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$illegalProgressionCreation test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$stepSizeIsTooLow test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$stepSizeIsTooLow test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$stepSizeIsTooLow test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$randomInEmptyRange test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$randomInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$randomInEmptyRange test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$firstInEmptyRange test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$firstInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$firstInEmptyRange test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$firstOrNullInEmptyRange test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$firstOrNullInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$firstOrNullInEmptyRange test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$lastInEmptyRange test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$lastInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$lastInEmptyRange test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$lastOrNullInEmptyRange test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$lastOrNullInEmptyRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun$lastOrNullInEmptyRange test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun": {
        "size": 1134,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$CoercionTest test fun.invoke()": {
        "size": 802,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun": {
        "size": 798,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$ProgressionLastElementTest test fun.invoke()": {
        "size": 472,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun": {
        "size": 7318,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeIterationTest test fun.invoke()": {
        "size": 6700,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun": {
        "size": 4924,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$RangeTest test fun.invoke()": {
        "size": 4405,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun": {
        "size": 3560,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun$URangeTest test fun.invoke()": {
        "size": 3110,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun": {
        "size": 1216,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.ranges test fun.invoke()": {
        "size": 896,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$className test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$className test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$className test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$extendsKClassifier test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$extendsKClassifier test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$extendsKClassifier test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$isInstanceCastSafeCast test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$isInstanceCastSafeCast test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun$isInstanceCastSafeCast test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KTypeProjectionTest test fun$constructorArgumentsValidation test fun": {
        "size": 420,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KTypeProjectionTest test fun$constructorArgumentsValidation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KTypeProjectionTest test fun$constructorArgumentsValidation test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun": {
        "size": 950,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KClassTest test fun.invoke()": {
        "size": 626,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KTypeProjectionTest test fun": {
        "size": 582,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KTypeProjectionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun$KTypeProjectionTest test fun.invoke()": {
        "size": 269,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun": {
        "size": 680,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.reflection test fun.invoke()": {
        "size": 386,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$ignoreNumberFormat test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$ignoreNumberFormat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$ignoreNumberFormat test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$upperCase test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$upperCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$upperCase test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$lowerCase test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$lowerCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$lowerCase test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$defaultCase test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$defaultCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$defaultCase test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSeparatorPrefixSuffix test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSeparatorPrefixSuffix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSeparatorPrefixSuffix test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerLine test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerLine test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerGroup test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerGroup test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerLineAndBytesPerGroup test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerLineAndBytesPerGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerLineAndBytesPerGroup test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$macAddress test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$macAddress test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$macAddress test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseRequiresTwoDigitsPerByte test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseRequiresTwoDigitsPerByte test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseRequiresTwoDigitsPerByte test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseIgnoresCase test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseIgnoresCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseIgnoresCase test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseAcceptsAllNewLineSequences test fun": {
        "size": 413,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseAcceptsAllNewLineSequences test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseAcceptsAllNewLineSequences test fun.invoke()": {
        "size": 183,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseMultipleNewLines test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseMultipleNewLines test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseMultipleNewLines test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseNewLineAtEnd test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseNewLineAtEnd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parseNewLineAtEnd test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$emptyGroupSeparator test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$emptyGroupSeparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$emptyGroupSeparator test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerGroupBiggerThanBytesPerLine test fun": {
        "size": 421,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerGroupBiggerThanBytesPerLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytesPerGroupBiggerThanBytesPerLine test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$groupSeparatorWithNewLine test fun": {
        "size": 401,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$groupSeparatorWithNewLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$groupSeparatorWithNewLine test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$nonPositiveBytesPerLine test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$nonPositiveBytesPerLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$nonPositiveBytesPerLine test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$nonPositiveBytesPerGroup test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$nonPositiveBytesPerGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$nonPositiveBytesPerGroup test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSeparatorWithNewLine test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSeparatorWithNewLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSeparatorWithNewLine test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytePrefixWithNewLine test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytePrefixWithNewLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$bytePrefixWithNewLine test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSuffixWithNewLine test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSuffixWithNewLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$byteSuffixWithNewLine test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$formatToString test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$formatToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$formatToString test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$createOnDemand test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$createOnDemand test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$createOnDemand test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$formattedStringLength test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$formattedStringLength test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$formattedStringLength test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parsedByteArrayMaxSize test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parsedByteArrayMaxSize test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun$parsedByteArrayMaxSize test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charFromIntCode test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charFromIntCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charFromIntCode test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charFromUShortCode test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charFromUShortCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charFromUShortCode test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$code test fun": {
        "size": 329,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$code test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$code test fun.invoke()": {
        "size": 136,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$digitToInt test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$digitToInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$digitToInt test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$digitToChar test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$digitToChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$digitToChar test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$equalsIgnoreCase test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$equalsIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$equalsIgnoreCase test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategory test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategory test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategory test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryUnassigned test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryUnassigned test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryUnassigned test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryUppercaseLetter test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryUppercaseLetter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryUppercaseLetter test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLowercaseLetter test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLowercaseLetter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLowercaseLetter test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryTitlecaseLetter test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryTitlecaseLetter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryTitlecaseLetter test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryModifierLetter test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryModifierLetter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryModifierLetter test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryOtherLetter test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryOtherLetter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryOtherLetter test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryDecimalDigitNumber test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryDecimalDigitNumber test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryDecimalDigitNumber test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLetterNumber test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLetterNumber test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLetterNumber test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryOtherNumber test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryOtherNumber test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryOtherNumber test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategorySpaceSeparator test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategorySpaceSeparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategorySpaceSeparator test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLineSeparator test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLineSeparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryLineSeparator test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryParagraphSeparator test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryParagraphSeparator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryParagraphSeparator test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryControl test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryControl test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$charCategoryControl test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$lowercaseChar test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$lowercaseChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$lowercaseChar test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$uppercaseChar test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$uppercaseChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$uppercaseChar test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$titlecaseChar test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$titlecaseChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$titlecaseChar test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$lowercase test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$lowercase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$lowercase test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$uppercase test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$uppercase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$uppercase test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$titlecase test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$titlecase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$titlecase test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$otherLowercaseProperty test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$otherLowercaseProperty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$otherLowercaseProperty test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$otherUppercaseProperty test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$otherUppercaseProperty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$otherUppercaseProperty test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$isHighSurrogate test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$isHighSurrogate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$isHighSurrogate test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$isLowSurrogate test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$isLowSurrogate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun$isLowSurrogate test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$ignoreBytesFormat test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$ignoreBytesFormat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$ignoreBytesFormat test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$upperCase test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$upperCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$upperCase test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$lowerCase test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$lowerCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$lowerCase test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$defaultCase test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$defaultCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$defaultCase test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatAndParseZero test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatAndParseZero test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatAndParseZero test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatAndParseMax test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatAndParseMax test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatAndParseMax test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatPrefixSuffix test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatPrefixSuffix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$formatPrefixSuffix test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$removeLeadingZeros test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$removeLeadingZeros test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$removeLeadingZeros test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseLongFromSubstring test fun": {
        "size": 398,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseLongFromSubstring test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseLongFromSubstring test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseRequiresPrefixSuffix test fun": {
        "size": 404,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseRequiresPrefixSuffix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseRequiresPrefixSuffix test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseRequiresAtLeastOneHexDigit test fun": {
        "size": 416,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseRequiresAtLeastOneHexDigit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseRequiresAtLeastOneHexDigit test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseIgnoresCase test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseIgnoresCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseIgnoresCase test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseIgnoresRemoveLeadingZeros test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseIgnoresRemoveLeadingZeros test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseIgnoresRemoveLeadingZeros test fun.invoke()": {
        "size": 184,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseLimitsHexLength test fun": {
        "size": 394,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseLimitsHexLength test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$parseLimitsHexLength test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$prefixWithNewLine test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$prefixWithNewLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$prefixWithNewLine test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$suffixWithNewLine test fun": {
        "size": 388,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$suffixWithNewLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun$suffixWithNewLine test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$properties test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$properties test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$properties test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchResult test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchResult test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchResult test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEscapeSurrogatePair test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEscapeSurrogatePair test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEscapeSurrogatePair test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEscapeRandomChar test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEscapeRandomChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEscapeRandomChar test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchIgnoreCase test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchIgnoreCase test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchSequence test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchSequence test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchAllSequence test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchAllSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchAllSequence test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchGroups test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchGroups test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchOptionalGroup test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchOptionalGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchOptionalGroup test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroups test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroups test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchDuplicateGroupName test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchDuplicateGroupName test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchDuplicateGroupName test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchOptionalNamedGroup test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchOptionalNamedGroup test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchOptionalNamedGroup test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchWithBackReference test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchWithBackReference test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchWithBackReference test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchCharWithOctalValue test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchCharWithOctalValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchCharWithOctalValue test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroupsWithBackReference test fun": {
        "size": 390,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroupsWithBackReference test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroupsWithBackReference test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroupCollection test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroupCollection test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchNamedGroupCollection test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$invalidNamedGroupDeclaration test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$invalidNamedGroupDeclaration test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$invalidNamedGroupDeclaration test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchMultiline test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchMultiline test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchMultiline test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntire test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntire test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntire test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntireLazyQuantor test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntireLazyQuantor test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntireLazyQuantor test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntireNext test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntireNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchEntireNext test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchAt test fun": {
        "size": 338,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$matchAt test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$escapeLiteral test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$escapeLiteral test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$escapeLiteral test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replace test fun": {
        "size": 338,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replace test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceWithNamedGroups test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceWithNamedGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceWithNamedGroups test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceWithNamedOptionalGroups test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceWithNamedOptionalGroups test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceWithNamedOptionalGroups test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceEvaluator test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceEvaluator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$replaceEvaluator test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$split test fun": {
        "size": 334,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$split test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$split test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitByEmptyMatch test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitByEmptyMatch test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitByEmptyMatch test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitByNoMatch test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitByNoMatch test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitByNoMatch test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitWithLimitOne test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitWithLimitOne test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$splitWithLimitOne test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$findAllAndSplitToSequence test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$findAllAndSplitToSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$findAllAndSplitToSequence test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$findAllEmoji test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$findAllEmoji test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun$findAllEmoji test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$stringBuild test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$stringBuild test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$stringBuild test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendMany test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendMany test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendMany test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$append test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$append test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$append test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deprecatedAppend test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deprecatedAppend test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deprecatedAppend test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$asCharSequence test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$asCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$asCharSequence test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$constructors test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$constructors test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$constructors test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$clear test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$clear test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$clear test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$get test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$get test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$get test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$reverse test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$reverse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$reverse test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendChar test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendChar test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendInt test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendInt test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendBoolean test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendBoolean test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendBoolean test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendString test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendString test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendAny test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendAny test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendAny test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendCharArray test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendCharArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendCharArray test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deleteChar test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deleteChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deleteChar test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deleteSubstring test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deleteSubstring test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$deleteSubstring test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$capacityTest test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$capacityTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$capacityTest test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$overflow test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$overflow test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$overflow test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$indexOf test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$indexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$indexOf test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$lastIndexOf test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$lastIndexOf test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$lastIndexOf test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertBoolean test fun": {
        "size": 374,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertBoolean test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertBoolean test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertChar test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertChar test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertCharArray test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertCharArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertCharArray test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertCharSequence test fun": {
        "size": 384,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertCharSequence test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertAny test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertAny test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertAny test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertString test fun": {
        "size": 372,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$insertString test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$setLength test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$setLength test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$setLength test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$substring test fun": {
        "size": 366,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$substring test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$substring test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$trimToSize test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$trimToSize test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$trimToSize test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$set test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$set test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$set test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$setRange test fun": {
        "size": 364,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$setRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$setRange test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$toCharArray test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$toCharArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$toCharArray test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendLine test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendLine test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun$appendLine test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$encodeToByteArray test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$encodeToByteArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$encodeToByteArray test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$encodeToByteArraySlice test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$encodeToByteArraySlice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$encodeToByteArraySlice test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$decodeToString test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$decodeToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$decodeToString test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$decodeToStringSlice test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$decodeToStringSlice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$decodeToStringSlice test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$kotlinxIOUnicodeTest test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$kotlinxIOUnicodeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun$kotlinxIOUnicodeTest test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toBoolean test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toBoolean test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toBoolean test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toByte test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toByte test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toByte test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toShort test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toShort test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toShort test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toInt test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toInt test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toLong test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toLong test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toDouble test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toDouble test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toDouble test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toFloat test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toFloat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toFloat test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUByte test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUByte test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUByte test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUShort test fun": {
        "size": 391,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUShort test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUShort test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUInt test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toUInt test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toULong test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toULong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$toULong test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$byteToStringWithRadix test fun": {
        "size": 417,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$byteToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$byteToStringWithRadix test fun.invoke()": {
        "size": 189,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$shortToStringWithRadix test fun": {
        "size": 419,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$shortToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$shortToStringWithRadix test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$intToStringWithRadix test fun": {
        "size": 415,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$intToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$intToStringWithRadix test fun.invoke()": {
        "size": 188,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$longToStringWithRadix test fun": {
        "size": 417,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$longToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$longToStringWithRadix test fun.invoke()": {
        "size": 189,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ubyteToStringWithRadix test fun": {
        "size": 419,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ubyteToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ubyteToStringWithRadix test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ushortToStringWithRadix test fun": {
        "size": 421,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ushortToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ushortToStringWithRadix test fun.invoke()": {
        "size": 191,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$uintToStringWithRadix test fun": {
        "size": 417,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$uintToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$uintToStringWithRadix test fun.invoke()": {
        "size": 189,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ulongToStringWithRadix test fun": {
        "size": 419,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ulongToStringWithRadix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun$ulongToStringWithRadix test fun.invoke()": {
        "size": 190,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayFullSlice test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayFullSlice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayFullSlice test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArraySlice test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArraySlice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArraySlice test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArray test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArray test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayUnicodeSurrogatePairs test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayUnicodeSurrogatePairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayUnicodeSurrogatePairs test fun.invoke()": {
        "size": 176,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayOutOfBounds test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayOutOfBounds test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringFromCharArrayOutOfBounds test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$toCharArray test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$toCharArray test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$toCharArray test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$isEmptyAndBlank test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$isEmptyAndBlank test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$isEmptyAndBlank test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orEmpty test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orEmpty test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$regionMatchesForCharSequence test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$regionMatchesForCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$regionMatchesForCharSequence test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$regionMatchesForString test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$regionMatchesForString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$regionMatchesForString test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithString test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithString test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithStringForCharSequence test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithStringForCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithStringForCharSequence test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithString test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithString test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithStringForCharSequence test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithStringForCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithStringForCharSequence test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithChar test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$startsWithChar test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithChar test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$endsWithChar test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$commonPrefix test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$commonPrefix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$commonPrefix test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$commonSuffix test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$commonSuffix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$commonSuffix test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$capitalize test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$capitalize test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$capitalize test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$decapitalize test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$decapitalize test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$decapitalize test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$slice test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$slice test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$slice test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$sliceCharSequence test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$sliceCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$sliceCharSequence test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reverse test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reverse test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reverse test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reverseCharSequence test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reverseCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reverseCharSequence test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indices test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indices test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indices test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceRange test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceRange test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeRange test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeRange test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeRange test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$substringDelimited test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$substringDelimited test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$substringDelimited test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceDelimited test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceDelimited test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceDelimited test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$repeat test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$repeat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$repeat test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringIterator test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringIterator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$stringIterator test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimStart test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimStart test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimStart test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimEnd test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimEnd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimEnd test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimStartAndEnd test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimStartAndEnd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimStartAndEnd test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$padStart test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$padStart test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$padStart test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$padEnd test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$padEnd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$padEnd test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removePrefix test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removePrefix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removePrefix test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSuffix test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSuffix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSuffix test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSurrounding test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSurrounding test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSurrounding test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removePrefixCharSequence test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removePrefixCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removePrefixCharSequence test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSuffixCharSequence test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSuffixCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSuffixCharSequence test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSurroundingCharSequence test fun": {
        "size": 385,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSurroundingCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$removeSurroundingCharSequence test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$split test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$split test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$split test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitSingleDelimiter test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitSingleDelimiter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitSingleDelimiter test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitToLines test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitToLines test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitToLines test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitIllegalLimit test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitIllegalLimit test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$splitIllegalLimit test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyChar test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyChar test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyCharIgnoreCase test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyCharIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyCharIgnoreCase test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyString test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyString test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyStringIgnoreCase test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyStringIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfAnyStringIgnoreCase test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findAnyOfStrings test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findAnyOfStrings test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findAnyOfStrings test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findAnyOfStringsIgnoreCase test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findAnyOfStringsIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findAnyOfStringsIgnoreCase test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfChar test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfChar test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfCharIgnoreCase test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfCharIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfCharIgnoreCase test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfString test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfString test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfStringIgnoreCase test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfStringIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfStringIgnoreCase test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contains test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contains test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contains test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$equalsIgnoreCase test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$equalsIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$equalsIgnoreCase test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$compareToIgnoreCase test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$compareToIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$compareToIgnoreCase test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$compareToUnicode test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$compareToUnicode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$compareToUnicode test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orderUnicodeLongString test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orderUnicodeLongString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orderUnicodeLongString test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orderIgnoringCase test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orderIgnoringCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$orderIgnoringCase test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replace test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replace test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replace test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceFirst test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceFirst test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$replaceFirst test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$count test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$count test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$count test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testSplitByChar test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testSplitByChar test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testSplitByChar test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$forEach test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$forEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$forEach test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$onEach test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$onEach test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$onEach test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$onEachIndexed test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$onEachIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$onEachIndexed test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filter test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filter test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filter test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterCharSequence test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterCharSequence test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterNot test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterNot test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterNotCharSequence test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterNotCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterNotCharSequence test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterIndexed test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterIndexed test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterIndexedCharSequence test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterIndexedCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$filterIndexedCharSequence test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$all test fun": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$all test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$all test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$any test fun": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$any test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$any test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$find test fun": {
        "size": 335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$find test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$find test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findNot test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findNot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$findNot test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$random test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$random test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$random test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$randomOrNull test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$randomOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$randomOrNull test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$partition test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$partition test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$partition test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$partitionCharSequence test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$partitionCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$partitionCharSequence test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$zipWithNext test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$zipWithNext test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$zipWithNext test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$zipWithNextPairs test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$zipWithNextPairs test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$zipWithNextPairs test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$chunked test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$chunked test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$chunked test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$windowed test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$windowed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$windowed test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$map test fun": {
        "size": 333,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$map test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$map test fun.invoke()": {
        "size": 139,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$mapTo test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$mapTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$mapTo test fun.invoke()": {
        "size": 141,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$flatMap test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$flatMap test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$flatMap test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$flatMapIndexed test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$flatMapIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$flatMapIndexed test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$fold test fun": {
        "size": 335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$fold test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$fold test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$foldRight test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$foldRight test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$foldRight test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceIndexed test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceIndexed test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceIndexedOrNull test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceIndexedOrNull test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRightIndexed test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRightIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRightIndexed test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRightIndexedOrNull test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRightIndexedOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRightIndexedOrNull test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduce test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduce test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRight test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRight test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceRight test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceOrNull test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceOrNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$reduceOrNull test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$scan test fun": {
        "size": 335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$scan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$scan test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$scanIndexed test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$scanIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$scanIndexed test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$runningReduce test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$runningReduce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$runningReduce test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$runningReduceIndexed test fun": {
        "size": 367,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$runningReduceIndexed test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$runningReduceIndexed test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$groupBy test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$groupBy test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$groupBy test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$associateWith test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$associateWith test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$associateWith test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$joinToString test fun": {
        "size": 351,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$joinToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$joinToString test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$joinTo test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$joinTo test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$joinTo test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropWhile test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropWhile test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropWhileCharSequence test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropWhileCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropWhileCharSequence test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$drop test fun": {
        "size": 335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$drop test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$drop test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropCharSequence test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$dropCharSequence test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeWhile test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeWhile test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeWhile test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeWhileCharSequence test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeWhileCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeWhileCharSequence test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$take test fun": {
        "size": 335,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$take test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$take test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeCharSequence test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeCharSequence test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$takeCharSequence test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosure test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosure test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosure test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureAtStart test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureAtStart test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureAtStart test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureAtEnd test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureAtEnd test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureAtEnd test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureEmpty test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureEmpty test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testReplaceAllClosureEmpty test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimMargin test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimMargin test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimMargin test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimIndent test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimIndent test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$trimIndent test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testIndent test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testIndent test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$testIndent test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$elementAt test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$elementAt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$elementAt test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$toHashSet test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$toHashSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$toHashSet test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$lowercase test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$lowercase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$lowercase test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$uppercase test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$uppercase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$uppercase test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contentEquals test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contentEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contentEquals test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contentEqualsIgnoreCase test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contentEqualsIgnoreCase test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$contentEqualsIgnoreCase test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfRespectsCharBoundary test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfRespectsCharBoundary test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun$indexOfRespectsCharBoundary test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun": {
        "size": 5932,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$BytesHexFormatTest test fun.invoke()": {
        "size": 5376,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun": {
        "size": 6410,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$CharTest test fun.invoke()": {
        "size": 5824,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun": {
        "size": 3755,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$NumberHexFormatTest test fun.invoke()": {
        "size": 3298,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun": {
        "size": 6992,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$RegexTest test fun.invoke()": {
        "size": 6375,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun": {
        "size": 6985,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringBuilderTest test fun.invoke()": {
        "size": 6350,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun": {
        "size": 1396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringEncodingTest test fun.invoke()": {
        "size": 1050,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun": {
        "size": 4332,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringNumberConversionTest test fun.invoke()": {
        "size": 3838,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun": {
        "size": 25860,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun$StringTest test fun.invoke()": {
        "size": 24272,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun": {
        "size": 1754,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.text test fun.invoke()": {
        "size": 1406,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$constructionFromNumber test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$constructionFromNumber test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$constructionFromNumber test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$equality test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$equality test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$equality test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$comparison test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$comparison test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$comparison test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$constructionFactoryFunctions test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$constructionFactoryFunctions test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$constructionFactoryFunctions test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$conversionToNumber test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$conversionToNumber test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$conversionToNumber test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfProperSum test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfProperSum test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfProperSum test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfCarriedSum test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfCarriedSum test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfCarriedSum test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfInfinity test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfInfinity test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$componentsOfInfinity test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$infinite test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$infinite test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$infinite test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$negation test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$negation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$negation test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$signAndAbsoluteValue test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$signAndAbsoluteValue test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$signAndAbsoluteValue test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$negativeZero test fun": {
        "size": 357,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$negativeZero test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$negativeZero test fun.invoke()": {
        "size": 152,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$addition test fun": {
        "size": 349,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$addition test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$addition test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$subtraction test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$subtraction test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$subtraction test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$multiplication test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$multiplication test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$multiplication test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$divisionByNumber test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$divisionByNumber test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$divisionByNumber test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$divisionByDuration test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$divisionByDuration test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$divisionByDuration test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$truncation test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$truncation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$truncation test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatIsoString test fun": {
        "size": 379,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatIsoString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatIsoString test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseIsoStringFailing test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseIsoStringFailing test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseIsoStringFailing test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatInUnits test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatInUnits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatInUnits test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatDefault test fun": {
        "size": 375,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatDefault test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseAndFormatDefault test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseDefaultFailing test fun": {
        "size": 371,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseDefaultFailing test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun$parseDefaultFailing test fun.invoke()": {
        "size": 159,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationUnitTest test fun$conversion test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationUnitTest test fun$conversion test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationUnitTest test fun$conversion test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeOfCalc test fun": {
        "size": 376,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeOfCalc test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeOfCalc test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeAndResult test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeAndResult test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeAndResult test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeTestClock test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeTestClock test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun$measureTimeTestClock test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun$overflows test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun$overflows test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun$overflows test fun.invoke()": {
        "size": 161,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun$nanosecondRounding test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun$nanosecondRounding test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun$nanosecondRounding test fun.invoke()": {
        "size": 170,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustment test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustment test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustment test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentTestTimeSource test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentTestTimeSource test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentTestTimeSource test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentBig test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentBig test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentBig test fun.invoke()": {
        "size": 153,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentInfinite test fun": {
        "size": 369,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentInfinite test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$adjustmentInfinite test fun.invoke()": {
        "size": 158,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longDisplacement test fun": {
        "size": 365,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longDisplacement test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longDisplacement test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$timeMarkDifferenceAndComparison test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$timeMarkDifferenceAndComparison test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$timeMarkDifferenceAndComparison test fun.invoke()": {
        "size": 171,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longTimeMarkInfinities test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longTimeMarkInfinities test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longTimeMarkInfinities test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$doubleTimeMarkInfiniteEqualHashCode test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$doubleTimeMarkInfiniteEqualHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$doubleTimeMarkInfiniteEqualHashCode test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longTimeMarkRoundingEqualHashCode test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longTimeMarkRoundingEqualHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$longTimeMarkRoundingEqualHashCode test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustment test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustment test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustment test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustmentBig test fun": {
        "size": 389,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustmentBig test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustmentBig test fun.invoke()": {
        "size": 168,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustmentInfinite test fun": {
        "size": 399,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustmentInfinite test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkAdjustmentInfinite test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkDifferenceAndComparison test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkDifferenceAndComparison test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun$defaultTimeMarkDifferenceAndComparison test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun": {
        "size": 4994,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationTest test fun.invoke()": {
        "size": 4474,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationUnitTest test fun": {
        "size": 524,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationUnitTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$DurationUnitTest test fun.invoke()": {
        "size": 220,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun": {
        "size": 962,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$MeasureTimeTest test fun.invoke()": {
        "size": 639,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun": {
        "size": 738,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TestTimeSourceTest test fun.invoke()": {
        "size": 422,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun": {
        "size": 3188,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun$TimeMarkTest test fun.invoke()": {
        "size": 2768,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun": {
        "size": 1200,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.time test fun.invoke()": {
        "size": 882,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_2 test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_2 test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_3 test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_3 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_3 test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_vararg test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_vararg test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$minOf_vararg test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_2 test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_2 test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_3 test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_3 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_3 test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_vararg test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_vararg test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun$maxOf_vararg test fun.invoke()": {
        "size": 160,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$equality test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$equality test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$equality test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToString test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToString test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$operations test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$operations test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$operations test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$divRem test fun": {
        "size": 337,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$divRem test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$divRem test fun.invoke()": {
        "size": 138,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$comparisons test fun": {
        "size": 347,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$comparisons test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$comparisons test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToFloat test fun": {
        "size": 353,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToFloat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToFloat test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToDouble test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToDouble test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertToDouble test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertDoubleToUInt test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertDoubleToUInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun$convertDoubleToUInt test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$equality test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$equality test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$equality test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToString test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToString test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$operations test fun": {
        "size": 348,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$operations test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$operations test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$divRem test fun": {
        "size": 340,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$divRem test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$divRem test fun.invoke()": {
        "size": 140,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$comparisons test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$comparisons test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$comparisons test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToFloat test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToFloat test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToFloat test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToDouble test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToDouble test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertToDouble test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertDoubleToULong test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertDoubleToULong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun$convertDoubleToULong test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun$min test fun": {
        "size": 334,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun$min test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun$min test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun$max test fun": {
        "size": 334,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun$max test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun$max test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ubyteBits test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ubyteBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ubyteBits test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ushortBits test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ushortBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ushortBits test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$uintBits test fun": {
        "size": 350,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$uintBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$uintBits test fun.invoke()": {
        "size": 146,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ulongBits test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ulongBits test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ulongBits test fun.invoke()": {
        "size": 147,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$uintRotate test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$uintRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$uintRotate test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ubyteRotate test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ubyteRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ubyteRotate test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ulongRotate test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ulongRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ulongRotate test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ushortRotate test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ushortRotate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun$ushortRotate test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun": {
        "size": 1506,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UComparisonsTest test fun.invoke()": {
        "size": 1148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun": {
        "size": 1882,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UIntTest test fun.invoke()": {
        "size": 1512,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun": {
        "size": 1893,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$ULongTest test fun.invoke()": {
        "size": 1522,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun": {
        "size": 681,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$UMathTest test fun.invoke()": {
        "size": 370,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun": {
        "size": 1873,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun$NumbersTest test fun.invoke()": {
        "size": 1500,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun": {
        "size": 1184,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.unsigned test fun.invoke()": {
        "size": 862,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testSimpleReturn test fun": {
        "size": 381,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testSimpleReturn test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testSimpleReturn test fun.invoke()": {
        "size": 166,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testDeepTreeDepth test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testDeepTreeDepth test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testDeepTreeDepth test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBinaryTreeDepth test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBinaryTreeDepth test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBinaryTreeDepth test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testDeepTreeOddEvenNodesMutual test fun": {
        "size": 409,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testDeepTreeOddEvenNodesMutual test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testDeepTreeOddEvenNodesMutual test fun.invoke()": {
        "size": 180,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBinaryTreeOddEvenNodesMutual test fun": {
        "size": 413,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBinaryTreeOddEvenNodesMutual test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBinaryTreeOddEvenNodesMutual test fun.invoke()": {
        "size": 182,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testMutualAndDirectMix test fun": {
        "size": 393,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testMutualAndDirectMix test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testMutualAndDirectMix test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testEqualToAnythingClass test fun": {
        "size": 397,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testEqualToAnythingClass test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testEqualToAnythingClass test fun.invoke()": {
        "size": 174,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBadClass test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBadClass test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun$testBadClass test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun$hashCodeOfNull test fun": {
        "size": 362,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun$hashCodeOfNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun$hashCodeOfNull test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun$hashCodeOfNotNull test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun$hashCodeOfNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun$hashCodeOfNotNull test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$currentVersion test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$currentVersion test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$currentVersion test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$componentValidation test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$componentValidation test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$componentValidation test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$versionComparison test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$versionComparison test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$versionComparison test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$randomVersionComparison test fun": {
        "size": 395,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$randomVersionComparison test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun$randomVersionComparison test fun.invoke()": {
        "size": 173,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$initializationCalledOnce test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$initializationCalledOnce test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$initializationCalledOnce test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$alreadyInitialized test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$alreadyInitialized test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$alreadyInitialized test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$lazyToString test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$lazyToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun$lazyToString test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$passingRequire test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$passingRequire test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$passingRequire test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingRequire test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingRequire test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingRequire test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingRequireWithLazyMessage test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingRequireWithLazyMessage test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingRequireWithLazyMessage test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$passingCheck test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$passingCheck test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$passingCheck test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingCheck test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingCheck test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingCheck test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingCheckWithLazyMessage test fun": {
        "size": 403,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingCheckWithLazyMessage test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$failingCheckWithLazyMessage test fun.invoke()": {
        "size": 177,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNull test fun": {
        "size": 377,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNull test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNullFails test fun": {
        "size": 387,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNullFails test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNullFails test fun.invoke()": {
        "size": 169,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNullWithLazyMessage test fun": {
        "size": 407,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNullWithLazyMessage test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$requireNotNullWithLazyMessage test fun.invoke()": {
        "size": 179,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$checkNotNull test fun": {
        "size": 373,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$checkNotNull test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$checkNotNull test fun.invoke()": {
        "size": 162,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$checkNotNullFails test fun": {
        "size": 383,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$checkNotNullFails test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$checkNotNullFails test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$error test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$error test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun$error test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TODOTest test fun$usage test fun": {
        "size": 332,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TODOTest test fun$usage test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TODOTest test fun$usage test fun.invoke()": {
        "size": 137,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairFirstAndSecond test fun": {
        "size": 358,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairFirstAndSecond test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairFirstAndSecond test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairMultiAssignment test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairMultiAssignment test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairMultiAssignment test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairToString test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairToString test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairEquals test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairEquals test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairHashCode test fun": {
        "size": 346,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairHashCode test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairHashSet test fun": {
        "size": 344,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairHashSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairHashSet test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairToList test fun": {
        "size": 342,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairToList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun$pairToList test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleFirstAndSecond test fun": {
        "size": 368,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleFirstAndSecond test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleFirstAndSecond test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleMultiAssignment test fun": {
        "size": 370,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleMultiAssignment test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleMultiAssignment test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleToString test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleToString test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleToString test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleEquals test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleEquals test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleEquals test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleHashCode test fun": {
        "size": 356,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleHashCode test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleHashCode test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleHashSet test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleHashSet test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleHashSet test fun.invoke()": {
        "size": 149,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleToList test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleToList test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun$tripleToList test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun": {
        "size": 2084,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$DeepRecursiveTest test fun.invoke()": {
        "size": 1708,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun": {
        "size": 731,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$HashCodeTest test fun.invoke()": {
        "size": 420,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun": {
        "size": 1182,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$KotlinVersionTest test fun.invoke()": {
        "size": 846,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun": {
        "size": 932,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$LazyTest test fun.invoke()": {
        "size": 615,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun": {
        "size": 2852,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PreconditionsTest test fun.invoke()": {
        "size": 2436,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TODOTest test fun": {
        "size": 500,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TODOTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TODOTest test fun.invoke()": {
        "size": 203,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun": {
        "size": 1676,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$PairTest test fun.invoke()": {
        "size": 1319,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun": {
        "size": 1720,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun$TripleTest test fun.invoke()": {
        "size": 1361,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun": {
        "size": 1707,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.utils test fun.invoke()": {
        "size": 1358,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testHypot test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testHypot test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testHypot test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testSqrt test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testSqrt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testSqrt test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testExp test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testExp test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testExp test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testExpm1 test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testExpm1 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testExpm1 test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog test fun": {
        "size": 341,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog test fun.invoke()": {
        "size": 143,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLn test fun": {
        "size": 339,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLn test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLn test fun.invoke()": {
        "size": 142,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog10 test fun": {
        "size": 345,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog10 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog10 test fun.invoke()": {
        "size": 145,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog2 test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLog2 test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLn1p test fun": {
        "size": 343,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLn1p test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testLn1p test fun.invoke()": {
        "size": 144,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testPowWrapper test fun": {
        "size": 355,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testPowWrapper test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun$testPowWrapper test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testCeil test fun": {
        "size": 352,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testCeil test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testCeil test fun.invoke()": {
        "size": 150,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testFloor test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testFloor test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testFloor test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testTruncate test fun": {
        "size": 360,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testTruncate test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testTruncate test fun.invoke()": {
        "size": 154,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testRound test fun": {
        "size": 354,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testRound test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun$testRound test fun.invoke()": {
        "size": 151,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testSin test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testSin test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testSin test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testCos test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testCos test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testCos test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testTan test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testTan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testTan test fun.invoke()": {
        "size": 155,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAsin test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAsin test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAsin test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtan test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtan test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtan test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtan2 test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtan2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtan2 test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testSinh test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testSinh test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testSinh test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testCosh test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testCosh test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testCosh test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testTanh test fun": {
        "size": 361,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testTanh test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testTanh test fun.invoke()": {
        "size": 156,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAsinh test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAsinh test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAsinh test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAcosh test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAcosh test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAcosh test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtanh test fun": {
        "size": 363,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtanh test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun$testAtanh test fun.invoke()": {
        "size": 157,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun": {
        "size": 2174,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$PowersTest test fun.invoke()": {
        "size": 1786,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun": {
        "size": 1087,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$RoundingsTest test fun.invoke()": {
        "size": 756,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun": {
        "size": 2612,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun$TrigonometryTest test fun.invoke()": {
        "size": 2198,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun": {
        "size": 832,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.math test fun.invoke()": {
        "size": 534,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$test1 test fun": {
        "size": 311,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$test1 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$test1 test fun.invoke()": {
        "size": 124,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$test2 test fun": {
        "size": 311,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$test2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$test2 test fun.invoke()": {
        "size": 124,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$testJsValueToThrowableOrNull1 test fun": {
        "size": 359,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$testJsValueToThrowableOrNull1 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$testJsValueToThrowableOrNull1 test fun.invoke()": {
        "size": 148,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$testJsValueToThrowableOrNull2 test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$testJsValueToThrowableOrNull2 test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun$testJsValueToThrowableOrNull2 test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun": {
        "size": 1117,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun$AsyncTest test fun.invoke()": {
        "size": 792,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun": {
        "size": 468,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.js test fun.invoke()": {
        "size": 192,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testPointer test fun": {
        "size": 386,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testPointer test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testPointer test fun.invoke()": {
        "size": 167,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testByte test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testByte test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testByte test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testShort test fun": {
        "size": 382,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testShort test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testShort test fun.invoke()": {
        "size": 165,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testInt test fun": {
        "size": 378,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testInt test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testInt test fun.invoke()": {
        "size": 163,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testLong test fun": {
        "size": 380,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testLong test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testLong test fun.invoke()": {
        "size": 164,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testAccessingWithDifferentTypes test fun": {
        "size": 426,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testAccessingWithDifferentTypes test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun$testAccessingWithDifferentTypes test fun.invoke()": {
        "size": 187,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testWasmMemorySizeGrow test fun": {
        "size": 408,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testWasmMemorySizeGrow test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testWasmMemorySizeGrow test fun.invoke()": {
        "size": 178,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocator test fun": {
        "size": 402,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocator test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocator test fun.invoke()": {
        "size": 175,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocatorGrowsMemory test fun": {
        "size": 424,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocatorGrowsMemory test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocatorGrowsMemory test fun.invoke()": {
        "size": 186,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$nestedAllocators test fun": {
        "size": 396,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$nestedAllocators test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$nestedAllocators test fun.invoke()": {
        "size": 172,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testJsIntropInsideAllocations test fun": {
        "size": 422,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testJsIntropInsideAllocations test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testJsIntropInsideAllocations test fun.invoke()": {
        "size": 185,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testNestedAllocatorThrows test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testNestedAllocatorThrows test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testNestedAllocatorThrows test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocatorThrows test fun": {
        "size": 414,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocatorThrows test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun$testScopedAllocatorThrows test fun.invoke()": {
        "size": 181,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun": {
        "size": 1599,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAccessTestTest test fun.invoke()": {
        "size": 1234,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun": {
        "size": 1968,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun$MemoryAllocationTest test fun.invoke()": {
        "size": 1593,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun": {
        "size": 705,
        "type": "class"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun.<init>()": {
        "size": 75,
        "type": "function"
    },
    "kotlin.wasm.internal.testContainer$test.wasm.unsafe test fun.invoke()": {
        "size": 410,
        "type": "function"
    }
};
